// Code generated by Kitex v0.8.0. DO NOT EDIT.

package echo

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/kitex-contrib/codec-dubbo-tests/code/kitex/kitex_gen/java"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
	_ = java.KitexUnusedProtection
)

type TestServiceEchoIntArgs struct {
	Req int32 `thrift:"req,1" frugal:"1,default,i32" json:"req"`
}

func NewTestServiceEchoIntArgs() *TestServiceEchoIntArgs {
	return &TestServiceEchoIntArgs{}
}

func (p *TestServiceEchoIntArgs) InitDefault() {
	*p = TestServiceEchoIntArgs{}
}

func (p *TestServiceEchoIntArgs) GetReq() (v int32) {
	return p.Req
}
func (p *TestServiceEchoIntArgs) SetReq(val int32) {
	p.Req = val
}

func (p *TestServiceEchoIntArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoIntArgs(%+v)", *p)
}
func (p *TestServiceEchoIntArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoIntResult struct {
	Success *int32 `thrift:"success,0,optional" frugal:"0,optional,i32" json:"success,omitempty"`
}

func NewTestServiceEchoIntResult() *TestServiceEchoIntResult {
	return &TestServiceEchoIntResult{}
}

func (p *TestServiceEchoIntResult) InitDefault() {
	*p = TestServiceEchoIntResult{}
}

var TestServiceEchoIntResult_Success_DEFAULT int32

func (p *TestServiceEchoIntResult) GetSuccess() (v int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoIntResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoIntResult) SetSuccess(x interface{}) {
	p.Success = x.(*int32)
}

func (p *TestServiceEchoIntResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoIntResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoIntResult(%+v)", *p)
}
func (p *TestServiceEchoIntResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBoolArgs struct {
	Req bool `thrift:"req,1" frugal:"1,default,bool" json:"req"`
}

func NewTestServiceEchoBoolArgs() *TestServiceEchoBoolArgs {
	return &TestServiceEchoBoolArgs{}
}

func (p *TestServiceEchoBoolArgs) InitDefault() {
	*p = TestServiceEchoBoolArgs{}
}

func (p *TestServiceEchoBoolArgs) GetReq() (v bool) {
	return p.Req
}
func (p *TestServiceEchoBoolArgs) SetReq(val bool) {
	p.Req = val
}

func (p *TestServiceEchoBoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBoolArgs(%+v)", *p)
}
func (p *TestServiceEchoBoolArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBoolResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewTestServiceEchoBoolResult() *TestServiceEchoBoolResult {
	return &TestServiceEchoBoolResult{}
}

func (p *TestServiceEchoBoolResult) InitDefault() {
	*p = TestServiceEchoBoolResult{}
}

var TestServiceEchoBoolResult_Success_DEFAULT bool

func (p *TestServiceEchoBoolResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBoolResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoBoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

func (p *TestServiceEchoBoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBoolResult(%+v)", *p)
}
func (p *TestServiceEchoBoolResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoByteArgs struct {
	Req int8 `thrift:"req,1" frugal:"1,default,byte" json:"req"`
}

func NewTestServiceEchoByteArgs() *TestServiceEchoByteArgs {
	return &TestServiceEchoByteArgs{}
}

func (p *TestServiceEchoByteArgs) InitDefault() {
	*p = TestServiceEchoByteArgs{}
}

func (p *TestServiceEchoByteArgs) GetReq() (v int8) {
	return p.Req
}
func (p *TestServiceEchoByteArgs) SetReq(val int8) {
	p.Req = val
}

func (p *TestServiceEchoByteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoByteArgs(%+v)", *p)
}
func (p *TestServiceEchoByteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoByteResult struct {
	Success *int8 `thrift:"success,0,optional" frugal:"0,optional,byte" json:"success,omitempty"`
}

func NewTestServiceEchoByteResult() *TestServiceEchoByteResult {
	return &TestServiceEchoByteResult{}
}

func (p *TestServiceEchoByteResult) InitDefault() {
	*p = TestServiceEchoByteResult{}
}

var TestServiceEchoByteResult_Success_DEFAULT int8

func (p *TestServiceEchoByteResult) GetSuccess() (v int8) {
	if !p.IsSetSuccess() {
		return TestServiceEchoByteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoByteResult) SetSuccess(x interface{}) {
	p.Success = x.(*int8)
}

func (p *TestServiceEchoByteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoByteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoByteResult(%+v)", *p)
}
func (p *TestServiceEchoByteResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoInt16Args struct {
	Req int16 `thrift:"req,1" frugal:"1,default,i16" json:"req"`
}

func NewTestServiceEchoInt16Args() *TestServiceEchoInt16Args {
	return &TestServiceEchoInt16Args{}
}

func (p *TestServiceEchoInt16Args) InitDefault() {
	*p = TestServiceEchoInt16Args{}
}

func (p *TestServiceEchoInt16Args) GetReq() (v int16) {
	return p.Req
}
func (p *TestServiceEchoInt16Args) SetReq(val int16) {
	p.Req = val
}

func (p *TestServiceEchoInt16Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt16Args(%+v)", *p)
}
func (p *TestServiceEchoInt16Args) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoInt16Result struct {
	Success *int16 `thrift:"success,0,optional" frugal:"0,optional,i16" json:"success,omitempty"`
}

func NewTestServiceEchoInt16Result() *TestServiceEchoInt16Result {
	return &TestServiceEchoInt16Result{}
}

func (p *TestServiceEchoInt16Result) InitDefault() {
	*p = TestServiceEchoInt16Result{}
}

var TestServiceEchoInt16Result_Success_DEFAULT int16

func (p *TestServiceEchoInt16Result) GetSuccess() (v int16) {
	if !p.IsSetSuccess() {
		return TestServiceEchoInt16Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoInt16Result) SetSuccess(x interface{}) {
	p.Success = x.(*int16)
}

func (p *TestServiceEchoInt16Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoInt16Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt16Result(%+v)", *p)
}
func (p *TestServiceEchoInt16Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoInt32Args struct {
	Req int32 `thrift:"req,1" frugal:"1,default,i32" json:"req"`
}

func NewTestServiceEchoInt32Args() *TestServiceEchoInt32Args {
	return &TestServiceEchoInt32Args{}
}

func (p *TestServiceEchoInt32Args) InitDefault() {
	*p = TestServiceEchoInt32Args{}
}

func (p *TestServiceEchoInt32Args) GetReq() (v int32) {
	return p.Req
}
func (p *TestServiceEchoInt32Args) SetReq(val int32) {
	p.Req = val
}

func (p *TestServiceEchoInt32Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt32Args(%+v)", *p)
}
func (p *TestServiceEchoInt32Args) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoInt32Result struct {
	Success *int32 `thrift:"success,0,optional" frugal:"0,optional,i32" json:"success,omitempty"`
}

func NewTestServiceEchoInt32Result() *TestServiceEchoInt32Result {
	return &TestServiceEchoInt32Result{}
}

func (p *TestServiceEchoInt32Result) InitDefault() {
	*p = TestServiceEchoInt32Result{}
}

var TestServiceEchoInt32Result_Success_DEFAULT int32

func (p *TestServiceEchoInt32Result) GetSuccess() (v int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoInt32Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoInt32Result) SetSuccess(x interface{}) {
	p.Success = x.(*int32)
}

func (p *TestServiceEchoInt32Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoInt32Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt32Result(%+v)", *p)
}
func (p *TestServiceEchoInt32Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoInt64Args struct {
	Req int64 `thrift:"req,1" frugal:"1,default,i64" json:"req"`
}

func NewTestServiceEchoInt64Args() *TestServiceEchoInt64Args {
	return &TestServiceEchoInt64Args{}
}

func (p *TestServiceEchoInt64Args) InitDefault() {
	*p = TestServiceEchoInt64Args{}
}

func (p *TestServiceEchoInt64Args) GetReq() (v int64) {
	return p.Req
}
func (p *TestServiceEchoInt64Args) SetReq(val int64) {
	p.Req = val
}

func (p *TestServiceEchoInt64Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt64Args(%+v)", *p)
}
func (p *TestServiceEchoInt64Args) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoInt64Result struct {
	Success *int64 `thrift:"success,0,optional" frugal:"0,optional,i64" json:"success,omitempty"`
}

func NewTestServiceEchoInt64Result() *TestServiceEchoInt64Result {
	return &TestServiceEchoInt64Result{}
}

func (p *TestServiceEchoInt64Result) InitDefault() {
	*p = TestServiceEchoInt64Result{}
}

var TestServiceEchoInt64Result_Success_DEFAULT int64

func (p *TestServiceEchoInt64Result) GetSuccess() (v int64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoInt64Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoInt64Result) SetSuccess(x interface{}) {
	p.Success = x.(*int64)
}

func (p *TestServiceEchoInt64Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoInt64Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt64Result(%+v)", *p)
}
func (p *TestServiceEchoInt64Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoFloatArgs struct {
	Req float64 `thrift:"req,1" frugal:"1,default,double" json:"req"`
}

func NewTestServiceEchoFloatArgs() *TestServiceEchoFloatArgs {
	return &TestServiceEchoFloatArgs{}
}

func (p *TestServiceEchoFloatArgs) InitDefault() {
	*p = TestServiceEchoFloatArgs{}
}

func (p *TestServiceEchoFloatArgs) GetReq() (v float64) {
	return p.Req
}
func (p *TestServiceEchoFloatArgs) SetReq(val float64) {
	p.Req = val
}

func (p *TestServiceEchoFloatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoFloatArgs(%+v)", *p)
}
func (p *TestServiceEchoFloatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoFloatResult struct {
	Success *float64 `thrift:"success,0,optional" frugal:"0,optional,double" json:"success,omitempty"`
}

func NewTestServiceEchoFloatResult() *TestServiceEchoFloatResult {
	return &TestServiceEchoFloatResult{}
}

func (p *TestServiceEchoFloatResult) InitDefault() {
	*p = TestServiceEchoFloatResult{}
}

var TestServiceEchoFloatResult_Success_DEFAULT float64

func (p *TestServiceEchoFloatResult) GetSuccess() (v float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoFloatResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoFloatResult) SetSuccess(x interface{}) {
	p.Success = x.(*float64)
}

func (p *TestServiceEchoFloatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoFloatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoFloatResult(%+v)", *p)
}
func (p *TestServiceEchoFloatResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoDoubleArgs struct {
	Req float64 `thrift:"req,1" frugal:"1,default,double" json:"req"`
}

func NewTestServiceEchoDoubleArgs() *TestServiceEchoDoubleArgs {
	return &TestServiceEchoDoubleArgs{}
}

func (p *TestServiceEchoDoubleArgs) InitDefault() {
	*p = TestServiceEchoDoubleArgs{}
}

func (p *TestServiceEchoDoubleArgs) GetReq() (v float64) {
	return p.Req
}
func (p *TestServiceEchoDoubleArgs) SetReq(val float64) {
	p.Req = val
}

func (p *TestServiceEchoDoubleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoDoubleArgs(%+v)", *p)
}
func (p *TestServiceEchoDoubleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoDoubleResult struct {
	Success *float64 `thrift:"success,0,optional" frugal:"0,optional,double" json:"success,omitempty"`
}

func NewTestServiceEchoDoubleResult() *TestServiceEchoDoubleResult {
	return &TestServiceEchoDoubleResult{}
}

func (p *TestServiceEchoDoubleResult) InitDefault() {
	*p = TestServiceEchoDoubleResult{}
}

var TestServiceEchoDoubleResult_Success_DEFAULT float64

func (p *TestServiceEchoDoubleResult) GetSuccess() (v float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoDoubleResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoDoubleResult) SetSuccess(x interface{}) {
	p.Success = x.(*float64)
}

func (p *TestServiceEchoDoubleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoDoubleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoDoubleResult(%+v)", *p)
}
func (p *TestServiceEchoDoubleResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoStringArgs struct {
	Req string `thrift:"req,1" frugal:"1,default,string" json:"req"`
}

func NewTestServiceEchoStringArgs() *TestServiceEchoStringArgs {
	return &TestServiceEchoStringArgs{}
}

func (p *TestServiceEchoStringArgs) InitDefault() {
	*p = TestServiceEchoStringArgs{}
}

func (p *TestServiceEchoStringArgs) GetReq() (v string) {
	return p.Req
}
func (p *TestServiceEchoStringArgs) SetReq(val string) {
	p.Req = val
}

func (p *TestServiceEchoStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoStringArgs(%+v)", *p)
}
func (p *TestServiceEchoStringArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoStringResult struct {
	Success *string `thrift:"success,0,optional" frugal:"0,optional,string" json:"success,omitempty"`
}

func NewTestServiceEchoStringResult() *TestServiceEchoStringResult {
	return &TestServiceEchoStringResult{}
}

func (p *TestServiceEchoStringResult) InitDefault() {
	*p = TestServiceEchoStringResult{}
}

var TestServiceEchoStringResult_Success_DEFAULT string

func (p *TestServiceEchoStringResult) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoStringResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoStringResult) SetSuccess(x interface{}) {
	p.Success = x.(*string)
}

func (p *TestServiceEchoStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoStringResult(%+v)", *p)
}
func (p *TestServiceEchoStringResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBinaryArgs struct {
	Req []byte `thrift:"req,1" frugal:"1,default,binary" json:"req"`
}

func NewTestServiceEchoBinaryArgs() *TestServiceEchoBinaryArgs {
	return &TestServiceEchoBinaryArgs{}
}

func (p *TestServiceEchoBinaryArgs) InitDefault() {
	*p = TestServiceEchoBinaryArgs{}
}

func (p *TestServiceEchoBinaryArgs) GetReq() (v []byte) {
	return p.Req
}
func (p *TestServiceEchoBinaryArgs) SetReq(val []byte) {
	p.Req = val
}

func (p *TestServiceEchoBinaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBinaryArgs(%+v)", *p)
}
func (p *TestServiceEchoBinaryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBinaryResult struct {
	Success []byte `thrift:"success,0,optional" frugal:"0,optional,binary" json:"success,omitempty"`
}

func NewTestServiceEchoBinaryResult() *TestServiceEchoBinaryResult {
	return &TestServiceEchoBinaryResult{}
}

func (p *TestServiceEchoBinaryResult) InitDefault() {
	*p = TestServiceEchoBinaryResult{}
}

var TestServiceEchoBinaryResult_Success_DEFAULT []byte

func (p *TestServiceEchoBinaryResult) GetSuccess() (v []byte) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBinaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBinaryResult) SetSuccess(x interface{}) {
	p.Success = x.([]byte)
}

func (p *TestServiceEchoBinaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBinaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBinaryResult(%+v)", *p)
}
func (p *TestServiceEchoBinaryResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoArgs struct {
	Req *EchoRequest `thrift:"req,1" frugal:"1,default,EchoRequest" json:"req"`
}

func NewTestServiceEchoArgs() *TestServiceEchoArgs {
	return &TestServiceEchoArgs{}
}

func (p *TestServiceEchoArgs) InitDefault() {
	*p = TestServiceEchoArgs{}
}

var TestServiceEchoArgs_Req_DEFAULT *EchoRequest

func (p *TestServiceEchoArgs) GetReq() (v *EchoRequest) {
	if !p.IsSetReq() {
		return TestServiceEchoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceEchoArgs) SetReq(val *EchoRequest) {
	p.Req = val
}

func (p *TestServiceEchoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoArgs(%+v)", *p)
}
func (p *TestServiceEchoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewTestServiceEchoResult() *TestServiceEchoResult {
	return &TestServiceEchoResult{}
}

func (p *TestServiceEchoResult) InitDefault() {
	*p = TestServiceEchoResult{}
}

var TestServiceEchoResult_Success_DEFAULT *EchoResponse

func (p *TestServiceEchoResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *TestServiceEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoResult(%+v)", *p)
}
func (p *TestServiceEchoResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBoolListArgs struct {
	Req []bool `thrift:"req,1" frugal:"1,default,list<bool>" json:"req"`
}

func NewTestServiceEchoBoolListArgs() *TestServiceEchoBoolListArgs {
	return &TestServiceEchoBoolListArgs{}
}

func (p *TestServiceEchoBoolListArgs) InitDefault() {
	*p = TestServiceEchoBoolListArgs{}
}

func (p *TestServiceEchoBoolListArgs) GetReq() (v []bool) {
	return p.Req
}
func (p *TestServiceEchoBoolListArgs) SetReq(val []bool) {
	p.Req = val
}

func (p *TestServiceEchoBoolListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBoolListArgs(%+v)", *p)
}
func (p *TestServiceEchoBoolListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBoolListResult struct {
	Success []bool `thrift:"success,0,optional" frugal:"0,optional,list<bool>" json:"success,omitempty"`
}

func NewTestServiceEchoBoolListResult() *TestServiceEchoBoolListResult {
	return &TestServiceEchoBoolListResult{}
}

func (p *TestServiceEchoBoolListResult) InitDefault() {
	*p = TestServiceEchoBoolListResult{}
}

var TestServiceEchoBoolListResult_Success_DEFAULT []bool

func (p *TestServiceEchoBoolListResult) GetSuccess() (v []bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBoolListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBoolListResult) SetSuccess(x interface{}) {
	p.Success = x.([]bool)
}

func (p *TestServiceEchoBoolListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBoolListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBoolListResult(%+v)", *p)
}
func (p *TestServiceEchoBoolListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoByteListArgs struct {
	Req []int8 `thrift:"req,1" frugal:"1,default,list<byte>" json:"req"`
}

func NewTestServiceEchoByteListArgs() *TestServiceEchoByteListArgs {
	return &TestServiceEchoByteListArgs{}
}

func (p *TestServiceEchoByteListArgs) InitDefault() {
	*p = TestServiceEchoByteListArgs{}
}

func (p *TestServiceEchoByteListArgs) GetReq() (v []int8) {
	return p.Req
}
func (p *TestServiceEchoByteListArgs) SetReq(val []int8) {
	p.Req = val
}

func (p *TestServiceEchoByteListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoByteListArgs(%+v)", *p)
}
func (p *TestServiceEchoByteListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoByteListResult struct {
	Success []int8 `thrift:"success,0,optional" frugal:"0,optional,list<byte>" json:"success,omitempty"`
}

func NewTestServiceEchoByteListResult() *TestServiceEchoByteListResult {
	return &TestServiceEchoByteListResult{}
}

func (p *TestServiceEchoByteListResult) InitDefault() {
	*p = TestServiceEchoByteListResult{}
}

var TestServiceEchoByteListResult_Success_DEFAULT []int8

func (p *TestServiceEchoByteListResult) GetSuccess() (v []int8) {
	if !p.IsSetSuccess() {
		return TestServiceEchoByteListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoByteListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int8)
}

func (p *TestServiceEchoByteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoByteListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoByteListResult(%+v)", *p)
}
func (p *TestServiceEchoByteListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoInt16ListArgs struct {
	Req []int16 `thrift:"req,1" frugal:"1,default,list<i16>" json:"req"`
}

func NewTestServiceEchoInt16ListArgs() *TestServiceEchoInt16ListArgs {
	return &TestServiceEchoInt16ListArgs{}
}

func (p *TestServiceEchoInt16ListArgs) InitDefault() {
	*p = TestServiceEchoInt16ListArgs{}
}

func (p *TestServiceEchoInt16ListArgs) GetReq() (v []int16) {
	return p.Req
}
func (p *TestServiceEchoInt16ListArgs) SetReq(val []int16) {
	p.Req = val
}

func (p *TestServiceEchoInt16ListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt16ListArgs(%+v)", *p)
}
func (p *TestServiceEchoInt16ListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoInt16ListResult struct {
	Success []int16 `thrift:"success,0,optional" frugal:"0,optional,list<i16>" json:"success,omitempty"`
}

func NewTestServiceEchoInt16ListResult() *TestServiceEchoInt16ListResult {
	return &TestServiceEchoInt16ListResult{}
}

func (p *TestServiceEchoInt16ListResult) InitDefault() {
	*p = TestServiceEchoInt16ListResult{}
}

var TestServiceEchoInt16ListResult_Success_DEFAULT []int16

func (p *TestServiceEchoInt16ListResult) GetSuccess() (v []int16) {
	if !p.IsSetSuccess() {
		return TestServiceEchoInt16ListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoInt16ListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int16)
}

func (p *TestServiceEchoInt16ListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoInt16ListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt16ListResult(%+v)", *p)
}
func (p *TestServiceEchoInt16ListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoInt32ListArgs struct {
	Req []int32 `thrift:"req,1" frugal:"1,default,list<i32>" json:"req"`
}

func NewTestServiceEchoInt32ListArgs() *TestServiceEchoInt32ListArgs {
	return &TestServiceEchoInt32ListArgs{}
}

func (p *TestServiceEchoInt32ListArgs) InitDefault() {
	*p = TestServiceEchoInt32ListArgs{}
}

func (p *TestServiceEchoInt32ListArgs) GetReq() (v []int32) {
	return p.Req
}
func (p *TestServiceEchoInt32ListArgs) SetReq(val []int32) {
	p.Req = val
}

func (p *TestServiceEchoInt32ListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt32ListArgs(%+v)", *p)
}
func (p *TestServiceEchoInt32ListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoInt32ListResult struct {
	Success []int32 `thrift:"success,0,optional" frugal:"0,optional,list<i32>" json:"success,omitempty"`
}

func NewTestServiceEchoInt32ListResult() *TestServiceEchoInt32ListResult {
	return &TestServiceEchoInt32ListResult{}
}

func (p *TestServiceEchoInt32ListResult) InitDefault() {
	*p = TestServiceEchoInt32ListResult{}
}

var TestServiceEchoInt32ListResult_Success_DEFAULT []int32

func (p *TestServiceEchoInt32ListResult) GetSuccess() (v []int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoInt32ListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoInt32ListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int32)
}

func (p *TestServiceEchoInt32ListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoInt32ListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt32ListResult(%+v)", *p)
}
func (p *TestServiceEchoInt32ListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoInt64ListArgs struct {
	Req []int64 `thrift:"req,1" frugal:"1,default,list<i64>" json:"req"`
}

func NewTestServiceEchoInt64ListArgs() *TestServiceEchoInt64ListArgs {
	return &TestServiceEchoInt64ListArgs{}
}

func (p *TestServiceEchoInt64ListArgs) InitDefault() {
	*p = TestServiceEchoInt64ListArgs{}
}

func (p *TestServiceEchoInt64ListArgs) GetReq() (v []int64) {
	return p.Req
}
func (p *TestServiceEchoInt64ListArgs) SetReq(val []int64) {
	p.Req = val
}

func (p *TestServiceEchoInt64ListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt64ListArgs(%+v)", *p)
}
func (p *TestServiceEchoInt64ListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoInt64ListResult struct {
	Success []int64 `thrift:"success,0,optional" frugal:"0,optional,list<i64>" json:"success,omitempty"`
}

func NewTestServiceEchoInt64ListResult() *TestServiceEchoInt64ListResult {
	return &TestServiceEchoInt64ListResult{}
}

func (p *TestServiceEchoInt64ListResult) InitDefault() {
	*p = TestServiceEchoInt64ListResult{}
}

var TestServiceEchoInt64ListResult_Success_DEFAULT []int64

func (p *TestServiceEchoInt64ListResult) GetSuccess() (v []int64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoInt64ListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoInt64ListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int64)
}

func (p *TestServiceEchoInt64ListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoInt64ListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoInt64ListResult(%+v)", *p)
}
func (p *TestServiceEchoInt64ListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoFloatListArgs struct {
	Req []float64 `thrift:"req,1" frugal:"1,default,list<double>" json:"req"`
}

func NewTestServiceEchoFloatListArgs() *TestServiceEchoFloatListArgs {
	return &TestServiceEchoFloatListArgs{}
}

func (p *TestServiceEchoFloatListArgs) InitDefault() {
	*p = TestServiceEchoFloatListArgs{}
}

func (p *TestServiceEchoFloatListArgs) GetReq() (v []float64) {
	return p.Req
}
func (p *TestServiceEchoFloatListArgs) SetReq(val []float64) {
	p.Req = val
}

func (p *TestServiceEchoFloatListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoFloatListArgs(%+v)", *p)
}
func (p *TestServiceEchoFloatListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoFloatListResult struct {
	Success []float64 `thrift:"success,0,optional" frugal:"0,optional,list<double>" json:"success,omitempty"`
}

func NewTestServiceEchoFloatListResult() *TestServiceEchoFloatListResult {
	return &TestServiceEchoFloatListResult{}
}

func (p *TestServiceEchoFloatListResult) InitDefault() {
	*p = TestServiceEchoFloatListResult{}
}

var TestServiceEchoFloatListResult_Success_DEFAULT []float64

func (p *TestServiceEchoFloatListResult) GetSuccess() (v []float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoFloatListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoFloatListResult) SetSuccess(x interface{}) {
	p.Success = x.([]float64)
}

func (p *TestServiceEchoFloatListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoFloatListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoFloatListResult(%+v)", *p)
}
func (p *TestServiceEchoFloatListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoDoubleListArgs struct {
	Req []float64 `thrift:"req,1" frugal:"1,default,list<double>" json:"req"`
}

func NewTestServiceEchoDoubleListArgs() *TestServiceEchoDoubleListArgs {
	return &TestServiceEchoDoubleListArgs{}
}

func (p *TestServiceEchoDoubleListArgs) InitDefault() {
	*p = TestServiceEchoDoubleListArgs{}
}

func (p *TestServiceEchoDoubleListArgs) GetReq() (v []float64) {
	return p.Req
}
func (p *TestServiceEchoDoubleListArgs) SetReq(val []float64) {
	p.Req = val
}

func (p *TestServiceEchoDoubleListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoDoubleListArgs(%+v)", *p)
}
func (p *TestServiceEchoDoubleListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoDoubleListResult struct {
	Success []float64 `thrift:"success,0,optional" frugal:"0,optional,list<double>" json:"success,omitempty"`
}

func NewTestServiceEchoDoubleListResult() *TestServiceEchoDoubleListResult {
	return &TestServiceEchoDoubleListResult{}
}

func (p *TestServiceEchoDoubleListResult) InitDefault() {
	*p = TestServiceEchoDoubleListResult{}
}

var TestServiceEchoDoubleListResult_Success_DEFAULT []float64

func (p *TestServiceEchoDoubleListResult) GetSuccess() (v []float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoDoubleListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoDoubleListResult) SetSuccess(x interface{}) {
	p.Success = x.([]float64)
}

func (p *TestServiceEchoDoubleListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoDoubleListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoDoubleListResult(%+v)", *p)
}
func (p *TestServiceEchoDoubleListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoStringListArgs struct {
	Req []string `thrift:"req,1" frugal:"1,default,list<string>" json:"req"`
}

func NewTestServiceEchoStringListArgs() *TestServiceEchoStringListArgs {
	return &TestServiceEchoStringListArgs{}
}

func (p *TestServiceEchoStringListArgs) InitDefault() {
	*p = TestServiceEchoStringListArgs{}
}

func (p *TestServiceEchoStringListArgs) GetReq() (v []string) {
	return p.Req
}
func (p *TestServiceEchoStringListArgs) SetReq(val []string) {
	p.Req = val
}

func (p *TestServiceEchoStringListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoStringListArgs(%+v)", *p)
}
func (p *TestServiceEchoStringListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoStringListResult struct {
	Success []string `thrift:"success,0,optional" frugal:"0,optional,list<string>" json:"success,omitempty"`
}

func NewTestServiceEchoStringListResult() *TestServiceEchoStringListResult {
	return &TestServiceEchoStringListResult{}
}

func (p *TestServiceEchoStringListResult) InitDefault() {
	*p = TestServiceEchoStringListResult{}
}

var TestServiceEchoStringListResult_Success_DEFAULT []string

func (p *TestServiceEchoStringListResult) GetSuccess() (v []string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoStringListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoStringListResult) SetSuccess(x interface{}) {
	p.Success = x.([]string)
}

func (p *TestServiceEchoStringListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoStringListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoStringListResult(%+v)", *p)
}
func (p *TestServiceEchoStringListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBinaryListArgs struct {
	Req [][]byte `thrift:"req,1" frugal:"1,default,list<binary>" json:"req"`
}

func NewTestServiceEchoBinaryListArgs() *TestServiceEchoBinaryListArgs {
	return &TestServiceEchoBinaryListArgs{}
}

func (p *TestServiceEchoBinaryListArgs) InitDefault() {
	*p = TestServiceEchoBinaryListArgs{}
}

func (p *TestServiceEchoBinaryListArgs) GetReq() (v [][]byte) {
	return p.Req
}
func (p *TestServiceEchoBinaryListArgs) SetReq(val [][]byte) {
	p.Req = val
}

func (p *TestServiceEchoBinaryListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBinaryListArgs(%+v)", *p)
}
func (p *TestServiceEchoBinaryListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBinaryListResult struct {
	Success [][]byte `thrift:"success,0,optional" frugal:"0,optional,list<binary>" json:"success,omitempty"`
}

func NewTestServiceEchoBinaryListResult() *TestServiceEchoBinaryListResult {
	return &TestServiceEchoBinaryListResult{}
}

func (p *TestServiceEchoBinaryListResult) InitDefault() {
	*p = TestServiceEchoBinaryListResult{}
}

var TestServiceEchoBinaryListResult_Success_DEFAULT [][]byte

func (p *TestServiceEchoBinaryListResult) GetSuccess() (v [][]byte) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBinaryListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBinaryListResult) SetSuccess(x interface{}) {
	p.Success = x.([][]byte)
}

func (p *TestServiceEchoBinaryListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBinaryListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBinaryListResult(%+v)", *p)
}
func (p *TestServiceEchoBinaryListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2BoolMapArgs struct {
	Req map[bool]bool `thrift:"req,1" frugal:"1,default,map<bool:bool>" json:"req"`
}

func NewTestServiceEchoBool2BoolMapArgs() *TestServiceEchoBool2BoolMapArgs {
	return &TestServiceEchoBool2BoolMapArgs{}
}

func (p *TestServiceEchoBool2BoolMapArgs) InitDefault() {
	*p = TestServiceEchoBool2BoolMapArgs{}
}

func (p *TestServiceEchoBool2BoolMapArgs) GetReq() (v map[bool]bool) {
	return p.Req
}
func (p *TestServiceEchoBool2BoolMapArgs) SetReq(val map[bool]bool) {
	p.Req = val
}

func (p *TestServiceEchoBool2BoolMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BoolMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2BoolMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2BoolMapResult struct {
	Success map[bool]bool `thrift:"success,0,optional" frugal:"0,optional,map<bool:bool>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2BoolMapResult() *TestServiceEchoBool2BoolMapResult {
	return &TestServiceEchoBool2BoolMapResult{}
}

func (p *TestServiceEchoBool2BoolMapResult) InitDefault() {
	*p = TestServiceEchoBool2BoolMapResult{}
}

var TestServiceEchoBool2BoolMapResult_Success_DEFAULT map[bool]bool

func (p *TestServiceEchoBool2BoolMapResult) GetSuccess() (v map[bool]bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2BoolMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2BoolMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]bool)
}

func (p *TestServiceEchoBool2BoolMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2BoolMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BoolMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2BoolMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2ByteMapArgs struct {
	Req map[bool]int8 `thrift:"req,1" frugal:"1,default,map<bool:byte>" json:"req"`
}

func NewTestServiceEchoBool2ByteMapArgs() *TestServiceEchoBool2ByteMapArgs {
	return &TestServiceEchoBool2ByteMapArgs{}
}

func (p *TestServiceEchoBool2ByteMapArgs) InitDefault() {
	*p = TestServiceEchoBool2ByteMapArgs{}
}

func (p *TestServiceEchoBool2ByteMapArgs) GetReq() (v map[bool]int8) {
	return p.Req
}
func (p *TestServiceEchoBool2ByteMapArgs) SetReq(val map[bool]int8) {
	p.Req = val
}

func (p *TestServiceEchoBool2ByteMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2ByteMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2ByteMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2ByteMapResult struct {
	Success map[bool]int8 `thrift:"success,0,optional" frugal:"0,optional,map<bool:byte>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2ByteMapResult() *TestServiceEchoBool2ByteMapResult {
	return &TestServiceEchoBool2ByteMapResult{}
}

func (p *TestServiceEchoBool2ByteMapResult) InitDefault() {
	*p = TestServiceEchoBool2ByteMapResult{}
}

var TestServiceEchoBool2ByteMapResult_Success_DEFAULT map[bool]int8

func (p *TestServiceEchoBool2ByteMapResult) GetSuccess() (v map[bool]int8) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2ByteMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2ByteMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]int8)
}

func (p *TestServiceEchoBool2ByteMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2ByteMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2ByteMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2ByteMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2Int16MapArgs struct {
	Req map[bool]int16 `thrift:"req,1" frugal:"1,default,map<bool:i16>" json:"req"`
}

func NewTestServiceEchoBool2Int16MapArgs() *TestServiceEchoBool2Int16MapArgs {
	return &TestServiceEchoBool2Int16MapArgs{}
}

func (p *TestServiceEchoBool2Int16MapArgs) InitDefault() {
	*p = TestServiceEchoBool2Int16MapArgs{}
}

func (p *TestServiceEchoBool2Int16MapArgs) GetReq() (v map[bool]int16) {
	return p.Req
}
func (p *TestServiceEchoBool2Int16MapArgs) SetReq(val map[bool]int16) {
	p.Req = val
}

func (p *TestServiceEchoBool2Int16MapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int16MapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2Int16MapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2Int16MapResult struct {
	Success map[bool]int16 `thrift:"success,0,optional" frugal:"0,optional,map<bool:i16>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2Int16MapResult() *TestServiceEchoBool2Int16MapResult {
	return &TestServiceEchoBool2Int16MapResult{}
}

func (p *TestServiceEchoBool2Int16MapResult) InitDefault() {
	*p = TestServiceEchoBool2Int16MapResult{}
}

var TestServiceEchoBool2Int16MapResult_Success_DEFAULT map[bool]int16

func (p *TestServiceEchoBool2Int16MapResult) GetSuccess() (v map[bool]int16) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2Int16MapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2Int16MapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]int16)
}

func (p *TestServiceEchoBool2Int16MapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2Int16MapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int16MapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2Int16MapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2Int32MapArgs struct {
	Req map[bool]int32 `thrift:"req,1" frugal:"1,default,map<bool:i32>" json:"req"`
}

func NewTestServiceEchoBool2Int32MapArgs() *TestServiceEchoBool2Int32MapArgs {
	return &TestServiceEchoBool2Int32MapArgs{}
}

func (p *TestServiceEchoBool2Int32MapArgs) InitDefault() {
	*p = TestServiceEchoBool2Int32MapArgs{}
}

func (p *TestServiceEchoBool2Int32MapArgs) GetReq() (v map[bool]int32) {
	return p.Req
}
func (p *TestServiceEchoBool2Int32MapArgs) SetReq(val map[bool]int32) {
	p.Req = val
}

func (p *TestServiceEchoBool2Int32MapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int32MapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2Int32MapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2Int32MapResult struct {
	Success map[bool]int32 `thrift:"success,0,optional" frugal:"0,optional,map<bool:i32>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2Int32MapResult() *TestServiceEchoBool2Int32MapResult {
	return &TestServiceEchoBool2Int32MapResult{}
}

func (p *TestServiceEchoBool2Int32MapResult) InitDefault() {
	*p = TestServiceEchoBool2Int32MapResult{}
}

var TestServiceEchoBool2Int32MapResult_Success_DEFAULT map[bool]int32

func (p *TestServiceEchoBool2Int32MapResult) GetSuccess() (v map[bool]int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2Int32MapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2Int32MapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]int32)
}

func (p *TestServiceEchoBool2Int32MapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2Int32MapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int32MapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2Int32MapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2Int64MapArgs struct {
	Req map[bool]int64 `thrift:"req,1" frugal:"1,default,map<bool:i64>" json:"req"`
}

func NewTestServiceEchoBool2Int64MapArgs() *TestServiceEchoBool2Int64MapArgs {
	return &TestServiceEchoBool2Int64MapArgs{}
}

func (p *TestServiceEchoBool2Int64MapArgs) InitDefault() {
	*p = TestServiceEchoBool2Int64MapArgs{}
}

func (p *TestServiceEchoBool2Int64MapArgs) GetReq() (v map[bool]int64) {
	return p.Req
}
func (p *TestServiceEchoBool2Int64MapArgs) SetReq(val map[bool]int64) {
	p.Req = val
}

func (p *TestServiceEchoBool2Int64MapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int64MapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2Int64MapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2Int64MapResult struct {
	Success map[bool]int64 `thrift:"success,0,optional" frugal:"0,optional,map<bool:i64>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2Int64MapResult() *TestServiceEchoBool2Int64MapResult {
	return &TestServiceEchoBool2Int64MapResult{}
}

func (p *TestServiceEchoBool2Int64MapResult) InitDefault() {
	*p = TestServiceEchoBool2Int64MapResult{}
}

var TestServiceEchoBool2Int64MapResult_Success_DEFAULT map[bool]int64

func (p *TestServiceEchoBool2Int64MapResult) GetSuccess() (v map[bool]int64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2Int64MapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2Int64MapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]int64)
}

func (p *TestServiceEchoBool2Int64MapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2Int64MapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int64MapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2Int64MapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2FloatMapArgs struct {
	Req map[bool]float64 `thrift:"req,1" frugal:"1,default,map<bool:double>" json:"req"`
}

func NewTestServiceEchoBool2FloatMapArgs() *TestServiceEchoBool2FloatMapArgs {
	return &TestServiceEchoBool2FloatMapArgs{}
}

func (p *TestServiceEchoBool2FloatMapArgs) InitDefault() {
	*p = TestServiceEchoBool2FloatMapArgs{}
}

func (p *TestServiceEchoBool2FloatMapArgs) GetReq() (v map[bool]float64) {
	return p.Req
}
func (p *TestServiceEchoBool2FloatMapArgs) SetReq(val map[bool]float64) {
	p.Req = val
}

func (p *TestServiceEchoBool2FloatMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2FloatMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2FloatMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2FloatMapResult struct {
	Success map[bool]float64 `thrift:"success,0,optional" frugal:"0,optional,map<bool:double>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2FloatMapResult() *TestServiceEchoBool2FloatMapResult {
	return &TestServiceEchoBool2FloatMapResult{}
}

func (p *TestServiceEchoBool2FloatMapResult) InitDefault() {
	*p = TestServiceEchoBool2FloatMapResult{}
}

var TestServiceEchoBool2FloatMapResult_Success_DEFAULT map[bool]float64

func (p *TestServiceEchoBool2FloatMapResult) GetSuccess() (v map[bool]float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2FloatMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2FloatMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]float64)
}

func (p *TestServiceEchoBool2FloatMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2FloatMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2FloatMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2FloatMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2DoubleMapArgs struct {
	Req map[bool]float64 `thrift:"req,1" frugal:"1,default,map<bool:double>" json:"req"`
}

func NewTestServiceEchoBool2DoubleMapArgs() *TestServiceEchoBool2DoubleMapArgs {
	return &TestServiceEchoBool2DoubleMapArgs{}
}

func (p *TestServiceEchoBool2DoubleMapArgs) InitDefault() {
	*p = TestServiceEchoBool2DoubleMapArgs{}
}

func (p *TestServiceEchoBool2DoubleMapArgs) GetReq() (v map[bool]float64) {
	return p.Req
}
func (p *TestServiceEchoBool2DoubleMapArgs) SetReq(val map[bool]float64) {
	p.Req = val
}

func (p *TestServiceEchoBool2DoubleMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2DoubleMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2DoubleMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2DoubleMapResult struct {
	Success map[bool]float64 `thrift:"success,0,optional" frugal:"0,optional,map<bool:double>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2DoubleMapResult() *TestServiceEchoBool2DoubleMapResult {
	return &TestServiceEchoBool2DoubleMapResult{}
}

func (p *TestServiceEchoBool2DoubleMapResult) InitDefault() {
	*p = TestServiceEchoBool2DoubleMapResult{}
}

var TestServiceEchoBool2DoubleMapResult_Success_DEFAULT map[bool]float64

func (p *TestServiceEchoBool2DoubleMapResult) GetSuccess() (v map[bool]float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2DoubleMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2DoubleMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]float64)
}

func (p *TestServiceEchoBool2DoubleMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2DoubleMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2DoubleMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2DoubleMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2StringMapArgs struct {
	Req map[bool]string `thrift:"req,1" frugal:"1,default,map<bool:string>" json:"req"`
}

func NewTestServiceEchoBool2StringMapArgs() *TestServiceEchoBool2StringMapArgs {
	return &TestServiceEchoBool2StringMapArgs{}
}

func (p *TestServiceEchoBool2StringMapArgs) InitDefault() {
	*p = TestServiceEchoBool2StringMapArgs{}
}

func (p *TestServiceEchoBool2StringMapArgs) GetReq() (v map[bool]string) {
	return p.Req
}
func (p *TestServiceEchoBool2StringMapArgs) SetReq(val map[bool]string) {
	p.Req = val
}

func (p *TestServiceEchoBool2StringMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2StringMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2StringMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2StringMapResult struct {
	Success map[bool]string `thrift:"success,0,optional" frugal:"0,optional,map<bool:string>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2StringMapResult() *TestServiceEchoBool2StringMapResult {
	return &TestServiceEchoBool2StringMapResult{}
}

func (p *TestServiceEchoBool2StringMapResult) InitDefault() {
	*p = TestServiceEchoBool2StringMapResult{}
}

var TestServiceEchoBool2StringMapResult_Success_DEFAULT map[bool]string

func (p *TestServiceEchoBool2StringMapResult) GetSuccess() (v map[bool]string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2StringMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2StringMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]string)
}

func (p *TestServiceEchoBool2StringMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2StringMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2StringMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2StringMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2BinaryMapArgs struct {
	Req map[bool][]byte `thrift:"req,1" frugal:"1,default,map<bool:binary>" json:"req"`
}

func NewTestServiceEchoBool2BinaryMapArgs() *TestServiceEchoBool2BinaryMapArgs {
	return &TestServiceEchoBool2BinaryMapArgs{}
}

func (p *TestServiceEchoBool2BinaryMapArgs) InitDefault() {
	*p = TestServiceEchoBool2BinaryMapArgs{}
}

func (p *TestServiceEchoBool2BinaryMapArgs) GetReq() (v map[bool][]byte) {
	return p.Req
}
func (p *TestServiceEchoBool2BinaryMapArgs) SetReq(val map[bool][]byte) {
	p.Req = val
}

func (p *TestServiceEchoBool2BinaryMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BinaryMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2BinaryMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2BinaryMapResult struct {
	Success map[bool][]byte `thrift:"success,0,optional" frugal:"0,optional,map<bool:binary>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2BinaryMapResult() *TestServiceEchoBool2BinaryMapResult {
	return &TestServiceEchoBool2BinaryMapResult{}
}

func (p *TestServiceEchoBool2BinaryMapResult) InitDefault() {
	*p = TestServiceEchoBool2BinaryMapResult{}
}

var TestServiceEchoBool2BinaryMapResult_Success_DEFAULT map[bool][]byte

func (p *TestServiceEchoBool2BinaryMapResult) GetSuccess() (v map[bool][]byte) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2BinaryMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2BinaryMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][]byte)
}

func (p *TestServiceEchoBool2BinaryMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2BinaryMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BinaryMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2BinaryMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2BoolListMapArgs struct {
	Req map[bool][]bool `thrift:"req,1" frugal:"1,default,map<bool:list<bool>>" json:"req"`
}

func NewTestServiceEchoBool2BoolListMapArgs() *TestServiceEchoBool2BoolListMapArgs {
	return &TestServiceEchoBool2BoolListMapArgs{}
}

func (p *TestServiceEchoBool2BoolListMapArgs) InitDefault() {
	*p = TestServiceEchoBool2BoolListMapArgs{}
}

func (p *TestServiceEchoBool2BoolListMapArgs) GetReq() (v map[bool][]bool) {
	return p.Req
}
func (p *TestServiceEchoBool2BoolListMapArgs) SetReq(val map[bool][]bool) {
	p.Req = val
}

func (p *TestServiceEchoBool2BoolListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BoolListMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2BoolListMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2BoolListMapResult struct {
	Success map[bool][]bool `thrift:"success,0,optional" frugal:"0,optional,map<bool:list<bool>>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2BoolListMapResult() *TestServiceEchoBool2BoolListMapResult {
	return &TestServiceEchoBool2BoolListMapResult{}
}

func (p *TestServiceEchoBool2BoolListMapResult) InitDefault() {
	*p = TestServiceEchoBool2BoolListMapResult{}
}

var TestServiceEchoBool2BoolListMapResult_Success_DEFAULT map[bool][]bool

func (p *TestServiceEchoBool2BoolListMapResult) GetSuccess() (v map[bool][]bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2BoolListMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2BoolListMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][]bool)
}

func (p *TestServiceEchoBool2BoolListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2BoolListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BoolListMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2BoolListMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2ByteListMapArgs struct {
	Req map[bool][]int8 `thrift:"req,1" frugal:"1,default,map<bool:list<byte>>" json:"req"`
}

func NewTestServiceEchoBool2ByteListMapArgs() *TestServiceEchoBool2ByteListMapArgs {
	return &TestServiceEchoBool2ByteListMapArgs{}
}

func (p *TestServiceEchoBool2ByteListMapArgs) InitDefault() {
	*p = TestServiceEchoBool2ByteListMapArgs{}
}

func (p *TestServiceEchoBool2ByteListMapArgs) GetReq() (v map[bool][]int8) {
	return p.Req
}
func (p *TestServiceEchoBool2ByteListMapArgs) SetReq(val map[bool][]int8) {
	p.Req = val
}

func (p *TestServiceEchoBool2ByteListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2ByteListMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2ByteListMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2ByteListMapResult struct {
	Success map[bool][]int8 `thrift:"success,0,optional" frugal:"0,optional,map<bool:list<byte>>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2ByteListMapResult() *TestServiceEchoBool2ByteListMapResult {
	return &TestServiceEchoBool2ByteListMapResult{}
}

func (p *TestServiceEchoBool2ByteListMapResult) InitDefault() {
	*p = TestServiceEchoBool2ByteListMapResult{}
}

var TestServiceEchoBool2ByteListMapResult_Success_DEFAULT map[bool][]int8

func (p *TestServiceEchoBool2ByteListMapResult) GetSuccess() (v map[bool][]int8) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2ByteListMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2ByteListMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][]int8)
}

func (p *TestServiceEchoBool2ByteListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2ByteListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2ByteListMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2ByteListMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2Int16ListMapArgs struct {
	Req map[bool][]int16 `thrift:"req,1" frugal:"1,default,map<bool:list<i16>>" json:"req"`
}

func NewTestServiceEchoBool2Int16ListMapArgs() *TestServiceEchoBool2Int16ListMapArgs {
	return &TestServiceEchoBool2Int16ListMapArgs{}
}

func (p *TestServiceEchoBool2Int16ListMapArgs) InitDefault() {
	*p = TestServiceEchoBool2Int16ListMapArgs{}
}

func (p *TestServiceEchoBool2Int16ListMapArgs) GetReq() (v map[bool][]int16) {
	return p.Req
}
func (p *TestServiceEchoBool2Int16ListMapArgs) SetReq(val map[bool][]int16) {
	p.Req = val
}

func (p *TestServiceEchoBool2Int16ListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int16ListMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2Int16ListMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2Int16ListMapResult struct {
	Success map[bool][]int16 `thrift:"success,0,optional" frugal:"0,optional,map<bool:list<i16>>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2Int16ListMapResult() *TestServiceEchoBool2Int16ListMapResult {
	return &TestServiceEchoBool2Int16ListMapResult{}
}

func (p *TestServiceEchoBool2Int16ListMapResult) InitDefault() {
	*p = TestServiceEchoBool2Int16ListMapResult{}
}

var TestServiceEchoBool2Int16ListMapResult_Success_DEFAULT map[bool][]int16

func (p *TestServiceEchoBool2Int16ListMapResult) GetSuccess() (v map[bool][]int16) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2Int16ListMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2Int16ListMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][]int16)
}

func (p *TestServiceEchoBool2Int16ListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2Int16ListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int16ListMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2Int16ListMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2Int32ListMapArgs struct {
	Req map[bool][]int32 `thrift:"req,1" frugal:"1,default,map<bool:list<i32>>" json:"req"`
}

func NewTestServiceEchoBool2Int32ListMapArgs() *TestServiceEchoBool2Int32ListMapArgs {
	return &TestServiceEchoBool2Int32ListMapArgs{}
}

func (p *TestServiceEchoBool2Int32ListMapArgs) InitDefault() {
	*p = TestServiceEchoBool2Int32ListMapArgs{}
}

func (p *TestServiceEchoBool2Int32ListMapArgs) GetReq() (v map[bool][]int32) {
	return p.Req
}
func (p *TestServiceEchoBool2Int32ListMapArgs) SetReq(val map[bool][]int32) {
	p.Req = val
}

func (p *TestServiceEchoBool2Int32ListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int32ListMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2Int32ListMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2Int32ListMapResult struct {
	Success map[bool][]int32 `thrift:"success,0,optional" frugal:"0,optional,map<bool:list<i32>>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2Int32ListMapResult() *TestServiceEchoBool2Int32ListMapResult {
	return &TestServiceEchoBool2Int32ListMapResult{}
}

func (p *TestServiceEchoBool2Int32ListMapResult) InitDefault() {
	*p = TestServiceEchoBool2Int32ListMapResult{}
}

var TestServiceEchoBool2Int32ListMapResult_Success_DEFAULT map[bool][]int32

func (p *TestServiceEchoBool2Int32ListMapResult) GetSuccess() (v map[bool][]int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2Int32ListMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2Int32ListMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][]int32)
}

func (p *TestServiceEchoBool2Int32ListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2Int32ListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int32ListMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2Int32ListMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2Int64ListMapArgs struct {
	Req map[bool][]int64 `thrift:"req,1" frugal:"1,default,map<bool:list<i64>>" json:"req"`
}

func NewTestServiceEchoBool2Int64ListMapArgs() *TestServiceEchoBool2Int64ListMapArgs {
	return &TestServiceEchoBool2Int64ListMapArgs{}
}

func (p *TestServiceEchoBool2Int64ListMapArgs) InitDefault() {
	*p = TestServiceEchoBool2Int64ListMapArgs{}
}

func (p *TestServiceEchoBool2Int64ListMapArgs) GetReq() (v map[bool][]int64) {
	return p.Req
}
func (p *TestServiceEchoBool2Int64ListMapArgs) SetReq(val map[bool][]int64) {
	p.Req = val
}

func (p *TestServiceEchoBool2Int64ListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int64ListMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2Int64ListMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2Int64ListMapResult struct {
	Success map[bool][]int64 `thrift:"success,0,optional" frugal:"0,optional,map<bool:list<i64>>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2Int64ListMapResult() *TestServiceEchoBool2Int64ListMapResult {
	return &TestServiceEchoBool2Int64ListMapResult{}
}

func (p *TestServiceEchoBool2Int64ListMapResult) InitDefault() {
	*p = TestServiceEchoBool2Int64ListMapResult{}
}

var TestServiceEchoBool2Int64ListMapResult_Success_DEFAULT map[bool][]int64

func (p *TestServiceEchoBool2Int64ListMapResult) GetSuccess() (v map[bool][]int64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2Int64ListMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2Int64ListMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][]int64)
}

func (p *TestServiceEchoBool2Int64ListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2Int64ListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int64ListMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2Int64ListMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2FloatListMapArgs struct {
	Req map[bool][]float64 `thrift:"req,1" frugal:"1,default,map<bool:list<double>>" json:"req"`
}

func NewTestServiceEchoBool2FloatListMapArgs() *TestServiceEchoBool2FloatListMapArgs {
	return &TestServiceEchoBool2FloatListMapArgs{}
}

func (p *TestServiceEchoBool2FloatListMapArgs) InitDefault() {
	*p = TestServiceEchoBool2FloatListMapArgs{}
}

func (p *TestServiceEchoBool2FloatListMapArgs) GetReq() (v map[bool][]float64) {
	return p.Req
}
func (p *TestServiceEchoBool2FloatListMapArgs) SetReq(val map[bool][]float64) {
	p.Req = val
}

func (p *TestServiceEchoBool2FloatListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2FloatListMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2FloatListMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2FloatListMapResult struct {
	Success map[bool][]float64 `thrift:"success,0,optional" frugal:"0,optional,map<bool:list<double>>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2FloatListMapResult() *TestServiceEchoBool2FloatListMapResult {
	return &TestServiceEchoBool2FloatListMapResult{}
}

func (p *TestServiceEchoBool2FloatListMapResult) InitDefault() {
	*p = TestServiceEchoBool2FloatListMapResult{}
}

var TestServiceEchoBool2FloatListMapResult_Success_DEFAULT map[bool][]float64

func (p *TestServiceEchoBool2FloatListMapResult) GetSuccess() (v map[bool][]float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2FloatListMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2FloatListMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][]float64)
}

func (p *TestServiceEchoBool2FloatListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2FloatListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2FloatListMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2FloatListMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2DoubleListMapArgs struct {
	Req map[bool][]float64 `thrift:"req,1" frugal:"1,default,map<bool:list<double>>" json:"req"`
}

func NewTestServiceEchoBool2DoubleListMapArgs() *TestServiceEchoBool2DoubleListMapArgs {
	return &TestServiceEchoBool2DoubleListMapArgs{}
}

func (p *TestServiceEchoBool2DoubleListMapArgs) InitDefault() {
	*p = TestServiceEchoBool2DoubleListMapArgs{}
}

func (p *TestServiceEchoBool2DoubleListMapArgs) GetReq() (v map[bool][]float64) {
	return p.Req
}
func (p *TestServiceEchoBool2DoubleListMapArgs) SetReq(val map[bool][]float64) {
	p.Req = val
}

func (p *TestServiceEchoBool2DoubleListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2DoubleListMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2DoubleListMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2DoubleListMapResult struct {
	Success map[bool][]float64 `thrift:"success,0,optional" frugal:"0,optional,map<bool:list<double>>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2DoubleListMapResult() *TestServiceEchoBool2DoubleListMapResult {
	return &TestServiceEchoBool2DoubleListMapResult{}
}

func (p *TestServiceEchoBool2DoubleListMapResult) InitDefault() {
	*p = TestServiceEchoBool2DoubleListMapResult{}
}

var TestServiceEchoBool2DoubleListMapResult_Success_DEFAULT map[bool][]float64

func (p *TestServiceEchoBool2DoubleListMapResult) GetSuccess() (v map[bool][]float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2DoubleListMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2DoubleListMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][]float64)
}

func (p *TestServiceEchoBool2DoubleListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2DoubleListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2DoubleListMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2DoubleListMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2StringListMapArgs struct {
	Req map[bool][]string `thrift:"req,1" frugal:"1,default,map<bool:list<string>>" json:"req"`
}

func NewTestServiceEchoBool2StringListMapArgs() *TestServiceEchoBool2StringListMapArgs {
	return &TestServiceEchoBool2StringListMapArgs{}
}

func (p *TestServiceEchoBool2StringListMapArgs) InitDefault() {
	*p = TestServiceEchoBool2StringListMapArgs{}
}

func (p *TestServiceEchoBool2StringListMapArgs) GetReq() (v map[bool][]string) {
	return p.Req
}
func (p *TestServiceEchoBool2StringListMapArgs) SetReq(val map[bool][]string) {
	p.Req = val
}

func (p *TestServiceEchoBool2StringListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2StringListMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2StringListMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2StringListMapResult struct {
	Success map[bool][]string `thrift:"success,0,optional" frugal:"0,optional,map<bool:list<string>>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2StringListMapResult() *TestServiceEchoBool2StringListMapResult {
	return &TestServiceEchoBool2StringListMapResult{}
}

func (p *TestServiceEchoBool2StringListMapResult) InitDefault() {
	*p = TestServiceEchoBool2StringListMapResult{}
}

var TestServiceEchoBool2StringListMapResult_Success_DEFAULT map[bool][]string

func (p *TestServiceEchoBool2StringListMapResult) GetSuccess() (v map[bool][]string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2StringListMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2StringListMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][]string)
}

func (p *TestServiceEchoBool2StringListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2StringListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2StringListMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2StringListMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2BinaryListMapArgs struct {
	Req map[bool][][]byte `thrift:"req,1" frugal:"1,default,map<bool:list<binary>>" json:"req"`
}

func NewTestServiceEchoBool2BinaryListMapArgs() *TestServiceEchoBool2BinaryListMapArgs {
	return &TestServiceEchoBool2BinaryListMapArgs{}
}

func (p *TestServiceEchoBool2BinaryListMapArgs) InitDefault() {
	*p = TestServiceEchoBool2BinaryListMapArgs{}
}

func (p *TestServiceEchoBool2BinaryListMapArgs) GetReq() (v map[bool][][]byte) {
	return p.Req
}
func (p *TestServiceEchoBool2BinaryListMapArgs) SetReq(val map[bool][][]byte) {
	p.Req = val
}

func (p *TestServiceEchoBool2BinaryListMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BinaryListMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2BinaryListMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2BinaryListMapResult struct {
	Success map[bool][][]byte `thrift:"success,0,optional" frugal:"0,optional,map<bool:list<binary>>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2BinaryListMapResult() *TestServiceEchoBool2BinaryListMapResult {
	return &TestServiceEchoBool2BinaryListMapResult{}
}

func (p *TestServiceEchoBool2BinaryListMapResult) InitDefault() {
	*p = TestServiceEchoBool2BinaryListMapResult{}
}

var TestServiceEchoBool2BinaryListMapResult_Success_DEFAULT map[bool][][]byte

func (p *TestServiceEchoBool2BinaryListMapResult) GetSuccess() (v map[bool][][]byte) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2BinaryListMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2BinaryListMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool][][]byte)
}

func (p *TestServiceEchoBool2BinaryListMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2BinaryListMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BinaryListMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2BinaryListMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiBoolArgs struct {
	BaseReq bool          `thrift:"baseReq,1" frugal:"1,default,bool" json:"baseReq"`
	ListReq []bool        `thrift:"listReq,2" frugal:"2,default,list<bool>" json:"listReq"`
	MapReq  map[bool]bool `thrift:"mapReq,3" frugal:"3,default,map<bool:bool>" json:"mapReq"`
}

func NewTestServiceEchoMultiBoolArgs() *TestServiceEchoMultiBoolArgs {
	return &TestServiceEchoMultiBoolArgs{}
}

func (p *TestServiceEchoMultiBoolArgs) InitDefault() {
	*p = TestServiceEchoMultiBoolArgs{}
}

func (p *TestServiceEchoMultiBoolArgs) GetBaseReq() (v bool) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiBoolArgs) GetListReq() (v []bool) {
	return p.ListReq
}

func (p *TestServiceEchoMultiBoolArgs) GetMapReq() (v map[bool]bool) {
	return p.MapReq
}
func (p *TestServiceEchoMultiBoolArgs) SetBaseReq(val bool) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiBoolArgs) SetListReq(val []bool) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiBoolArgs) SetMapReq(val map[bool]bool) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiBoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBoolArgs(%+v)", *p)
}
func (p *TestServiceEchoMultiBoolArgs) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiBoolResult struct {
	Success *EchoMultiBoolResponse `thrift:"success,0,optional" frugal:"0,optional,EchoMultiBoolResponse" json:"success,omitempty"`
}

func NewTestServiceEchoMultiBoolResult() *TestServiceEchoMultiBoolResult {
	return &TestServiceEchoMultiBoolResult{}
}

func (p *TestServiceEchoMultiBoolResult) InitDefault() {
	*p = TestServiceEchoMultiBoolResult{}
}

var TestServiceEchoMultiBoolResult_Success_DEFAULT *EchoMultiBoolResponse

func (p *TestServiceEchoMultiBoolResult) GetSuccess() (v *EchoMultiBoolResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiBoolResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiBoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiBoolResponse)
}

func (p *TestServiceEchoMultiBoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiBoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBoolResult(%+v)", *p)
}
func (p *TestServiceEchoMultiBoolResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiByteArgs struct {
	BaseReq int8          `thrift:"baseReq,1" frugal:"1,default,byte" json:"baseReq"`
	ListReq []int8        `thrift:"listReq,2" frugal:"2,default,list<byte>" json:"listReq"`
	MapReq  map[int8]int8 `thrift:"mapReq,3" frugal:"3,default,map<byte:byte>" json:"mapReq"`
}

func NewTestServiceEchoMultiByteArgs() *TestServiceEchoMultiByteArgs {
	return &TestServiceEchoMultiByteArgs{}
}

func (p *TestServiceEchoMultiByteArgs) InitDefault() {
	*p = TestServiceEchoMultiByteArgs{}
}

func (p *TestServiceEchoMultiByteArgs) GetBaseReq() (v int8) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiByteArgs) GetListReq() (v []int8) {
	return p.ListReq
}

func (p *TestServiceEchoMultiByteArgs) GetMapReq() (v map[int8]int8) {
	return p.MapReq
}
func (p *TestServiceEchoMultiByteArgs) SetBaseReq(val int8) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiByteArgs) SetListReq(val []int8) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiByteArgs) SetMapReq(val map[int8]int8) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiByteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiByteArgs(%+v)", *p)
}
func (p *TestServiceEchoMultiByteArgs) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiByteResult struct {
	Success *EchoMultiByteResponse `thrift:"success,0,optional" frugal:"0,optional,EchoMultiByteResponse" json:"success,omitempty"`
}

func NewTestServiceEchoMultiByteResult() *TestServiceEchoMultiByteResult {
	return &TestServiceEchoMultiByteResult{}
}

func (p *TestServiceEchoMultiByteResult) InitDefault() {
	*p = TestServiceEchoMultiByteResult{}
}

var TestServiceEchoMultiByteResult_Success_DEFAULT *EchoMultiByteResponse

func (p *TestServiceEchoMultiByteResult) GetSuccess() (v *EchoMultiByteResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiByteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiByteResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiByteResponse)
}

func (p *TestServiceEchoMultiByteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiByteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiByteResult(%+v)", *p)
}
func (p *TestServiceEchoMultiByteResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiInt16Args struct {
	BaseReq int16           `thrift:"baseReq,1" frugal:"1,default,i16" json:"baseReq"`
	ListReq []int16         `thrift:"listReq,2" frugal:"2,default,list<i16>" json:"listReq"`
	MapReq  map[int16]int16 `thrift:"mapReq,3" frugal:"3,default,map<i16:i16>" json:"mapReq"`
}

func NewTestServiceEchoMultiInt16Args() *TestServiceEchoMultiInt16Args {
	return &TestServiceEchoMultiInt16Args{}
}

func (p *TestServiceEchoMultiInt16Args) InitDefault() {
	*p = TestServiceEchoMultiInt16Args{}
}

func (p *TestServiceEchoMultiInt16Args) GetBaseReq() (v int16) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiInt16Args) GetListReq() (v []int16) {
	return p.ListReq
}

func (p *TestServiceEchoMultiInt16Args) GetMapReq() (v map[int16]int16) {
	return p.MapReq
}
func (p *TestServiceEchoMultiInt16Args) SetBaseReq(val int16) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiInt16Args) SetListReq(val []int16) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiInt16Args) SetMapReq(val map[int16]int16) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiInt16Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiInt16Args(%+v)", *p)
}
func (p *TestServiceEchoMultiInt16Args) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiInt16Result struct {
	Success *EchoMultiInt16Response `thrift:"success,0,optional" frugal:"0,optional,EchoMultiInt16Response" json:"success,omitempty"`
}

func NewTestServiceEchoMultiInt16Result() *TestServiceEchoMultiInt16Result {
	return &TestServiceEchoMultiInt16Result{}
}

func (p *TestServiceEchoMultiInt16Result) InitDefault() {
	*p = TestServiceEchoMultiInt16Result{}
}

var TestServiceEchoMultiInt16Result_Success_DEFAULT *EchoMultiInt16Response

func (p *TestServiceEchoMultiInt16Result) GetSuccess() (v *EchoMultiInt16Response) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiInt16Result_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiInt16Result) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiInt16Response)
}

func (p *TestServiceEchoMultiInt16Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiInt16Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiInt16Result(%+v)", *p)
}
func (p *TestServiceEchoMultiInt16Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiInt32Args struct {
	BaseReq int32           `thrift:"baseReq,1" frugal:"1,default,i32" json:"baseReq"`
	ListReq []int32         `thrift:"listReq,2" frugal:"2,default,list<i32>" json:"listReq"`
	MapReq  map[int32]int32 `thrift:"mapReq,3" frugal:"3,default,map<i32:i32>" json:"mapReq"`
}

func NewTestServiceEchoMultiInt32Args() *TestServiceEchoMultiInt32Args {
	return &TestServiceEchoMultiInt32Args{}
}

func (p *TestServiceEchoMultiInt32Args) InitDefault() {
	*p = TestServiceEchoMultiInt32Args{}
}

func (p *TestServiceEchoMultiInt32Args) GetBaseReq() (v int32) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiInt32Args) GetListReq() (v []int32) {
	return p.ListReq
}

func (p *TestServiceEchoMultiInt32Args) GetMapReq() (v map[int32]int32) {
	return p.MapReq
}
func (p *TestServiceEchoMultiInt32Args) SetBaseReq(val int32) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiInt32Args) SetListReq(val []int32) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiInt32Args) SetMapReq(val map[int32]int32) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiInt32Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiInt32Args(%+v)", *p)
}
func (p *TestServiceEchoMultiInt32Args) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiInt32Result struct {
	Success *EchoMultiInt32Response `thrift:"success,0,optional" frugal:"0,optional,EchoMultiInt32Response" json:"success,omitempty"`
}

func NewTestServiceEchoMultiInt32Result() *TestServiceEchoMultiInt32Result {
	return &TestServiceEchoMultiInt32Result{}
}

func (p *TestServiceEchoMultiInt32Result) InitDefault() {
	*p = TestServiceEchoMultiInt32Result{}
}

var TestServiceEchoMultiInt32Result_Success_DEFAULT *EchoMultiInt32Response

func (p *TestServiceEchoMultiInt32Result) GetSuccess() (v *EchoMultiInt32Response) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiInt32Result_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiInt32Result) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiInt32Response)
}

func (p *TestServiceEchoMultiInt32Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiInt32Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiInt32Result(%+v)", *p)
}
func (p *TestServiceEchoMultiInt32Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiInt64Args struct {
	BaseReq int64           `thrift:"baseReq,1" frugal:"1,default,i64" json:"baseReq"`
	ListReq []int64         `thrift:"listReq,2" frugal:"2,default,list<i64>" json:"listReq"`
	MapReq  map[int64]int64 `thrift:"mapReq,3" frugal:"3,default,map<i64:i64>" json:"mapReq"`
}

func NewTestServiceEchoMultiInt64Args() *TestServiceEchoMultiInt64Args {
	return &TestServiceEchoMultiInt64Args{}
}

func (p *TestServiceEchoMultiInt64Args) InitDefault() {
	*p = TestServiceEchoMultiInt64Args{}
}

func (p *TestServiceEchoMultiInt64Args) GetBaseReq() (v int64) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiInt64Args) GetListReq() (v []int64) {
	return p.ListReq
}

func (p *TestServiceEchoMultiInt64Args) GetMapReq() (v map[int64]int64) {
	return p.MapReq
}
func (p *TestServiceEchoMultiInt64Args) SetBaseReq(val int64) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiInt64Args) SetListReq(val []int64) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiInt64Args) SetMapReq(val map[int64]int64) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiInt64Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiInt64Args(%+v)", *p)
}
func (p *TestServiceEchoMultiInt64Args) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiInt64Result struct {
	Success *EchoMultiInt64Response `thrift:"success,0,optional" frugal:"0,optional,EchoMultiInt64Response" json:"success,omitempty"`
}

func NewTestServiceEchoMultiInt64Result() *TestServiceEchoMultiInt64Result {
	return &TestServiceEchoMultiInt64Result{}
}

func (p *TestServiceEchoMultiInt64Result) InitDefault() {
	*p = TestServiceEchoMultiInt64Result{}
}

var TestServiceEchoMultiInt64Result_Success_DEFAULT *EchoMultiInt64Response

func (p *TestServiceEchoMultiInt64Result) GetSuccess() (v *EchoMultiInt64Response) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiInt64Result_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiInt64Result) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiInt64Response)
}

func (p *TestServiceEchoMultiInt64Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiInt64Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiInt64Result(%+v)", *p)
}
func (p *TestServiceEchoMultiInt64Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiFloatArgs struct {
	BaseReq float64             `thrift:"baseReq,1" frugal:"1,default,double" json:"baseReq"`
	ListReq []float64           `thrift:"listReq,2" frugal:"2,default,list<double>" json:"listReq"`
	MapReq  map[float64]float64 `thrift:"mapReq,3" frugal:"3,default,map<double:double>" json:"mapReq"`
}

func NewTestServiceEchoMultiFloatArgs() *TestServiceEchoMultiFloatArgs {
	return &TestServiceEchoMultiFloatArgs{}
}

func (p *TestServiceEchoMultiFloatArgs) InitDefault() {
	*p = TestServiceEchoMultiFloatArgs{}
}

func (p *TestServiceEchoMultiFloatArgs) GetBaseReq() (v float64) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiFloatArgs) GetListReq() (v []float64) {
	return p.ListReq
}

func (p *TestServiceEchoMultiFloatArgs) GetMapReq() (v map[float64]float64) {
	return p.MapReq
}
func (p *TestServiceEchoMultiFloatArgs) SetBaseReq(val float64) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiFloatArgs) SetListReq(val []float64) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiFloatArgs) SetMapReq(val map[float64]float64) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiFloatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiFloatArgs(%+v)", *p)
}
func (p *TestServiceEchoMultiFloatArgs) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiFloatResult struct {
	Success *EchoMultiFloatResponse `thrift:"success,0,optional" frugal:"0,optional,EchoMultiFloatResponse" json:"success,omitempty"`
}

func NewTestServiceEchoMultiFloatResult() *TestServiceEchoMultiFloatResult {
	return &TestServiceEchoMultiFloatResult{}
}

func (p *TestServiceEchoMultiFloatResult) InitDefault() {
	*p = TestServiceEchoMultiFloatResult{}
}

var TestServiceEchoMultiFloatResult_Success_DEFAULT *EchoMultiFloatResponse

func (p *TestServiceEchoMultiFloatResult) GetSuccess() (v *EchoMultiFloatResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiFloatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiFloatResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiFloatResponse)
}

func (p *TestServiceEchoMultiFloatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiFloatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiFloatResult(%+v)", *p)
}
func (p *TestServiceEchoMultiFloatResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiDoubleArgs struct {
	BaseReq float64             `thrift:"baseReq,1" frugal:"1,default,double" json:"baseReq"`
	ListReq []float64           `thrift:"listReq,2" frugal:"2,default,list<double>" json:"listReq"`
	MapReq  map[float64]float64 `thrift:"mapReq,3" frugal:"3,default,map<double:double>" json:"mapReq"`
}

func NewTestServiceEchoMultiDoubleArgs() *TestServiceEchoMultiDoubleArgs {
	return &TestServiceEchoMultiDoubleArgs{}
}

func (p *TestServiceEchoMultiDoubleArgs) InitDefault() {
	*p = TestServiceEchoMultiDoubleArgs{}
}

func (p *TestServiceEchoMultiDoubleArgs) GetBaseReq() (v float64) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiDoubleArgs) GetListReq() (v []float64) {
	return p.ListReq
}

func (p *TestServiceEchoMultiDoubleArgs) GetMapReq() (v map[float64]float64) {
	return p.MapReq
}
func (p *TestServiceEchoMultiDoubleArgs) SetBaseReq(val float64) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiDoubleArgs) SetListReq(val []float64) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiDoubleArgs) SetMapReq(val map[float64]float64) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiDoubleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiDoubleArgs(%+v)", *p)
}
func (p *TestServiceEchoMultiDoubleArgs) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiDoubleResult struct {
	Success *EchoMultiDoubleResponse `thrift:"success,0,optional" frugal:"0,optional,EchoMultiDoubleResponse" json:"success,omitempty"`
}

func NewTestServiceEchoMultiDoubleResult() *TestServiceEchoMultiDoubleResult {
	return &TestServiceEchoMultiDoubleResult{}
}

func (p *TestServiceEchoMultiDoubleResult) InitDefault() {
	*p = TestServiceEchoMultiDoubleResult{}
}

var TestServiceEchoMultiDoubleResult_Success_DEFAULT *EchoMultiDoubleResponse

func (p *TestServiceEchoMultiDoubleResult) GetSuccess() (v *EchoMultiDoubleResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiDoubleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiDoubleResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiDoubleResponse)
}

func (p *TestServiceEchoMultiDoubleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiDoubleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiDoubleResult(%+v)", *p)
}
func (p *TestServiceEchoMultiDoubleResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiStringArgs struct {
	BaseReq string            `thrift:"baseReq,1" frugal:"1,default,string" json:"baseReq"`
	ListReq []string          `thrift:"listReq,2" frugal:"2,default,list<string>" json:"listReq"`
	MapReq  map[string]string `thrift:"mapReq,3" frugal:"3,default,map<string:string>" json:"mapReq"`
}

func NewTestServiceEchoMultiStringArgs() *TestServiceEchoMultiStringArgs {
	return &TestServiceEchoMultiStringArgs{}
}

func (p *TestServiceEchoMultiStringArgs) InitDefault() {
	*p = TestServiceEchoMultiStringArgs{}
}

func (p *TestServiceEchoMultiStringArgs) GetBaseReq() (v string) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiStringArgs) GetListReq() (v []string) {
	return p.ListReq
}

func (p *TestServiceEchoMultiStringArgs) GetMapReq() (v map[string]string) {
	return p.MapReq
}
func (p *TestServiceEchoMultiStringArgs) SetBaseReq(val string) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiStringArgs) SetListReq(val []string) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiStringArgs) SetMapReq(val map[string]string) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiStringArgs(%+v)", *p)
}
func (p *TestServiceEchoMultiStringArgs) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiStringResult struct {
	Success *EchoMultiStringResponse `thrift:"success,0,optional" frugal:"0,optional,EchoMultiStringResponse" json:"success,omitempty"`
}

func NewTestServiceEchoMultiStringResult() *TestServiceEchoMultiStringResult {
	return &TestServiceEchoMultiStringResult{}
}

func (p *TestServiceEchoMultiStringResult) InitDefault() {
	*p = TestServiceEchoMultiStringResult{}
}

var TestServiceEchoMultiStringResult_Success_DEFAULT *EchoMultiStringResponse

func (p *TestServiceEchoMultiStringResult) GetSuccess() (v *EchoMultiStringResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiStringResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiStringResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiStringResponse)
}

func (p *TestServiceEchoMultiStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiStringResult(%+v)", *p)
}
func (p *TestServiceEchoMultiStringResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseBoolArgs struct {
	Req bool `thrift:"req,1" frugal:"1,default,bool" json:"req"`
}

func NewTestServiceEchoBaseBoolArgs() *TestServiceEchoBaseBoolArgs {
	return &TestServiceEchoBaseBoolArgs{}
}

func (p *TestServiceEchoBaseBoolArgs) InitDefault() {
	*p = TestServiceEchoBaseBoolArgs{}
}

func (p *TestServiceEchoBaseBoolArgs) GetReq() (v bool) {
	return p.Req
}
func (p *TestServiceEchoBaseBoolArgs) SetReq(val bool) {
	p.Req = val
}

func (p *TestServiceEchoBaseBoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseBoolArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseBoolArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseBoolResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewTestServiceEchoBaseBoolResult() *TestServiceEchoBaseBoolResult {
	return &TestServiceEchoBaseBoolResult{}
}

func (p *TestServiceEchoBaseBoolResult) InitDefault() {
	*p = TestServiceEchoBaseBoolResult{}
}

var TestServiceEchoBaseBoolResult_Success_DEFAULT bool

func (p *TestServiceEchoBaseBoolResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseBoolResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoBaseBoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

func (p *TestServiceEchoBaseBoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseBoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseBoolResult(%+v)", *p)
}
func (p *TestServiceEchoBaseBoolResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseByteArgs struct {
	Req int8 `thrift:"req,1" frugal:"1,default,byte" json:"req"`
}

func NewTestServiceEchoBaseByteArgs() *TestServiceEchoBaseByteArgs {
	return &TestServiceEchoBaseByteArgs{}
}

func (p *TestServiceEchoBaseByteArgs) InitDefault() {
	*p = TestServiceEchoBaseByteArgs{}
}

func (p *TestServiceEchoBaseByteArgs) GetReq() (v int8) {
	return p.Req
}
func (p *TestServiceEchoBaseByteArgs) SetReq(val int8) {
	p.Req = val
}

func (p *TestServiceEchoBaseByteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseByteArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseByteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseByteResult struct {
	Success *int8 `thrift:"success,0,optional" frugal:"0,optional,byte" json:"success,omitempty"`
}

func NewTestServiceEchoBaseByteResult() *TestServiceEchoBaseByteResult {
	return &TestServiceEchoBaseByteResult{}
}

func (p *TestServiceEchoBaseByteResult) InitDefault() {
	*p = TestServiceEchoBaseByteResult{}
}

var TestServiceEchoBaseByteResult_Success_DEFAULT int8

func (p *TestServiceEchoBaseByteResult) GetSuccess() (v int8) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseByteResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoBaseByteResult) SetSuccess(x interface{}) {
	p.Success = x.(*int8)
}

func (p *TestServiceEchoBaseByteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseByteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseByteResult(%+v)", *p)
}
func (p *TestServiceEchoBaseByteResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseInt16Args struct {
	Req int16 `thrift:"req,1" frugal:"1,default,i16" json:"req"`
}

func NewTestServiceEchoBaseInt16Args() *TestServiceEchoBaseInt16Args {
	return &TestServiceEchoBaseInt16Args{}
}

func (p *TestServiceEchoBaseInt16Args) InitDefault() {
	*p = TestServiceEchoBaseInt16Args{}
}

func (p *TestServiceEchoBaseInt16Args) GetReq() (v int16) {
	return p.Req
}
func (p *TestServiceEchoBaseInt16Args) SetReq(val int16) {
	p.Req = val
}

func (p *TestServiceEchoBaseInt16Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt16Args(%+v)", *p)
}
func (p *TestServiceEchoBaseInt16Args) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseInt16Result struct {
	Success *int16 `thrift:"success,0,optional" frugal:"0,optional,i16" json:"success,omitempty"`
}

func NewTestServiceEchoBaseInt16Result() *TestServiceEchoBaseInt16Result {
	return &TestServiceEchoBaseInt16Result{}
}

func (p *TestServiceEchoBaseInt16Result) InitDefault() {
	*p = TestServiceEchoBaseInt16Result{}
}

var TestServiceEchoBaseInt16Result_Success_DEFAULT int16

func (p *TestServiceEchoBaseInt16Result) GetSuccess() (v int16) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseInt16Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoBaseInt16Result) SetSuccess(x interface{}) {
	p.Success = x.(*int16)
}

func (p *TestServiceEchoBaseInt16Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseInt16Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt16Result(%+v)", *p)
}
func (p *TestServiceEchoBaseInt16Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseInt32Args struct {
	Req int32 `thrift:"req,1" frugal:"1,default,i32" json:"req"`
}

func NewTestServiceEchoBaseInt32Args() *TestServiceEchoBaseInt32Args {
	return &TestServiceEchoBaseInt32Args{}
}

func (p *TestServiceEchoBaseInt32Args) InitDefault() {
	*p = TestServiceEchoBaseInt32Args{}
}

func (p *TestServiceEchoBaseInt32Args) GetReq() (v int32) {
	return p.Req
}
func (p *TestServiceEchoBaseInt32Args) SetReq(val int32) {
	p.Req = val
}

func (p *TestServiceEchoBaseInt32Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt32Args(%+v)", *p)
}
func (p *TestServiceEchoBaseInt32Args) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseInt32Result struct {
	Success *int32 `thrift:"success,0,optional" frugal:"0,optional,i32" json:"success,omitempty"`
}

func NewTestServiceEchoBaseInt32Result() *TestServiceEchoBaseInt32Result {
	return &TestServiceEchoBaseInt32Result{}
}

func (p *TestServiceEchoBaseInt32Result) InitDefault() {
	*p = TestServiceEchoBaseInt32Result{}
}

var TestServiceEchoBaseInt32Result_Success_DEFAULT int32

func (p *TestServiceEchoBaseInt32Result) GetSuccess() (v int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseInt32Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoBaseInt32Result) SetSuccess(x interface{}) {
	p.Success = x.(*int32)
}

func (p *TestServiceEchoBaseInt32Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseInt32Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt32Result(%+v)", *p)
}
func (p *TestServiceEchoBaseInt32Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseInt64Args struct {
	Req int64 `thrift:"req,1" frugal:"1,default,i64" json:"req"`
}

func NewTestServiceEchoBaseInt64Args() *TestServiceEchoBaseInt64Args {
	return &TestServiceEchoBaseInt64Args{}
}

func (p *TestServiceEchoBaseInt64Args) InitDefault() {
	*p = TestServiceEchoBaseInt64Args{}
}

func (p *TestServiceEchoBaseInt64Args) GetReq() (v int64) {
	return p.Req
}
func (p *TestServiceEchoBaseInt64Args) SetReq(val int64) {
	p.Req = val
}

func (p *TestServiceEchoBaseInt64Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt64Args(%+v)", *p)
}
func (p *TestServiceEchoBaseInt64Args) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseInt64Result struct {
	Success *int64 `thrift:"success,0,optional" frugal:"0,optional,i64" json:"success,omitempty"`
}

func NewTestServiceEchoBaseInt64Result() *TestServiceEchoBaseInt64Result {
	return &TestServiceEchoBaseInt64Result{}
}

func (p *TestServiceEchoBaseInt64Result) InitDefault() {
	*p = TestServiceEchoBaseInt64Result{}
}

var TestServiceEchoBaseInt64Result_Success_DEFAULT int64

func (p *TestServiceEchoBaseInt64Result) GetSuccess() (v int64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseInt64Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoBaseInt64Result) SetSuccess(x interface{}) {
	p.Success = x.(*int64)
}

func (p *TestServiceEchoBaseInt64Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseInt64Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt64Result(%+v)", *p)
}
func (p *TestServiceEchoBaseInt64Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseFloatArgs struct {
	Req float64 `thrift:"req,1" frugal:"1,default,double" json:"req"`
}

func NewTestServiceEchoBaseFloatArgs() *TestServiceEchoBaseFloatArgs {
	return &TestServiceEchoBaseFloatArgs{}
}

func (p *TestServiceEchoBaseFloatArgs) InitDefault() {
	*p = TestServiceEchoBaseFloatArgs{}
}

func (p *TestServiceEchoBaseFloatArgs) GetReq() (v float64) {
	return p.Req
}
func (p *TestServiceEchoBaseFloatArgs) SetReq(val float64) {
	p.Req = val
}

func (p *TestServiceEchoBaseFloatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseFloatArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseFloatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseFloatResult struct {
	Success *float64 `thrift:"success,0,optional" frugal:"0,optional,double" json:"success,omitempty"`
}

func NewTestServiceEchoBaseFloatResult() *TestServiceEchoBaseFloatResult {
	return &TestServiceEchoBaseFloatResult{}
}

func (p *TestServiceEchoBaseFloatResult) InitDefault() {
	*p = TestServiceEchoBaseFloatResult{}
}

var TestServiceEchoBaseFloatResult_Success_DEFAULT float64

func (p *TestServiceEchoBaseFloatResult) GetSuccess() (v float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseFloatResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoBaseFloatResult) SetSuccess(x interface{}) {
	p.Success = x.(*float64)
}

func (p *TestServiceEchoBaseFloatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseFloatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseFloatResult(%+v)", *p)
}
func (p *TestServiceEchoBaseFloatResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseDoubleArgs struct {
	Req float64 `thrift:"req,1" frugal:"1,default,double" json:"req"`
}

func NewTestServiceEchoBaseDoubleArgs() *TestServiceEchoBaseDoubleArgs {
	return &TestServiceEchoBaseDoubleArgs{}
}

func (p *TestServiceEchoBaseDoubleArgs) InitDefault() {
	*p = TestServiceEchoBaseDoubleArgs{}
}

func (p *TestServiceEchoBaseDoubleArgs) GetReq() (v float64) {
	return p.Req
}
func (p *TestServiceEchoBaseDoubleArgs) SetReq(val float64) {
	p.Req = val
}

func (p *TestServiceEchoBaseDoubleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseDoubleArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseDoubleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseDoubleResult struct {
	Success *float64 `thrift:"success,0,optional" frugal:"0,optional,double" json:"success,omitempty"`
}

func NewTestServiceEchoBaseDoubleResult() *TestServiceEchoBaseDoubleResult {
	return &TestServiceEchoBaseDoubleResult{}
}

func (p *TestServiceEchoBaseDoubleResult) InitDefault() {
	*p = TestServiceEchoBaseDoubleResult{}
}

var TestServiceEchoBaseDoubleResult_Success_DEFAULT float64

func (p *TestServiceEchoBaseDoubleResult) GetSuccess() (v float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseDoubleResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoBaseDoubleResult) SetSuccess(x interface{}) {
	p.Success = x.(*float64)
}

func (p *TestServiceEchoBaseDoubleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseDoubleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseDoubleResult(%+v)", *p)
}
func (p *TestServiceEchoBaseDoubleResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseBoolListArgs struct {
	Req []bool `thrift:"req,1" frugal:"1,default,list<bool>" json:"req"`
}

func NewTestServiceEchoBaseBoolListArgs() *TestServiceEchoBaseBoolListArgs {
	return &TestServiceEchoBaseBoolListArgs{}
}

func (p *TestServiceEchoBaseBoolListArgs) InitDefault() {
	*p = TestServiceEchoBaseBoolListArgs{}
}

func (p *TestServiceEchoBaseBoolListArgs) GetReq() (v []bool) {
	return p.Req
}
func (p *TestServiceEchoBaseBoolListArgs) SetReq(val []bool) {
	p.Req = val
}

func (p *TestServiceEchoBaseBoolListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseBoolListArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseBoolListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseBoolListResult struct {
	Success []bool `thrift:"success,0,optional" frugal:"0,optional,list<bool>" json:"success,omitempty"`
}

func NewTestServiceEchoBaseBoolListResult() *TestServiceEchoBaseBoolListResult {
	return &TestServiceEchoBaseBoolListResult{}
}

func (p *TestServiceEchoBaseBoolListResult) InitDefault() {
	*p = TestServiceEchoBaseBoolListResult{}
}

var TestServiceEchoBaseBoolListResult_Success_DEFAULT []bool

func (p *TestServiceEchoBaseBoolListResult) GetSuccess() (v []bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseBoolListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBaseBoolListResult) SetSuccess(x interface{}) {
	p.Success = x.([]bool)
}

func (p *TestServiceEchoBaseBoolListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseBoolListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseBoolListResult(%+v)", *p)
}
func (p *TestServiceEchoBaseBoolListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseByteListArgs struct {
	Req []int8 `thrift:"req,1" frugal:"1,default,list<byte>" json:"req"`
}

func NewTestServiceEchoBaseByteListArgs() *TestServiceEchoBaseByteListArgs {
	return &TestServiceEchoBaseByteListArgs{}
}

func (p *TestServiceEchoBaseByteListArgs) InitDefault() {
	*p = TestServiceEchoBaseByteListArgs{}
}

func (p *TestServiceEchoBaseByteListArgs) GetReq() (v []int8) {
	return p.Req
}
func (p *TestServiceEchoBaseByteListArgs) SetReq(val []int8) {
	p.Req = val
}

func (p *TestServiceEchoBaseByteListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseByteListArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseByteListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseByteListResult struct {
	Success []int8 `thrift:"success,0,optional" frugal:"0,optional,list<byte>" json:"success,omitempty"`
}

func NewTestServiceEchoBaseByteListResult() *TestServiceEchoBaseByteListResult {
	return &TestServiceEchoBaseByteListResult{}
}

func (p *TestServiceEchoBaseByteListResult) InitDefault() {
	*p = TestServiceEchoBaseByteListResult{}
}

var TestServiceEchoBaseByteListResult_Success_DEFAULT []int8

func (p *TestServiceEchoBaseByteListResult) GetSuccess() (v []int8) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseByteListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBaseByteListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int8)
}

func (p *TestServiceEchoBaseByteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseByteListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseByteListResult(%+v)", *p)
}
func (p *TestServiceEchoBaseByteListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseInt16ListArgs struct {
	Req []int16 `thrift:"req,1" frugal:"1,default,list<i16>" json:"req"`
}

func NewTestServiceEchoBaseInt16ListArgs() *TestServiceEchoBaseInt16ListArgs {
	return &TestServiceEchoBaseInt16ListArgs{}
}

func (p *TestServiceEchoBaseInt16ListArgs) InitDefault() {
	*p = TestServiceEchoBaseInt16ListArgs{}
}

func (p *TestServiceEchoBaseInt16ListArgs) GetReq() (v []int16) {
	return p.Req
}
func (p *TestServiceEchoBaseInt16ListArgs) SetReq(val []int16) {
	p.Req = val
}

func (p *TestServiceEchoBaseInt16ListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt16ListArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseInt16ListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseInt16ListResult struct {
	Success []int16 `thrift:"success,0,optional" frugal:"0,optional,list<i16>" json:"success,omitempty"`
}

func NewTestServiceEchoBaseInt16ListResult() *TestServiceEchoBaseInt16ListResult {
	return &TestServiceEchoBaseInt16ListResult{}
}

func (p *TestServiceEchoBaseInt16ListResult) InitDefault() {
	*p = TestServiceEchoBaseInt16ListResult{}
}

var TestServiceEchoBaseInt16ListResult_Success_DEFAULT []int16

func (p *TestServiceEchoBaseInt16ListResult) GetSuccess() (v []int16) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseInt16ListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBaseInt16ListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int16)
}

func (p *TestServiceEchoBaseInt16ListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseInt16ListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt16ListResult(%+v)", *p)
}
func (p *TestServiceEchoBaseInt16ListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseInt32ListArgs struct {
	Req []int32 `thrift:"req,1" frugal:"1,default,list<i32>" json:"req"`
}

func NewTestServiceEchoBaseInt32ListArgs() *TestServiceEchoBaseInt32ListArgs {
	return &TestServiceEchoBaseInt32ListArgs{}
}

func (p *TestServiceEchoBaseInt32ListArgs) InitDefault() {
	*p = TestServiceEchoBaseInt32ListArgs{}
}

func (p *TestServiceEchoBaseInt32ListArgs) GetReq() (v []int32) {
	return p.Req
}
func (p *TestServiceEchoBaseInt32ListArgs) SetReq(val []int32) {
	p.Req = val
}

func (p *TestServiceEchoBaseInt32ListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt32ListArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseInt32ListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseInt32ListResult struct {
	Success []int32 `thrift:"success,0,optional" frugal:"0,optional,list<i32>" json:"success,omitempty"`
}

func NewTestServiceEchoBaseInt32ListResult() *TestServiceEchoBaseInt32ListResult {
	return &TestServiceEchoBaseInt32ListResult{}
}

func (p *TestServiceEchoBaseInt32ListResult) InitDefault() {
	*p = TestServiceEchoBaseInt32ListResult{}
}

var TestServiceEchoBaseInt32ListResult_Success_DEFAULT []int32

func (p *TestServiceEchoBaseInt32ListResult) GetSuccess() (v []int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseInt32ListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBaseInt32ListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int32)
}

func (p *TestServiceEchoBaseInt32ListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseInt32ListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt32ListResult(%+v)", *p)
}
func (p *TestServiceEchoBaseInt32ListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseInt64ListArgs struct {
	Req []int64 `thrift:"req,1" frugal:"1,default,list<i64>" json:"req"`
}

func NewTestServiceEchoBaseInt64ListArgs() *TestServiceEchoBaseInt64ListArgs {
	return &TestServiceEchoBaseInt64ListArgs{}
}

func (p *TestServiceEchoBaseInt64ListArgs) InitDefault() {
	*p = TestServiceEchoBaseInt64ListArgs{}
}

func (p *TestServiceEchoBaseInt64ListArgs) GetReq() (v []int64) {
	return p.Req
}
func (p *TestServiceEchoBaseInt64ListArgs) SetReq(val []int64) {
	p.Req = val
}

func (p *TestServiceEchoBaseInt64ListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt64ListArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseInt64ListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseInt64ListResult struct {
	Success []int64 `thrift:"success,0,optional" frugal:"0,optional,list<i64>" json:"success,omitempty"`
}

func NewTestServiceEchoBaseInt64ListResult() *TestServiceEchoBaseInt64ListResult {
	return &TestServiceEchoBaseInt64ListResult{}
}

func (p *TestServiceEchoBaseInt64ListResult) InitDefault() {
	*p = TestServiceEchoBaseInt64ListResult{}
}

var TestServiceEchoBaseInt64ListResult_Success_DEFAULT []int64

func (p *TestServiceEchoBaseInt64ListResult) GetSuccess() (v []int64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseInt64ListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBaseInt64ListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int64)
}

func (p *TestServiceEchoBaseInt64ListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseInt64ListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseInt64ListResult(%+v)", *p)
}
func (p *TestServiceEchoBaseInt64ListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseFloatListArgs struct {
	Req []float64 `thrift:"req,1" frugal:"1,default,list<double>" json:"req"`
}

func NewTestServiceEchoBaseFloatListArgs() *TestServiceEchoBaseFloatListArgs {
	return &TestServiceEchoBaseFloatListArgs{}
}

func (p *TestServiceEchoBaseFloatListArgs) InitDefault() {
	*p = TestServiceEchoBaseFloatListArgs{}
}

func (p *TestServiceEchoBaseFloatListArgs) GetReq() (v []float64) {
	return p.Req
}
func (p *TestServiceEchoBaseFloatListArgs) SetReq(val []float64) {
	p.Req = val
}

func (p *TestServiceEchoBaseFloatListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseFloatListArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseFloatListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseFloatListResult struct {
	Success []float64 `thrift:"success,0,optional" frugal:"0,optional,list<double>" json:"success,omitempty"`
}

func NewTestServiceEchoBaseFloatListResult() *TestServiceEchoBaseFloatListResult {
	return &TestServiceEchoBaseFloatListResult{}
}

func (p *TestServiceEchoBaseFloatListResult) InitDefault() {
	*p = TestServiceEchoBaseFloatListResult{}
}

var TestServiceEchoBaseFloatListResult_Success_DEFAULT []float64

func (p *TestServiceEchoBaseFloatListResult) GetSuccess() (v []float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseFloatListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBaseFloatListResult) SetSuccess(x interface{}) {
	p.Success = x.([]float64)
}

func (p *TestServiceEchoBaseFloatListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseFloatListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseFloatListResult(%+v)", *p)
}
func (p *TestServiceEchoBaseFloatListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBaseDoubleListArgs struct {
	Req []float64 `thrift:"req,1" frugal:"1,default,list<double>" json:"req"`
}

func NewTestServiceEchoBaseDoubleListArgs() *TestServiceEchoBaseDoubleListArgs {
	return &TestServiceEchoBaseDoubleListArgs{}
}

func (p *TestServiceEchoBaseDoubleListArgs) InitDefault() {
	*p = TestServiceEchoBaseDoubleListArgs{}
}

func (p *TestServiceEchoBaseDoubleListArgs) GetReq() (v []float64) {
	return p.Req
}
func (p *TestServiceEchoBaseDoubleListArgs) SetReq(val []float64) {
	p.Req = val
}

func (p *TestServiceEchoBaseDoubleListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseDoubleListArgs(%+v)", *p)
}
func (p *TestServiceEchoBaseDoubleListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBaseDoubleListResult struct {
	Success []float64 `thrift:"success,0,optional" frugal:"0,optional,list<double>" json:"success,omitempty"`
}

func NewTestServiceEchoBaseDoubleListResult() *TestServiceEchoBaseDoubleListResult {
	return &TestServiceEchoBaseDoubleListResult{}
}

func (p *TestServiceEchoBaseDoubleListResult) InitDefault() {
	*p = TestServiceEchoBaseDoubleListResult{}
}

var TestServiceEchoBaseDoubleListResult_Success_DEFAULT []float64

func (p *TestServiceEchoBaseDoubleListResult) GetSuccess() (v []float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBaseDoubleListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBaseDoubleListResult) SetSuccess(x interface{}) {
	p.Success = x.([]float64)
}

func (p *TestServiceEchoBaseDoubleListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBaseDoubleListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBaseDoubleListResult(%+v)", *p)
}
func (p *TestServiceEchoBaseDoubleListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2BoolBaseMapArgs struct {
	Req map[bool]bool `thrift:"req,1" frugal:"1,default,map<bool:bool>" json:"req"`
}

func NewTestServiceEchoBool2BoolBaseMapArgs() *TestServiceEchoBool2BoolBaseMapArgs {
	return &TestServiceEchoBool2BoolBaseMapArgs{}
}

func (p *TestServiceEchoBool2BoolBaseMapArgs) InitDefault() {
	*p = TestServiceEchoBool2BoolBaseMapArgs{}
}

func (p *TestServiceEchoBool2BoolBaseMapArgs) GetReq() (v map[bool]bool) {
	return p.Req
}
func (p *TestServiceEchoBool2BoolBaseMapArgs) SetReq(val map[bool]bool) {
	p.Req = val
}

func (p *TestServiceEchoBool2BoolBaseMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BoolBaseMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2BoolBaseMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2BoolBaseMapResult struct {
	Success map[bool]bool `thrift:"success,0,optional" frugal:"0,optional,map<bool:bool>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2BoolBaseMapResult() *TestServiceEchoBool2BoolBaseMapResult {
	return &TestServiceEchoBool2BoolBaseMapResult{}
}

func (p *TestServiceEchoBool2BoolBaseMapResult) InitDefault() {
	*p = TestServiceEchoBool2BoolBaseMapResult{}
}

var TestServiceEchoBool2BoolBaseMapResult_Success_DEFAULT map[bool]bool

func (p *TestServiceEchoBool2BoolBaseMapResult) GetSuccess() (v map[bool]bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2BoolBaseMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2BoolBaseMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]bool)
}

func (p *TestServiceEchoBool2BoolBaseMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2BoolBaseMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2BoolBaseMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2BoolBaseMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2ByteBaseMapArgs struct {
	Req map[bool]int8 `thrift:"req,1" frugal:"1,default,map<bool:byte>" json:"req"`
}

func NewTestServiceEchoBool2ByteBaseMapArgs() *TestServiceEchoBool2ByteBaseMapArgs {
	return &TestServiceEchoBool2ByteBaseMapArgs{}
}

func (p *TestServiceEchoBool2ByteBaseMapArgs) InitDefault() {
	*p = TestServiceEchoBool2ByteBaseMapArgs{}
}

func (p *TestServiceEchoBool2ByteBaseMapArgs) GetReq() (v map[bool]int8) {
	return p.Req
}
func (p *TestServiceEchoBool2ByteBaseMapArgs) SetReq(val map[bool]int8) {
	p.Req = val
}

func (p *TestServiceEchoBool2ByteBaseMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2ByteBaseMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2ByteBaseMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2ByteBaseMapResult struct {
	Success map[bool]int8 `thrift:"success,0,optional" frugal:"0,optional,map<bool:byte>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2ByteBaseMapResult() *TestServiceEchoBool2ByteBaseMapResult {
	return &TestServiceEchoBool2ByteBaseMapResult{}
}

func (p *TestServiceEchoBool2ByteBaseMapResult) InitDefault() {
	*p = TestServiceEchoBool2ByteBaseMapResult{}
}

var TestServiceEchoBool2ByteBaseMapResult_Success_DEFAULT map[bool]int8

func (p *TestServiceEchoBool2ByteBaseMapResult) GetSuccess() (v map[bool]int8) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2ByteBaseMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2ByteBaseMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]int8)
}

func (p *TestServiceEchoBool2ByteBaseMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2ByteBaseMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2ByteBaseMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2ByteBaseMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2Int16BaseMapArgs struct {
	Req map[bool]int16 `thrift:"req,1" frugal:"1,default,map<bool:i16>" json:"req"`
}

func NewTestServiceEchoBool2Int16BaseMapArgs() *TestServiceEchoBool2Int16BaseMapArgs {
	return &TestServiceEchoBool2Int16BaseMapArgs{}
}

func (p *TestServiceEchoBool2Int16BaseMapArgs) InitDefault() {
	*p = TestServiceEchoBool2Int16BaseMapArgs{}
}

func (p *TestServiceEchoBool2Int16BaseMapArgs) GetReq() (v map[bool]int16) {
	return p.Req
}
func (p *TestServiceEchoBool2Int16BaseMapArgs) SetReq(val map[bool]int16) {
	p.Req = val
}

func (p *TestServiceEchoBool2Int16BaseMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int16BaseMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2Int16BaseMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2Int16BaseMapResult struct {
	Success map[bool]int16 `thrift:"success,0,optional" frugal:"0,optional,map<bool:i16>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2Int16BaseMapResult() *TestServiceEchoBool2Int16BaseMapResult {
	return &TestServiceEchoBool2Int16BaseMapResult{}
}

func (p *TestServiceEchoBool2Int16BaseMapResult) InitDefault() {
	*p = TestServiceEchoBool2Int16BaseMapResult{}
}

var TestServiceEchoBool2Int16BaseMapResult_Success_DEFAULT map[bool]int16

func (p *TestServiceEchoBool2Int16BaseMapResult) GetSuccess() (v map[bool]int16) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2Int16BaseMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2Int16BaseMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]int16)
}

func (p *TestServiceEchoBool2Int16BaseMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2Int16BaseMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int16BaseMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2Int16BaseMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2Int32BaseMapArgs struct {
	Req map[bool]int32 `thrift:"req,1" frugal:"1,default,map<bool:i32>" json:"req"`
}

func NewTestServiceEchoBool2Int32BaseMapArgs() *TestServiceEchoBool2Int32BaseMapArgs {
	return &TestServiceEchoBool2Int32BaseMapArgs{}
}

func (p *TestServiceEchoBool2Int32BaseMapArgs) InitDefault() {
	*p = TestServiceEchoBool2Int32BaseMapArgs{}
}

func (p *TestServiceEchoBool2Int32BaseMapArgs) GetReq() (v map[bool]int32) {
	return p.Req
}
func (p *TestServiceEchoBool2Int32BaseMapArgs) SetReq(val map[bool]int32) {
	p.Req = val
}

func (p *TestServiceEchoBool2Int32BaseMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int32BaseMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2Int32BaseMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2Int32BaseMapResult struct {
	Success map[bool]int32 `thrift:"success,0,optional" frugal:"0,optional,map<bool:i32>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2Int32BaseMapResult() *TestServiceEchoBool2Int32BaseMapResult {
	return &TestServiceEchoBool2Int32BaseMapResult{}
}

func (p *TestServiceEchoBool2Int32BaseMapResult) InitDefault() {
	*p = TestServiceEchoBool2Int32BaseMapResult{}
}

var TestServiceEchoBool2Int32BaseMapResult_Success_DEFAULT map[bool]int32

func (p *TestServiceEchoBool2Int32BaseMapResult) GetSuccess() (v map[bool]int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2Int32BaseMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2Int32BaseMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]int32)
}

func (p *TestServiceEchoBool2Int32BaseMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2Int32BaseMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int32BaseMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2Int32BaseMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2Int64BaseMapArgs struct {
	Req map[bool]int64 `thrift:"req,1" frugal:"1,default,map<bool:i64>" json:"req"`
}

func NewTestServiceEchoBool2Int64BaseMapArgs() *TestServiceEchoBool2Int64BaseMapArgs {
	return &TestServiceEchoBool2Int64BaseMapArgs{}
}

func (p *TestServiceEchoBool2Int64BaseMapArgs) InitDefault() {
	*p = TestServiceEchoBool2Int64BaseMapArgs{}
}

func (p *TestServiceEchoBool2Int64BaseMapArgs) GetReq() (v map[bool]int64) {
	return p.Req
}
func (p *TestServiceEchoBool2Int64BaseMapArgs) SetReq(val map[bool]int64) {
	p.Req = val
}

func (p *TestServiceEchoBool2Int64BaseMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int64BaseMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2Int64BaseMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2Int64BaseMapResult struct {
	Success map[bool]int64 `thrift:"success,0,optional" frugal:"0,optional,map<bool:i64>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2Int64BaseMapResult() *TestServiceEchoBool2Int64BaseMapResult {
	return &TestServiceEchoBool2Int64BaseMapResult{}
}

func (p *TestServiceEchoBool2Int64BaseMapResult) InitDefault() {
	*p = TestServiceEchoBool2Int64BaseMapResult{}
}

var TestServiceEchoBool2Int64BaseMapResult_Success_DEFAULT map[bool]int64

func (p *TestServiceEchoBool2Int64BaseMapResult) GetSuccess() (v map[bool]int64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2Int64BaseMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2Int64BaseMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]int64)
}

func (p *TestServiceEchoBool2Int64BaseMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2Int64BaseMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2Int64BaseMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2Int64BaseMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2FloatBaseMapArgs struct {
	Req map[bool]float64 `thrift:"req,1" frugal:"1,default,map<bool:double>" json:"req"`
}

func NewTestServiceEchoBool2FloatBaseMapArgs() *TestServiceEchoBool2FloatBaseMapArgs {
	return &TestServiceEchoBool2FloatBaseMapArgs{}
}

func (p *TestServiceEchoBool2FloatBaseMapArgs) InitDefault() {
	*p = TestServiceEchoBool2FloatBaseMapArgs{}
}

func (p *TestServiceEchoBool2FloatBaseMapArgs) GetReq() (v map[bool]float64) {
	return p.Req
}
func (p *TestServiceEchoBool2FloatBaseMapArgs) SetReq(val map[bool]float64) {
	p.Req = val
}

func (p *TestServiceEchoBool2FloatBaseMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2FloatBaseMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2FloatBaseMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2FloatBaseMapResult struct {
	Success map[bool]float64 `thrift:"success,0,optional" frugal:"0,optional,map<bool:double>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2FloatBaseMapResult() *TestServiceEchoBool2FloatBaseMapResult {
	return &TestServiceEchoBool2FloatBaseMapResult{}
}

func (p *TestServiceEchoBool2FloatBaseMapResult) InitDefault() {
	*p = TestServiceEchoBool2FloatBaseMapResult{}
}

var TestServiceEchoBool2FloatBaseMapResult_Success_DEFAULT map[bool]float64

func (p *TestServiceEchoBool2FloatBaseMapResult) GetSuccess() (v map[bool]float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2FloatBaseMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2FloatBaseMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]float64)
}

func (p *TestServiceEchoBool2FloatBaseMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2FloatBaseMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2FloatBaseMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2FloatBaseMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoBool2DoubleBaseMapArgs struct {
	Req map[bool]float64 `thrift:"req,1" frugal:"1,default,map<bool:double>" json:"req"`
}

func NewTestServiceEchoBool2DoubleBaseMapArgs() *TestServiceEchoBool2DoubleBaseMapArgs {
	return &TestServiceEchoBool2DoubleBaseMapArgs{}
}

func (p *TestServiceEchoBool2DoubleBaseMapArgs) InitDefault() {
	*p = TestServiceEchoBool2DoubleBaseMapArgs{}
}

func (p *TestServiceEchoBool2DoubleBaseMapArgs) GetReq() (v map[bool]float64) {
	return p.Req
}
func (p *TestServiceEchoBool2DoubleBaseMapArgs) SetReq(val map[bool]float64) {
	p.Req = val
}

func (p *TestServiceEchoBool2DoubleBaseMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2DoubleBaseMapArgs(%+v)", *p)
}
func (p *TestServiceEchoBool2DoubleBaseMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoBool2DoubleBaseMapResult struct {
	Success map[bool]float64 `thrift:"success,0,optional" frugal:"0,optional,map<bool:double>" json:"success,omitempty"`
}

func NewTestServiceEchoBool2DoubleBaseMapResult() *TestServiceEchoBool2DoubleBaseMapResult {
	return &TestServiceEchoBool2DoubleBaseMapResult{}
}

func (p *TestServiceEchoBool2DoubleBaseMapResult) InitDefault() {
	*p = TestServiceEchoBool2DoubleBaseMapResult{}
}

var TestServiceEchoBool2DoubleBaseMapResult_Success_DEFAULT map[bool]float64

func (p *TestServiceEchoBool2DoubleBaseMapResult) GetSuccess() (v map[bool]float64) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBool2DoubleBaseMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBool2DoubleBaseMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]float64)
}

func (p *TestServiceEchoBool2DoubleBaseMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBool2DoubleBaseMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBool2DoubleBaseMapResult(%+v)", *p)
}
func (p *TestServiceEchoBool2DoubleBaseMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiBaseBoolArgs struct {
	BaseReq bool          `thrift:"baseReq,1" frugal:"1,default,bool" json:"baseReq"`
	ListReq []bool        `thrift:"listReq,2" frugal:"2,default,list<bool>" json:"listReq"`
	MapReq  map[bool]bool `thrift:"mapReq,3" frugal:"3,default,map<bool:bool>" json:"mapReq"`
}

func NewTestServiceEchoMultiBaseBoolArgs() *TestServiceEchoMultiBaseBoolArgs {
	return &TestServiceEchoMultiBaseBoolArgs{}
}

func (p *TestServiceEchoMultiBaseBoolArgs) InitDefault() {
	*p = TestServiceEchoMultiBaseBoolArgs{}
}

func (p *TestServiceEchoMultiBaseBoolArgs) GetBaseReq() (v bool) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiBaseBoolArgs) GetListReq() (v []bool) {
	return p.ListReq
}

func (p *TestServiceEchoMultiBaseBoolArgs) GetMapReq() (v map[bool]bool) {
	return p.MapReq
}
func (p *TestServiceEchoMultiBaseBoolArgs) SetBaseReq(val bool) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiBaseBoolArgs) SetListReq(val []bool) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiBaseBoolArgs) SetMapReq(val map[bool]bool) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiBaseBoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseBoolArgs(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseBoolArgs) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiBaseBoolResult struct {
	Success *EchoMultiBoolResponse `thrift:"success,0,optional" frugal:"0,optional,EchoMultiBoolResponse" json:"success,omitempty"`
}

func NewTestServiceEchoMultiBaseBoolResult() *TestServiceEchoMultiBaseBoolResult {
	return &TestServiceEchoMultiBaseBoolResult{}
}

func (p *TestServiceEchoMultiBaseBoolResult) InitDefault() {
	*p = TestServiceEchoMultiBaseBoolResult{}
}

var TestServiceEchoMultiBaseBoolResult_Success_DEFAULT *EchoMultiBoolResponse

func (p *TestServiceEchoMultiBaseBoolResult) GetSuccess() (v *EchoMultiBoolResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiBaseBoolResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiBaseBoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiBoolResponse)
}

func (p *TestServiceEchoMultiBaseBoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiBaseBoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseBoolResult(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseBoolResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiBaseByteArgs struct {
	BaseReq int8          `thrift:"baseReq,1" frugal:"1,default,byte" json:"baseReq"`
	ListReq []int8        `thrift:"listReq,2" frugal:"2,default,list<byte>" json:"listReq"`
	MapReq  map[int8]int8 `thrift:"mapReq,3" frugal:"3,default,map<byte:byte>" json:"mapReq"`
}

func NewTestServiceEchoMultiBaseByteArgs() *TestServiceEchoMultiBaseByteArgs {
	return &TestServiceEchoMultiBaseByteArgs{}
}

func (p *TestServiceEchoMultiBaseByteArgs) InitDefault() {
	*p = TestServiceEchoMultiBaseByteArgs{}
}

func (p *TestServiceEchoMultiBaseByteArgs) GetBaseReq() (v int8) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiBaseByteArgs) GetListReq() (v []int8) {
	return p.ListReq
}

func (p *TestServiceEchoMultiBaseByteArgs) GetMapReq() (v map[int8]int8) {
	return p.MapReq
}
func (p *TestServiceEchoMultiBaseByteArgs) SetBaseReq(val int8) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiBaseByteArgs) SetListReq(val []int8) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiBaseByteArgs) SetMapReq(val map[int8]int8) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiBaseByteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseByteArgs(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseByteArgs) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiBaseByteResult struct {
	Success *EchoMultiByteResponse `thrift:"success,0,optional" frugal:"0,optional,EchoMultiByteResponse" json:"success,omitempty"`
}

func NewTestServiceEchoMultiBaseByteResult() *TestServiceEchoMultiBaseByteResult {
	return &TestServiceEchoMultiBaseByteResult{}
}

func (p *TestServiceEchoMultiBaseByteResult) InitDefault() {
	*p = TestServiceEchoMultiBaseByteResult{}
}

var TestServiceEchoMultiBaseByteResult_Success_DEFAULT *EchoMultiByteResponse

func (p *TestServiceEchoMultiBaseByteResult) GetSuccess() (v *EchoMultiByteResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiBaseByteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiBaseByteResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiByteResponse)
}

func (p *TestServiceEchoMultiBaseByteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiBaseByteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseByteResult(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseByteResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiBaseInt16Args struct {
	BaseReq int16           `thrift:"baseReq,1" frugal:"1,default,i16" json:"baseReq"`
	ListReq []int16         `thrift:"listReq,2" frugal:"2,default,list<i16>" json:"listReq"`
	MapReq  map[int16]int16 `thrift:"mapReq,3" frugal:"3,default,map<i16:i16>" json:"mapReq"`
}

func NewTestServiceEchoMultiBaseInt16Args() *TestServiceEchoMultiBaseInt16Args {
	return &TestServiceEchoMultiBaseInt16Args{}
}

func (p *TestServiceEchoMultiBaseInt16Args) InitDefault() {
	*p = TestServiceEchoMultiBaseInt16Args{}
}

func (p *TestServiceEchoMultiBaseInt16Args) GetBaseReq() (v int16) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiBaseInt16Args) GetListReq() (v []int16) {
	return p.ListReq
}

func (p *TestServiceEchoMultiBaseInt16Args) GetMapReq() (v map[int16]int16) {
	return p.MapReq
}
func (p *TestServiceEchoMultiBaseInt16Args) SetBaseReq(val int16) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiBaseInt16Args) SetListReq(val []int16) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiBaseInt16Args) SetMapReq(val map[int16]int16) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiBaseInt16Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseInt16Args(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseInt16Args) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiBaseInt16Result struct {
	Success *EchoMultiInt16Response `thrift:"success,0,optional" frugal:"0,optional,EchoMultiInt16Response" json:"success,omitempty"`
}

func NewTestServiceEchoMultiBaseInt16Result() *TestServiceEchoMultiBaseInt16Result {
	return &TestServiceEchoMultiBaseInt16Result{}
}

func (p *TestServiceEchoMultiBaseInt16Result) InitDefault() {
	*p = TestServiceEchoMultiBaseInt16Result{}
}

var TestServiceEchoMultiBaseInt16Result_Success_DEFAULT *EchoMultiInt16Response

func (p *TestServiceEchoMultiBaseInt16Result) GetSuccess() (v *EchoMultiInt16Response) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiBaseInt16Result_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiBaseInt16Result) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiInt16Response)
}

func (p *TestServiceEchoMultiBaseInt16Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiBaseInt16Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseInt16Result(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseInt16Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiBaseInt32Args struct {
	BaseReq int32           `thrift:"baseReq,1" frugal:"1,default,i32" json:"baseReq"`
	ListReq []int32         `thrift:"listReq,2" frugal:"2,default,list<i32>" json:"listReq"`
	MapReq  map[int32]int32 `thrift:"mapReq,3" frugal:"3,default,map<i32:i32>" json:"mapReq"`
}

func NewTestServiceEchoMultiBaseInt32Args() *TestServiceEchoMultiBaseInt32Args {
	return &TestServiceEchoMultiBaseInt32Args{}
}

func (p *TestServiceEchoMultiBaseInt32Args) InitDefault() {
	*p = TestServiceEchoMultiBaseInt32Args{}
}

func (p *TestServiceEchoMultiBaseInt32Args) GetBaseReq() (v int32) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiBaseInt32Args) GetListReq() (v []int32) {
	return p.ListReq
}

func (p *TestServiceEchoMultiBaseInt32Args) GetMapReq() (v map[int32]int32) {
	return p.MapReq
}
func (p *TestServiceEchoMultiBaseInt32Args) SetBaseReq(val int32) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiBaseInt32Args) SetListReq(val []int32) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiBaseInt32Args) SetMapReq(val map[int32]int32) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiBaseInt32Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseInt32Args(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseInt32Args) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiBaseInt32Result struct {
	Success *EchoMultiInt32Response `thrift:"success,0,optional" frugal:"0,optional,EchoMultiInt32Response" json:"success,omitempty"`
}

func NewTestServiceEchoMultiBaseInt32Result() *TestServiceEchoMultiBaseInt32Result {
	return &TestServiceEchoMultiBaseInt32Result{}
}

func (p *TestServiceEchoMultiBaseInt32Result) InitDefault() {
	*p = TestServiceEchoMultiBaseInt32Result{}
}

var TestServiceEchoMultiBaseInt32Result_Success_DEFAULT *EchoMultiInt32Response

func (p *TestServiceEchoMultiBaseInt32Result) GetSuccess() (v *EchoMultiInt32Response) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiBaseInt32Result_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiBaseInt32Result) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiInt32Response)
}

func (p *TestServiceEchoMultiBaseInt32Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiBaseInt32Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseInt32Result(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseInt32Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiBaseInt64Args struct {
	BaseReq int64           `thrift:"baseReq,1" frugal:"1,default,i64" json:"baseReq"`
	ListReq []int64         `thrift:"listReq,2" frugal:"2,default,list<i64>" json:"listReq"`
	MapReq  map[int64]int64 `thrift:"mapReq,3" frugal:"3,default,map<i64:i64>" json:"mapReq"`
}

func NewTestServiceEchoMultiBaseInt64Args() *TestServiceEchoMultiBaseInt64Args {
	return &TestServiceEchoMultiBaseInt64Args{}
}

func (p *TestServiceEchoMultiBaseInt64Args) InitDefault() {
	*p = TestServiceEchoMultiBaseInt64Args{}
}

func (p *TestServiceEchoMultiBaseInt64Args) GetBaseReq() (v int64) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiBaseInt64Args) GetListReq() (v []int64) {
	return p.ListReq
}

func (p *TestServiceEchoMultiBaseInt64Args) GetMapReq() (v map[int64]int64) {
	return p.MapReq
}
func (p *TestServiceEchoMultiBaseInt64Args) SetBaseReq(val int64) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiBaseInt64Args) SetListReq(val []int64) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiBaseInt64Args) SetMapReq(val map[int64]int64) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiBaseInt64Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseInt64Args(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseInt64Args) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiBaseInt64Result struct {
	Success *EchoMultiInt64Response `thrift:"success,0,optional" frugal:"0,optional,EchoMultiInt64Response" json:"success,omitempty"`
}

func NewTestServiceEchoMultiBaseInt64Result() *TestServiceEchoMultiBaseInt64Result {
	return &TestServiceEchoMultiBaseInt64Result{}
}

func (p *TestServiceEchoMultiBaseInt64Result) InitDefault() {
	*p = TestServiceEchoMultiBaseInt64Result{}
}

var TestServiceEchoMultiBaseInt64Result_Success_DEFAULT *EchoMultiInt64Response

func (p *TestServiceEchoMultiBaseInt64Result) GetSuccess() (v *EchoMultiInt64Response) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiBaseInt64Result_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiBaseInt64Result) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiInt64Response)
}

func (p *TestServiceEchoMultiBaseInt64Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiBaseInt64Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseInt64Result(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseInt64Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiBaseFloatArgs struct {
	BaseReq float64             `thrift:"baseReq,1" frugal:"1,default,double" json:"baseReq"`
	ListReq []float64           `thrift:"listReq,2" frugal:"2,default,list<double>" json:"listReq"`
	MapReq  map[float64]float64 `thrift:"mapReq,3" frugal:"3,default,map<double:double>" json:"mapReq"`
}

func NewTestServiceEchoMultiBaseFloatArgs() *TestServiceEchoMultiBaseFloatArgs {
	return &TestServiceEchoMultiBaseFloatArgs{}
}

func (p *TestServiceEchoMultiBaseFloatArgs) InitDefault() {
	*p = TestServiceEchoMultiBaseFloatArgs{}
}

func (p *TestServiceEchoMultiBaseFloatArgs) GetBaseReq() (v float64) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiBaseFloatArgs) GetListReq() (v []float64) {
	return p.ListReq
}

func (p *TestServiceEchoMultiBaseFloatArgs) GetMapReq() (v map[float64]float64) {
	return p.MapReq
}
func (p *TestServiceEchoMultiBaseFloatArgs) SetBaseReq(val float64) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiBaseFloatArgs) SetListReq(val []float64) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiBaseFloatArgs) SetMapReq(val map[float64]float64) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiBaseFloatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseFloatArgs(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseFloatArgs) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiBaseFloatResult struct {
	Success *EchoMultiFloatResponse `thrift:"success,0,optional" frugal:"0,optional,EchoMultiFloatResponse" json:"success,omitempty"`
}

func NewTestServiceEchoMultiBaseFloatResult() *TestServiceEchoMultiBaseFloatResult {
	return &TestServiceEchoMultiBaseFloatResult{}
}

func (p *TestServiceEchoMultiBaseFloatResult) InitDefault() {
	*p = TestServiceEchoMultiBaseFloatResult{}
}

var TestServiceEchoMultiBaseFloatResult_Success_DEFAULT *EchoMultiFloatResponse

func (p *TestServiceEchoMultiBaseFloatResult) GetSuccess() (v *EchoMultiFloatResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiBaseFloatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiBaseFloatResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiFloatResponse)
}

func (p *TestServiceEchoMultiBaseFloatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiBaseFloatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseFloatResult(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseFloatResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMultiBaseDoubleArgs struct {
	BaseReq float64             `thrift:"baseReq,1" frugal:"1,default,double" json:"baseReq"`
	ListReq []float64           `thrift:"listReq,2" frugal:"2,default,list<double>" json:"listReq"`
	MapReq  map[float64]float64 `thrift:"mapReq,3" frugal:"3,default,map<double:double>" json:"mapReq"`
}

func NewTestServiceEchoMultiBaseDoubleArgs() *TestServiceEchoMultiBaseDoubleArgs {
	return &TestServiceEchoMultiBaseDoubleArgs{}
}

func (p *TestServiceEchoMultiBaseDoubleArgs) InitDefault() {
	*p = TestServiceEchoMultiBaseDoubleArgs{}
}

func (p *TestServiceEchoMultiBaseDoubleArgs) GetBaseReq() (v float64) {
	return p.BaseReq
}

func (p *TestServiceEchoMultiBaseDoubleArgs) GetListReq() (v []float64) {
	return p.ListReq
}

func (p *TestServiceEchoMultiBaseDoubleArgs) GetMapReq() (v map[float64]float64) {
	return p.MapReq
}
func (p *TestServiceEchoMultiBaseDoubleArgs) SetBaseReq(val float64) {
	p.BaseReq = val
}
func (p *TestServiceEchoMultiBaseDoubleArgs) SetListReq(val []float64) {
	p.ListReq = val
}
func (p *TestServiceEchoMultiBaseDoubleArgs) SetMapReq(val map[float64]float64) {
	p.MapReq = val
}

func (p *TestServiceEchoMultiBaseDoubleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseDoubleArgs(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseDoubleArgs) GetFirstArgument() interface{} {
	return p.BaseReq
}

type TestServiceEchoMultiBaseDoubleResult struct {
	Success *EchoMultiDoubleResponse `thrift:"success,0,optional" frugal:"0,optional,EchoMultiDoubleResponse" json:"success,omitempty"`
}

func NewTestServiceEchoMultiBaseDoubleResult() *TestServiceEchoMultiBaseDoubleResult {
	return &TestServiceEchoMultiBaseDoubleResult{}
}

func (p *TestServiceEchoMultiBaseDoubleResult) InitDefault() {
	*p = TestServiceEchoMultiBaseDoubleResult{}
}

var TestServiceEchoMultiBaseDoubleResult_Success_DEFAULT *EchoMultiDoubleResponse

func (p *TestServiceEchoMultiBaseDoubleResult) GetSuccess() (v *EchoMultiDoubleResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMultiBaseDoubleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoMultiBaseDoubleResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoMultiDoubleResponse)
}

func (p *TestServiceEchoMultiBaseDoubleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMultiBaseDoubleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMultiBaseDoubleResult(%+v)", *p)
}
func (p *TestServiceEchoMultiBaseDoubleResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMethodAArgs struct {
	Req bool `thrift:"req,1" frugal:"1,default,bool" json:"req"`
}

func NewTestServiceEchoMethodAArgs() *TestServiceEchoMethodAArgs {
	return &TestServiceEchoMethodAArgs{}
}

func (p *TestServiceEchoMethodAArgs) InitDefault() {
	*p = TestServiceEchoMethodAArgs{}
}

func (p *TestServiceEchoMethodAArgs) GetReq() (v bool) {
	return p.Req
}
func (p *TestServiceEchoMethodAArgs) SetReq(val bool) {
	p.Req = val
}

func (p *TestServiceEchoMethodAArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMethodAArgs(%+v)", *p)
}
func (p *TestServiceEchoMethodAArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoMethodAResult struct {
	Success *string `thrift:"success,0,optional" frugal:"0,optional,string" json:"success,omitempty"`
}

func NewTestServiceEchoMethodAResult() *TestServiceEchoMethodAResult {
	return &TestServiceEchoMethodAResult{}
}

func (p *TestServiceEchoMethodAResult) InitDefault() {
	*p = TestServiceEchoMethodAResult{}
}

var TestServiceEchoMethodAResult_Success_DEFAULT string

func (p *TestServiceEchoMethodAResult) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMethodAResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoMethodAResult) SetSuccess(x interface{}) {
	p.Success = x.(*string)
}

func (p *TestServiceEchoMethodAResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMethodAResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMethodAResult(%+v)", *p)
}
func (p *TestServiceEchoMethodAResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMethodBArgs struct {
	Req int32 `thrift:"req,1" frugal:"1,default,i32" json:"req"`
}

func NewTestServiceEchoMethodBArgs() *TestServiceEchoMethodBArgs {
	return &TestServiceEchoMethodBArgs{}
}

func (p *TestServiceEchoMethodBArgs) InitDefault() {
	*p = TestServiceEchoMethodBArgs{}
}

func (p *TestServiceEchoMethodBArgs) GetReq() (v int32) {
	return p.Req
}
func (p *TestServiceEchoMethodBArgs) SetReq(val int32) {
	p.Req = val
}

func (p *TestServiceEchoMethodBArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMethodBArgs(%+v)", *p)
}
func (p *TestServiceEchoMethodBArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoMethodBResult struct {
	Success *string `thrift:"success,0,optional" frugal:"0,optional,string" json:"success,omitempty"`
}

func NewTestServiceEchoMethodBResult() *TestServiceEchoMethodBResult {
	return &TestServiceEchoMethodBResult{}
}

func (p *TestServiceEchoMethodBResult) InitDefault() {
	*p = TestServiceEchoMethodBResult{}
}

var TestServiceEchoMethodBResult_Success_DEFAULT string

func (p *TestServiceEchoMethodBResult) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMethodBResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoMethodBResult) SetSuccess(x interface{}) {
	p.Success = x.(*string)
}

func (p *TestServiceEchoMethodBResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMethodBResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMethodBResult(%+v)", *p)
}
func (p *TestServiceEchoMethodBResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMethodCArgs struct {
	Req int32 `thrift:"req,1" frugal:"1,default,i32" json:"req"`
}

func NewTestServiceEchoMethodCArgs() *TestServiceEchoMethodCArgs {
	return &TestServiceEchoMethodCArgs{}
}

func (p *TestServiceEchoMethodCArgs) InitDefault() {
	*p = TestServiceEchoMethodCArgs{}
}

func (p *TestServiceEchoMethodCArgs) GetReq() (v int32) {
	return p.Req
}
func (p *TestServiceEchoMethodCArgs) SetReq(val int32) {
	p.Req = val
}

func (p *TestServiceEchoMethodCArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMethodCArgs(%+v)", *p)
}
func (p *TestServiceEchoMethodCArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoMethodCResult struct {
	Success *string `thrift:"success,0,optional" frugal:"0,optional,string" json:"success,omitempty"`
}

func NewTestServiceEchoMethodCResult() *TestServiceEchoMethodCResult {
	return &TestServiceEchoMethodCResult{}
}

func (p *TestServiceEchoMethodCResult) InitDefault() {
	*p = TestServiceEchoMethodCResult{}
}

var TestServiceEchoMethodCResult_Success_DEFAULT string

func (p *TestServiceEchoMethodCResult) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMethodCResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoMethodCResult) SetSuccess(x interface{}) {
	p.Success = x.(*string)
}

func (p *TestServiceEchoMethodCResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMethodCResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMethodCResult(%+v)", *p)
}
func (p *TestServiceEchoMethodCResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoMethodDArgs struct {
	Req1 bool  `thrift:"req1,1" frugal:"1,default,bool" json:"req1"`
	Req2 int32 `thrift:"req2,2" frugal:"2,default,i32" json:"req2"`
}

func NewTestServiceEchoMethodDArgs() *TestServiceEchoMethodDArgs {
	return &TestServiceEchoMethodDArgs{}
}

func (p *TestServiceEchoMethodDArgs) InitDefault() {
	*p = TestServiceEchoMethodDArgs{}
}

func (p *TestServiceEchoMethodDArgs) GetReq1() (v bool) {
	return p.Req1
}

func (p *TestServiceEchoMethodDArgs) GetReq2() (v int32) {
	return p.Req2
}
func (p *TestServiceEchoMethodDArgs) SetReq1(val bool) {
	p.Req1 = val
}
func (p *TestServiceEchoMethodDArgs) SetReq2(val int32) {
	p.Req2 = val
}

func (p *TestServiceEchoMethodDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMethodDArgs(%+v)", *p)
}
func (p *TestServiceEchoMethodDArgs) GetFirstArgument() interface{} {
	return p.Req1
}

type TestServiceEchoMethodDResult struct {
	Success *string `thrift:"success,0,optional" frugal:"0,optional,string" json:"success,omitempty"`
}

func NewTestServiceEchoMethodDResult() *TestServiceEchoMethodDResult {
	return &TestServiceEchoMethodDResult{}
}

func (p *TestServiceEchoMethodDResult) InitDefault() {
	*p = TestServiceEchoMethodDResult{}
}

var TestServiceEchoMethodDResult_Success_DEFAULT string

func (p *TestServiceEchoMethodDResult) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoMethodDResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoMethodDResult) SetSuccess(x interface{}) {
	p.Success = x.(*string)
}

func (p *TestServiceEchoMethodDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoMethodDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoMethodDResult(%+v)", *p)
}
func (p *TestServiceEchoMethodDResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalBoolArgs struct {
	Req bool `thrift:"req,1" frugal:"1,default,bool" json:"req"`
}

func NewTestServiceEchoOptionalBoolArgs() *TestServiceEchoOptionalBoolArgs {
	return &TestServiceEchoOptionalBoolArgs{}
}

func (p *TestServiceEchoOptionalBoolArgs) InitDefault() {
	*p = TestServiceEchoOptionalBoolArgs{}
}

func (p *TestServiceEchoOptionalBoolArgs) GetReq() (v bool) {
	return p.Req
}
func (p *TestServiceEchoOptionalBoolArgs) SetReq(val bool) {
	p.Req = val
}

func (p *TestServiceEchoOptionalBoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBoolArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalBoolArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalBoolResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalBoolResult() *TestServiceEchoOptionalBoolResult {
	return &TestServiceEchoOptionalBoolResult{}
}

func (p *TestServiceEchoOptionalBoolResult) InitDefault() {
	*p = TestServiceEchoOptionalBoolResult{}
}

var TestServiceEchoOptionalBoolResult_Success_DEFAULT bool

func (p *TestServiceEchoOptionalBoolResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalBoolResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoOptionalBoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

func (p *TestServiceEchoOptionalBoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalBoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBoolResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalBoolResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalInt32Args struct {
	Req int32 `thrift:"req,1" frugal:"1,default,i32" json:"req"`
}

func NewTestServiceEchoOptionalInt32Args() *TestServiceEchoOptionalInt32Args {
	return &TestServiceEchoOptionalInt32Args{}
}

func (p *TestServiceEchoOptionalInt32Args) InitDefault() {
	*p = TestServiceEchoOptionalInt32Args{}
}

func (p *TestServiceEchoOptionalInt32Args) GetReq() (v int32) {
	return p.Req
}
func (p *TestServiceEchoOptionalInt32Args) SetReq(val int32) {
	p.Req = val
}

func (p *TestServiceEchoOptionalInt32Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalInt32Args(%+v)", *p)
}
func (p *TestServiceEchoOptionalInt32Args) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalInt32Result struct {
	Success *int32 `thrift:"success,0,optional" frugal:"0,optional,i32" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalInt32Result() *TestServiceEchoOptionalInt32Result {
	return &TestServiceEchoOptionalInt32Result{}
}

func (p *TestServiceEchoOptionalInt32Result) InitDefault() {
	*p = TestServiceEchoOptionalInt32Result{}
}

var TestServiceEchoOptionalInt32Result_Success_DEFAULT int32

func (p *TestServiceEchoOptionalInt32Result) GetSuccess() (v int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalInt32Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoOptionalInt32Result) SetSuccess(x interface{}) {
	p.Success = x.(*int32)
}

func (p *TestServiceEchoOptionalInt32Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalInt32Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalInt32Result(%+v)", *p)
}
func (p *TestServiceEchoOptionalInt32Result) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalStringArgs struct {
	Req string `thrift:"req,1" frugal:"1,default,string" json:"req"`
}

func NewTestServiceEchoOptionalStringArgs() *TestServiceEchoOptionalStringArgs {
	return &TestServiceEchoOptionalStringArgs{}
}

func (p *TestServiceEchoOptionalStringArgs) InitDefault() {
	*p = TestServiceEchoOptionalStringArgs{}
}

func (p *TestServiceEchoOptionalStringArgs) GetReq() (v string) {
	return p.Req
}
func (p *TestServiceEchoOptionalStringArgs) SetReq(val string) {
	p.Req = val
}

func (p *TestServiceEchoOptionalStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalStringArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalStringArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalStringResult struct {
	Success *string `thrift:"success,0,optional" frugal:"0,optional,string" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalStringResult() *TestServiceEchoOptionalStringResult {
	return &TestServiceEchoOptionalStringResult{}
}

func (p *TestServiceEchoOptionalStringResult) InitDefault() {
	*p = TestServiceEchoOptionalStringResult{}
}

var TestServiceEchoOptionalStringResult_Success_DEFAULT string

func (p *TestServiceEchoOptionalStringResult) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalStringResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoOptionalStringResult) SetSuccess(x interface{}) {
	p.Success = x.(*string)
}

func (p *TestServiceEchoOptionalStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalStringResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalStringResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalBoolListArgs struct {
	Req []bool `thrift:"req,1" frugal:"1,default,list<bool>" json:"req"`
}

func NewTestServiceEchoOptionalBoolListArgs() *TestServiceEchoOptionalBoolListArgs {
	return &TestServiceEchoOptionalBoolListArgs{}
}

func (p *TestServiceEchoOptionalBoolListArgs) InitDefault() {
	*p = TestServiceEchoOptionalBoolListArgs{}
}

func (p *TestServiceEchoOptionalBoolListArgs) GetReq() (v []bool) {
	return p.Req
}
func (p *TestServiceEchoOptionalBoolListArgs) SetReq(val []bool) {
	p.Req = val
}

func (p *TestServiceEchoOptionalBoolListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBoolListArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalBoolListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalBoolListResult struct {
	Success []bool `thrift:"success,0,optional" frugal:"0,optional,list<bool>" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalBoolListResult() *TestServiceEchoOptionalBoolListResult {
	return &TestServiceEchoOptionalBoolListResult{}
}

func (p *TestServiceEchoOptionalBoolListResult) InitDefault() {
	*p = TestServiceEchoOptionalBoolListResult{}
}

var TestServiceEchoOptionalBoolListResult_Success_DEFAULT []bool

func (p *TestServiceEchoOptionalBoolListResult) GetSuccess() (v []bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalBoolListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalBoolListResult) SetSuccess(x interface{}) {
	p.Success = x.([]bool)
}

func (p *TestServiceEchoOptionalBoolListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalBoolListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBoolListResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalBoolListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalInt32ListArgs struct {
	Req []int32 `thrift:"req,1" frugal:"1,default,list<i32>" json:"req"`
}

func NewTestServiceEchoOptionalInt32ListArgs() *TestServiceEchoOptionalInt32ListArgs {
	return &TestServiceEchoOptionalInt32ListArgs{}
}

func (p *TestServiceEchoOptionalInt32ListArgs) InitDefault() {
	*p = TestServiceEchoOptionalInt32ListArgs{}
}

func (p *TestServiceEchoOptionalInt32ListArgs) GetReq() (v []int32) {
	return p.Req
}
func (p *TestServiceEchoOptionalInt32ListArgs) SetReq(val []int32) {
	p.Req = val
}

func (p *TestServiceEchoOptionalInt32ListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalInt32ListArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalInt32ListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalInt32ListResult struct {
	Success []int32 `thrift:"success,0,optional" frugal:"0,optional,list<i32>" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalInt32ListResult() *TestServiceEchoOptionalInt32ListResult {
	return &TestServiceEchoOptionalInt32ListResult{}
}

func (p *TestServiceEchoOptionalInt32ListResult) InitDefault() {
	*p = TestServiceEchoOptionalInt32ListResult{}
}

var TestServiceEchoOptionalInt32ListResult_Success_DEFAULT []int32

func (p *TestServiceEchoOptionalInt32ListResult) GetSuccess() (v []int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalInt32ListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalInt32ListResult) SetSuccess(x interface{}) {
	p.Success = x.([]int32)
}

func (p *TestServiceEchoOptionalInt32ListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalInt32ListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalInt32ListResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalInt32ListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalStringListArgs struct {
	Req []string `thrift:"req,1" frugal:"1,default,list<string>" json:"req"`
}

func NewTestServiceEchoOptionalStringListArgs() *TestServiceEchoOptionalStringListArgs {
	return &TestServiceEchoOptionalStringListArgs{}
}

func (p *TestServiceEchoOptionalStringListArgs) InitDefault() {
	*p = TestServiceEchoOptionalStringListArgs{}
}

func (p *TestServiceEchoOptionalStringListArgs) GetReq() (v []string) {
	return p.Req
}
func (p *TestServiceEchoOptionalStringListArgs) SetReq(val []string) {
	p.Req = val
}

func (p *TestServiceEchoOptionalStringListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalStringListArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalStringListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalStringListResult struct {
	Success []string `thrift:"success,0,optional" frugal:"0,optional,list<string>" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalStringListResult() *TestServiceEchoOptionalStringListResult {
	return &TestServiceEchoOptionalStringListResult{}
}

func (p *TestServiceEchoOptionalStringListResult) InitDefault() {
	*p = TestServiceEchoOptionalStringListResult{}
}

var TestServiceEchoOptionalStringListResult_Success_DEFAULT []string

func (p *TestServiceEchoOptionalStringListResult) GetSuccess() (v []string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalStringListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalStringListResult) SetSuccess(x interface{}) {
	p.Success = x.([]string)
}

func (p *TestServiceEchoOptionalStringListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalStringListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalStringListResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalStringListResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalBool2BoolMapArgs struct {
	Req map[bool]bool `thrift:"req,1" frugal:"1,default,map<bool:bool>" json:"req"`
}

func NewTestServiceEchoOptionalBool2BoolMapArgs() *TestServiceEchoOptionalBool2BoolMapArgs {
	return &TestServiceEchoOptionalBool2BoolMapArgs{}
}

func (p *TestServiceEchoOptionalBool2BoolMapArgs) InitDefault() {
	*p = TestServiceEchoOptionalBool2BoolMapArgs{}
}

func (p *TestServiceEchoOptionalBool2BoolMapArgs) GetReq() (v map[bool]bool) {
	return p.Req
}
func (p *TestServiceEchoOptionalBool2BoolMapArgs) SetReq(val map[bool]bool) {
	p.Req = val
}

func (p *TestServiceEchoOptionalBool2BoolMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBool2BoolMapArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalBool2BoolMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalBool2BoolMapResult struct {
	Success map[bool]bool `thrift:"success,0,optional" frugal:"0,optional,map<bool:bool>" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalBool2BoolMapResult() *TestServiceEchoOptionalBool2BoolMapResult {
	return &TestServiceEchoOptionalBool2BoolMapResult{}
}

func (p *TestServiceEchoOptionalBool2BoolMapResult) InitDefault() {
	*p = TestServiceEchoOptionalBool2BoolMapResult{}
}

var TestServiceEchoOptionalBool2BoolMapResult_Success_DEFAULT map[bool]bool

func (p *TestServiceEchoOptionalBool2BoolMapResult) GetSuccess() (v map[bool]bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalBool2BoolMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalBool2BoolMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]bool)
}

func (p *TestServiceEchoOptionalBool2BoolMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalBool2BoolMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBool2BoolMapResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalBool2BoolMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalBool2Int32MapArgs struct {
	Req map[bool]int32 `thrift:"req,1" frugal:"1,default,map<bool:i32>" json:"req"`
}

func NewTestServiceEchoOptionalBool2Int32MapArgs() *TestServiceEchoOptionalBool2Int32MapArgs {
	return &TestServiceEchoOptionalBool2Int32MapArgs{}
}

func (p *TestServiceEchoOptionalBool2Int32MapArgs) InitDefault() {
	*p = TestServiceEchoOptionalBool2Int32MapArgs{}
}

func (p *TestServiceEchoOptionalBool2Int32MapArgs) GetReq() (v map[bool]int32) {
	return p.Req
}
func (p *TestServiceEchoOptionalBool2Int32MapArgs) SetReq(val map[bool]int32) {
	p.Req = val
}

func (p *TestServiceEchoOptionalBool2Int32MapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBool2Int32MapArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalBool2Int32MapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalBool2Int32MapResult struct {
	Success map[bool]int32 `thrift:"success,0,optional" frugal:"0,optional,map<bool:i32>" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalBool2Int32MapResult() *TestServiceEchoOptionalBool2Int32MapResult {
	return &TestServiceEchoOptionalBool2Int32MapResult{}
}

func (p *TestServiceEchoOptionalBool2Int32MapResult) InitDefault() {
	*p = TestServiceEchoOptionalBool2Int32MapResult{}
}

var TestServiceEchoOptionalBool2Int32MapResult_Success_DEFAULT map[bool]int32

func (p *TestServiceEchoOptionalBool2Int32MapResult) GetSuccess() (v map[bool]int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalBool2Int32MapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalBool2Int32MapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]int32)
}

func (p *TestServiceEchoOptionalBool2Int32MapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalBool2Int32MapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBool2Int32MapResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalBool2Int32MapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalBool2StringMapArgs struct {
	Req map[bool]string `thrift:"req,1" frugal:"1,default,map<bool:string>" json:"req"`
}

func NewTestServiceEchoOptionalBool2StringMapArgs() *TestServiceEchoOptionalBool2StringMapArgs {
	return &TestServiceEchoOptionalBool2StringMapArgs{}
}

func (p *TestServiceEchoOptionalBool2StringMapArgs) InitDefault() {
	*p = TestServiceEchoOptionalBool2StringMapArgs{}
}

func (p *TestServiceEchoOptionalBool2StringMapArgs) GetReq() (v map[bool]string) {
	return p.Req
}
func (p *TestServiceEchoOptionalBool2StringMapArgs) SetReq(val map[bool]string) {
	p.Req = val
}

func (p *TestServiceEchoOptionalBool2StringMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBool2StringMapArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalBool2StringMapArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalBool2StringMapResult struct {
	Success map[bool]string `thrift:"success,0,optional" frugal:"0,optional,map<bool:string>" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalBool2StringMapResult() *TestServiceEchoOptionalBool2StringMapResult {
	return &TestServiceEchoOptionalBool2StringMapResult{}
}

func (p *TestServiceEchoOptionalBool2StringMapResult) InitDefault() {
	*p = TestServiceEchoOptionalBool2StringMapResult{}
}

var TestServiceEchoOptionalBool2StringMapResult_Success_DEFAULT map[bool]string

func (p *TestServiceEchoOptionalBool2StringMapResult) GetSuccess() (v map[bool]string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalBool2StringMapResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalBool2StringMapResult) SetSuccess(x interface{}) {
	p.Success = x.(map[bool]string)
}

func (p *TestServiceEchoOptionalBool2StringMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalBool2StringMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalBool2StringMapResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalBool2StringMapResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalStructArgs struct {
	Req *EchoOptionalStructRequest `thrift:"req,1" frugal:"1,default,EchoOptionalStructRequest" json:"req"`
}

func NewTestServiceEchoOptionalStructArgs() *TestServiceEchoOptionalStructArgs {
	return &TestServiceEchoOptionalStructArgs{}
}

func (p *TestServiceEchoOptionalStructArgs) InitDefault() {
	*p = TestServiceEchoOptionalStructArgs{}
}

var TestServiceEchoOptionalStructArgs_Req_DEFAULT *EchoOptionalStructRequest

func (p *TestServiceEchoOptionalStructArgs) GetReq() (v *EchoOptionalStructRequest) {
	if !p.IsSetReq() {
		return TestServiceEchoOptionalStructArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceEchoOptionalStructArgs) SetReq(val *EchoOptionalStructRequest) {
	p.Req = val
}

func (p *TestServiceEchoOptionalStructArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceEchoOptionalStructArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalStructArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalStructArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalStructResult struct {
	Success *EchoOptionalStructResponse `thrift:"success,0,optional" frugal:"0,optional,EchoOptionalStructResponse" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalStructResult() *TestServiceEchoOptionalStructResult {
	return &TestServiceEchoOptionalStructResult{}
}

func (p *TestServiceEchoOptionalStructResult) InitDefault() {
	*p = TestServiceEchoOptionalStructResult{}
}

var TestServiceEchoOptionalStructResult_Success_DEFAULT *EchoOptionalStructResponse

func (p *TestServiceEchoOptionalStructResult) GetSuccess() (v *EchoOptionalStructResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalStructResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalStructResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoOptionalStructResponse)
}

func (p *TestServiceEchoOptionalStructResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalStructResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalStructResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalStructResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalMultiBoolRequestArgs struct {
	Req *EchoOptionalMultiBoolRequest `thrift:"req,1" frugal:"1,default,EchoOptionalMultiBoolRequest" json:"req"`
}

func NewTestServiceEchoOptionalMultiBoolRequestArgs() *TestServiceEchoOptionalMultiBoolRequestArgs {
	return &TestServiceEchoOptionalMultiBoolRequestArgs{}
}

func (p *TestServiceEchoOptionalMultiBoolRequestArgs) InitDefault() {
	*p = TestServiceEchoOptionalMultiBoolRequestArgs{}
}

var TestServiceEchoOptionalMultiBoolRequestArgs_Req_DEFAULT *EchoOptionalMultiBoolRequest

func (p *TestServiceEchoOptionalMultiBoolRequestArgs) GetReq() (v *EchoOptionalMultiBoolRequest) {
	if !p.IsSetReq() {
		return TestServiceEchoOptionalMultiBoolRequestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceEchoOptionalMultiBoolRequestArgs) SetReq(val *EchoOptionalMultiBoolRequest) {
	p.Req = val
}

func (p *TestServiceEchoOptionalMultiBoolRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceEchoOptionalMultiBoolRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiBoolRequestArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiBoolRequestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalMultiBoolRequestResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalMultiBoolRequestResult() *TestServiceEchoOptionalMultiBoolRequestResult {
	return &TestServiceEchoOptionalMultiBoolRequestResult{}
}

func (p *TestServiceEchoOptionalMultiBoolRequestResult) InitDefault() {
	*p = TestServiceEchoOptionalMultiBoolRequestResult{}
}

var TestServiceEchoOptionalMultiBoolRequestResult_Success_DEFAULT bool

func (p *TestServiceEchoOptionalMultiBoolRequestResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalMultiBoolRequestResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoOptionalMultiBoolRequestResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

func (p *TestServiceEchoOptionalMultiBoolRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalMultiBoolRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiBoolRequestResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiBoolRequestResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalMultiInt32RequestArgs struct {
	Req *EchoOptionalMultiInt32Request `thrift:"req,1" frugal:"1,default,EchoOptionalMultiInt32Request" json:"req"`
}

func NewTestServiceEchoOptionalMultiInt32RequestArgs() *TestServiceEchoOptionalMultiInt32RequestArgs {
	return &TestServiceEchoOptionalMultiInt32RequestArgs{}
}

func (p *TestServiceEchoOptionalMultiInt32RequestArgs) InitDefault() {
	*p = TestServiceEchoOptionalMultiInt32RequestArgs{}
}

var TestServiceEchoOptionalMultiInt32RequestArgs_Req_DEFAULT *EchoOptionalMultiInt32Request

func (p *TestServiceEchoOptionalMultiInt32RequestArgs) GetReq() (v *EchoOptionalMultiInt32Request) {
	if !p.IsSetReq() {
		return TestServiceEchoOptionalMultiInt32RequestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceEchoOptionalMultiInt32RequestArgs) SetReq(val *EchoOptionalMultiInt32Request) {
	p.Req = val
}

func (p *TestServiceEchoOptionalMultiInt32RequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceEchoOptionalMultiInt32RequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiInt32RequestArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiInt32RequestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalMultiInt32RequestResult struct {
	Success *int32 `thrift:"success,0,optional" frugal:"0,optional,i32" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalMultiInt32RequestResult() *TestServiceEchoOptionalMultiInt32RequestResult {
	return &TestServiceEchoOptionalMultiInt32RequestResult{}
}

func (p *TestServiceEchoOptionalMultiInt32RequestResult) InitDefault() {
	*p = TestServiceEchoOptionalMultiInt32RequestResult{}
}

var TestServiceEchoOptionalMultiInt32RequestResult_Success_DEFAULT int32

func (p *TestServiceEchoOptionalMultiInt32RequestResult) GetSuccess() (v int32) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalMultiInt32RequestResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoOptionalMultiInt32RequestResult) SetSuccess(x interface{}) {
	p.Success = x.(*int32)
}

func (p *TestServiceEchoOptionalMultiInt32RequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalMultiInt32RequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiInt32RequestResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiInt32RequestResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalMultiStringRequestArgs struct {
	Req *EchoOptionalMultiStringRequest `thrift:"req,1" frugal:"1,default,EchoOptionalMultiStringRequest" json:"req"`
}

func NewTestServiceEchoOptionalMultiStringRequestArgs() *TestServiceEchoOptionalMultiStringRequestArgs {
	return &TestServiceEchoOptionalMultiStringRequestArgs{}
}

func (p *TestServiceEchoOptionalMultiStringRequestArgs) InitDefault() {
	*p = TestServiceEchoOptionalMultiStringRequestArgs{}
}

var TestServiceEchoOptionalMultiStringRequestArgs_Req_DEFAULT *EchoOptionalMultiStringRequest

func (p *TestServiceEchoOptionalMultiStringRequestArgs) GetReq() (v *EchoOptionalMultiStringRequest) {
	if !p.IsSetReq() {
		return TestServiceEchoOptionalMultiStringRequestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceEchoOptionalMultiStringRequestArgs) SetReq(val *EchoOptionalMultiStringRequest) {
	p.Req = val
}

func (p *TestServiceEchoOptionalMultiStringRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceEchoOptionalMultiStringRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiStringRequestArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiStringRequestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalMultiStringRequestResult struct {
	Success *string `thrift:"success,0,optional" frugal:"0,optional,string" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalMultiStringRequestResult() *TestServiceEchoOptionalMultiStringRequestResult {
	return &TestServiceEchoOptionalMultiStringRequestResult{}
}

func (p *TestServiceEchoOptionalMultiStringRequestResult) InitDefault() {
	*p = TestServiceEchoOptionalMultiStringRequestResult{}
}

var TestServiceEchoOptionalMultiStringRequestResult_Success_DEFAULT string

func (p *TestServiceEchoOptionalMultiStringRequestResult) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalMultiStringRequestResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoOptionalMultiStringRequestResult) SetSuccess(x interface{}) {
	p.Success = x.(*string)
}

func (p *TestServiceEchoOptionalMultiStringRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalMultiStringRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiStringRequestResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiStringRequestResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalMultiBoolResponseArgs struct {
	Req bool `thrift:"req,1" frugal:"1,default,bool" json:"req"`
}

func NewTestServiceEchoOptionalMultiBoolResponseArgs() *TestServiceEchoOptionalMultiBoolResponseArgs {
	return &TestServiceEchoOptionalMultiBoolResponseArgs{}
}

func (p *TestServiceEchoOptionalMultiBoolResponseArgs) InitDefault() {
	*p = TestServiceEchoOptionalMultiBoolResponseArgs{}
}

func (p *TestServiceEchoOptionalMultiBoolResponseArgs) GetReq() (v bool) {
	return p.Req
}
func (p *TestServiceEchoOptionalMultiBoolResponseArgs) SetReq(val bool) {
	p.Req = val
}

func (p *TestServiceEchoOptionalMultiBoolResponseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiBoolResponseArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiBoolResponseArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalMultiBoolResponseResult struct {
	Success *EchoOptionalMultiBoolResponse `thrift:"success,0,optional" frugal:"0,optional,EchoOptionalMultiBoolResponse" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalMultiBoolResponseResult() *TestServiceEchoOptionalMultiBoolResponseResult {
	return &TestServiceEchoOptionalMultiBoolResponseResult{}
}

func (p *TestServiceEchoOptionalMultiBoolResponseResult) InitDefault() {
	*p = TestServiceEchoOptionalMultiBoolResponseResult{}
}

var TestServiceEchoOptionalMultiBoolResponseResult_Success_DEFAULT *EchoOptionalMultiBoolResponse

func (p *TestServiceEchoOptionalMultiBoolResponseResult) GetSuccess() (v *EchoOptionalMultiBoolResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalMultiBoolResponseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalMultiBoolResponseResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoOptionalMultiBoolResponse)
}

func (p *TestServiceEchoOptionalMultiBoolResponseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalMultiBoolResponseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiBoolResponseResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiBoolResponseResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalMultiInt32ResponseArgs struct {
	Req int32 `thrift:"req,1" frugal:"1,default,i32" json:"req"`
}

func NewTestServiceEchoOptionalMultiInt32ResponseArgs() *TestServiceEchoOptionalMultiInt32ResponseArgs {
	return &TestServiceEchoOptionalMultiInt32ResponseArgs{}
}

func (p *TestServiceEchoOptionalMultiInt32ResponseArgs) InitDefault() {
	*p = TestServiceEchoOptionalMultiInt32ResponseArgs{}
}

func (p *TestServiceEchoOptionalMultiInt32ResponseArgs) GetReq() (v int32) {
	return p.Req
}
func (p *TestServiceEchoOptionalMultiInt32ResponseArgs) SetReq(val int32) {
	p.Req = val
}

func (p *TestServiceEchoOptionalMultiInt32ResponseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiInt32ResponseArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiInt32ResponseArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalMultiInt32ResponseResult struct {
	Success *EchoOptionalMultiInt32Response `thrift:"success,0,optional" frugal:"0,optional,EchoOptionalMultiInt32Response" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalMultiInt32ResponseResult() *TestServiceEchoOptionalMultiInt32ResponseResult {
	return &TestServiceEchoOptionalMultiInt32ResponseResult{}
}

func (p *TestServiceEchoOptionalMultiInt32ResponseResult) InitDefault() {
	*p = TestServiceEchoOptionalMultiInt32ResponseResult{}
}

var TestServiceEchoOptionalMultiInt32ResponseResult_Success_DEFAULT *EchoOptionalMultiInt32Response

func (p *TestServiceEchoOptionalMultiInt32ResponseResult) GetSuccess() (v *EchoOptionalMultiInt32Response) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalMultiInt32ResponseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalMultiInt32ResponseResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoOptionalMultiInt32Response)
}

func (p *TestServiceEchoOptionalMultiInt32ResponseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalMultiInt32ResponseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiInt32ResponseResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiInt32ResponseResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoOptionalMultiStringResponseArgs struct {
	Req string `thrift:"req,1" frugal:"1,default,string" json:"req"`
}

func NewTestServiceEchoOptionalMultiStringResponseArgs() *TestServiceEchoOptionalMultiStringResponseArgs {
	return &TestServiceEchoOptionalMultiStringResponseArgs{}
}

func (p *TestServiceEchoOptionalMultiStringResponseArgs) InitDefault() {
	*p = TestServiceEchoOptionalMultiStringResponseArgs{}
}

func (p *TestServiceEchoOptionalMultiStringResponseArgs) GetReq() (v string) {
	return p.Req
}
func (p *TestServiceEchoOptionalMultiStringResponseArgs) SetReq(val string) {
	p.Req = val
}

func (p *TestServiceEchoOptionalMultiStringResponseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiStringResponseArgs(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiStringResponseArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoOptionalMultiStringResponseResult struct {
	Success *EchoOptionalMultiStringResponse `thrift:"success,0,optional" frugal:"0,optional,EchoOptionalMultiStringResponse" json:"success,omitempty"`
}

func NewTestServiceEchoOptionalMultiStringResponseResult() *TestServiceEchoOptionalMultiStringResponseResult {
	return &TestServiceEchoOptionalMultiStringResponseResult{}
}

func (p *TestServiceEchoOptionalMultiStringResponseResult) InitDefault() {
	*p = TestServiceEchoOptionalMultiStringResponseResult{}
}

var TestServiceEchoOptionalMultiStringResponseResult_Success_DEFAULT *EchoOptionalMultiStringResponse

func (p *TestServiceEchoOptionalMultiStringResponseResult) GetSuccess() (v *EchoOptionalMultiStringResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoOptionalMultiStringResponseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoOptionalMultiStringResponseResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoOptionalMultiStringResponse)
}

func (p *TestServiceEchoOptionalMultiStringResponseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoOptionalMultiStringResponseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoOptionalMultiStringResponseResult(%+v)", *p)
}
func (p *TestServiceEchoOptionalMultiStringResponseResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoExceptionArgs struct {
	Req bool `thrift:"req,1" frugal:"1,default,bool" json:"req"`
}

func NewTestServiceEchoExceptionArgs() *TestServiceEchoExceptionArgs {
	return &TestServiceEchoExceptionArgs{}
}

func (p *TestServiceEchoExceptionArgs) InitDefault() {
	*p = TestServiceEchoExceptionArgs{}
}

func (p *TestServiceEchoExceptionArgs) GetReq() (v bool) {
	return p.Req
}
func (p *TestServiceEchoExceptionArgs) SetReq(val bool) {
	p.Req = val
}

func (p *TestServiceEchoExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoExceptionArgs(%+v)", *p)
}
func (p *TestServiceEchoExceptionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoExceptionResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewTestServiceEchoExceptionResult() *TestServiceEchoExceptionResult {
	return &TestServiceEchoExceptionResult{}
}

func (p *TestServiceEchoExceptionResult) InitDefault() {
	*p = TestServiceEchoExceptionResult{}
}

var TestServiceEchoExceptionResult_Success_DEFAULT bool

func (p *TestServiceEchoExceptionResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoExceptionResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoExceptionResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

func (p *TestServiceEchoExceptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoExceptionResult(%+v)", *p)
}
func (p *TestServiceEchoExceptionResult) GetResult() interface{} {
	return p.Success
}

type TestServiceEchoCustomizedExceptionArgs struct {
	Req bool `thrift:"req,1" frugal:"1,default,bool" json:"req"`
}

func NewTestServiceEchoCustomizedExceptionArgs() *TestServiceEchoCustomizedExceptionArgs {
	return &TestServiceEchoCustomizedExceptionArgs{}
}

func (p *TestServiceEchoCustomizedExceptionArgs) InitDefault() {
	*p = TestServiceEchoCustomizedExceptionArgs{}
}

func (p *TestServiceEchoCustomizedExceptionArgs) GetReq() (v bool) {
	return p.Req
}
func (p *TestServiceEchoCustomizedExceptionArgs) SetReq(val bool) {
	p.Req = val
}

func (p *TestServiceEchoCustomizedExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoCustomizedExceptionArgs(%+v)", *p)
}
func (p *TestServiceEchoCustomizedExceptionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestServiceEchoCustomizedExceptionResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewTestServiceEchoCustomizedExceptionResult() *TestServiceEchoCustomizedExceptionResult {
	return &TestServiceEchoCustomizedExceptionResult{}
}

func (p *TestServiceEchoCustomizedExceptionResult) InitDefault() {
	*p = TestServiceEchoCustomizedExceptionResult{}
}

var TestServiceEchoCustomizedExceptionResult_Success_DEFAULT bool

func (p *TestServiceEchoCustomizedExceptionResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return TestServiceEchoCustomizedExceptionResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestServiceEchoCustomizedExceptionResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

func (p *TestServiceEchoCustomizedExceptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoCustomizedExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoCustomizedExceptionResult(%+v)", *p)
}
func (p *TestServiceEchoCustomizedExceptionResult) GetResult() interface{} {
	return p.Success
}
