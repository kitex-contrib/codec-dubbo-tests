// Code generated by thriftgo (0.3.2). DO NOT EDIT.

package echo

import (
	"context"
	"fmt"
	"github.com/kitex-contrib/codec-dubbo-tests/code/kitex/kitex_gen/java"
)

type EchoRequest struct {
	Int32 int32 `thrift:"int32,1,required" frugal:"1,required,i32" json:"int32"`
}

func NewEchoRequest() *EchoRequest {
	return &EchoRequest{}
}

func (p *EchoRequest) InitDefault() {
	*p = EchoRequest{}
}

func (p *EchoRequest) GetInt32() (v int32) {
	return p.Int32
}
func (p *EchoRequest) SetInt32(val int32) {
	p.Int32 = val
}

func (p *EchoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoRequest(%+v)", *p)
}

type EchoResponse struct {
	Int32 int32 `thrift:"int32,1,required" frugal:"1,required,i32" json:"int32"`
}

func NewEchoResponse() *EchoResponse {
	return &EchoResponse{}
}

func (p *EchoResponse) InitDefault() {
	*p = EchoResponse{}
}

func (p *EchoResponse) GetInt32() (v int32) {
	return p.Int32
}
func (p *EchoResponse) SetInt32(val int32) {
	p.Int32 = val
}

func (p *EchoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoResponse(%+v)", *p)
}

type EchoMultiBoolResponse struct {
	BaseResp bool          `thrift:"baseResp,1,required" frugal:"1,required,bool" json:"baseResp"`
	ListResp []bool        `thrift:"listResp,2,required" frugal:"2,required,list<bool>" json:"listResp"`
	MapResp  map[bool]bool `thrift:"mapResp,3,required" frugal:"3,required,map<bool:bool>" json:"mapResp"`
}

func NewEchoMultiBoolResponse() *EchoMultiBoolResponse {
	return &EchoMultiBoolResponse{}
}

func (p *EchoMultiBoolResponse) InitDefault() {
	*p = EchoMultiBoolResponse{}
}

func (p *EchoMultiBoolResponse) GetBaseResp() (v bool) {
	return p.BaseResp
}

func (p *EchoMultiBoolResponse) GetListResp() (v []bool) {
	return p.ListResp
}

func (p *EchoMultiBoolResponse) GetMapResp() (v map[bool]bool) {
	return p.MapResp
}
func (p *EchoMultiBoolResponse) SetBaseResp(val bool) {
	p.BaseResp = val
}
func (p *EchoMultiBoolResponse) SetListResp(val []bool) {
	p.ListResp = val
}
func (p *EchoMultiBoolResponse) SetMapResp(val map[bool]bool) {
	p.MapResp = val
}

func (p *EchoMultiBoolResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoMultiBoolResponse(%+v)", *p)
}

type EchoMultiByteResponse struct {
	BaseResp int8          `thrift:"baseResp,1,required" frugal:"1,required,byte" json:"baseResp"`
	ListResp []int8        `thrift:"listResp,2,required" frugal:"2,required,list<byte>" json:"listResp"`
	MapResp  map[int8]int8 `thrift:"mapResp,3,required" frugal:"3,required,map<byte:byte>" json:"mapResp"`
}

func NewEchoMultiByteResponse() *EchoMultiByteResponse {
	return &EchoMultiByteResponse{}
}

func (p *EchoMultiByteResponse) InitDefault() {
	*p = EchoMultiByteResponse{}
}

func (p *EchoMultiByteResponse) GetBaseResp() (v int8) {
	return p.BaseResp
}

func (p *EchoMultiByteResponse) GetListResp() (v []int8) {
	return p.ListResp
}

func (p *EchoMultiByteResponse) GetMapResp() (v map[int8]int8) {
	return p.MapResp
}
func (p *EchoMultiByteResponse) SetBaseResp(val int8) {
	p.BaseResp = val
}
func (p *EchoMultiByteResponse) SetListResp(val []int8) {
	p.ListResp = val
}
func (p *EchoMultiByteResponse) SetMapResp(val map[int8]int8) {
	p.MapResp = val
}

func (p *EchoMultiByteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoMultiByteResponse(%+v)", *p)
}

type EchoMultiInt16Response struct {
	BaseResp int16           `thrift:"baseResp,1,required" frugal:"1,required,i16" json:"baseResp"`
	ListResp []int16         `thrift:"listResp,2,required" frugal:"2,required,list<i16>" json:"listResp"`
	MapResp  map[int16]int16 `thrift:"mapResp,3,required" frugal:"3,required,map<i16:i16>" json:"mapResp"`
}

func NewEchoMultiInt16Response() *EchoMultiInt16Response {
	return &EchoMultiInt16Response{}
}

func (p *EchoMultiInt16Response) InitDefault() {
	*p = EchoMultiInt16Response{}
}

func (p *EchoMultiInt16Response) GetBaseResp() (v int16) {
	return p.BaseResp
}

func (p *EchoMultiInt16Response) GetListResp() (v []int16) {
	return p.ListResp
}

func (p *EchoMultiInt16Response) GetMapResp() (v map[int16]int16) {
	return p.MapResp
}
func (p *EchoMultiInt16Response) SetBaseResp(val int16) {
	p.BaseResp = val
}
func (p *EchoMultiInt16Response) SetListResp(val []int16) {
	p.ListResp = val
}
func (p *EchoMultiInt16Response) SetMapResp(val map[int16]int16) {
	p.MapResp = val
}

func (p *EchoMultiInt16Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoMultiInt16Response(%+v)", *p)
}

type EchoMultiInt32Response struct {
	BaseResp int32           `thrift:"baseResp,1,required" frugal:"1,required,i32" json:"baseResp"`
	ListResp []int32         `thrift:"listResp,2,required" frugal:"2,required,list<i32>" json:"listResp"`
	MapResp  map[int32]int32 `thrift:"mapResp,3,required" frugal:"3,required,map<i32:i32>" json:"mapResp"`
}

func NewEchoMultiInt32Response() *EchoMultiInt32Response {
	return &EchoMultiInt32Response{}
}

func (p *EchoMultiInt32Response) InitDefault() {
	*p = EchoMultiInt32Response{}
}

func (p *EchoMultiInt32Response) GetBaseResp() (v int32) {
	return p.BaseResp
}

func (p *EchoMultiInt32Response) GetListResp() (v []int32) {
	return p.ListResp
}

func (p *EchoMultiInt32Response) GetMapResp() (v map[int32]int32) {
	return p.MapResp
}
func (p *EchoMultiInt32Response) SetBaseResp(val int32) {
	p.BaseResp = val
}
func (p *EchoMultiInt32Response) SetListResp(val []int32) {
	p.ListResp = val
}
func (p *EchoMultiInt32Response) SetMapResp(val map[int32]int32) {
	p.MapResp = val
}

func (p *EchoMultiInt32Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoMultiInt32Response(%+v)", *p)
}

type EchoMultiInt64Response struct {
	BaseResp int64           `thrift:"baseResp,1,required" frugal:"1,required,i64" json:"baseResp"`
	ListResp []int64         `thrift:"listResp,2,required" frugal:"2,required,list<i64>" json:"listResp"`
	MapResp  map[int64]int64 `thrift:"mapResp,3,required" frugal:"3,required,map<i64:i64>" json:"mapResp"`
}

func NewEchoMultiInt64Response() *EchoMultiInt64Response {
	return &EchoMultiInt64Response{}
}

func (p *EchoMultiInt64Response) InitDefault() {
	*p = EchoMultiInt64Response{}
}

func (p *EchoMultiInt64Response) GetBaseResp() (v int64) {
	return p.BaseResp
}

func (p *EchoMultiInt64Response) GetListResp() (v []int64) {
	return p.ListResp
}

func (p *EchoMultiInt64Response) GetMapResp() (v map[int64]int64) {
	return p.MapResp
}
func (p *EchoMultiInt64Response) SetBaseResp(val int64) {
	p.BaseResp = val
}
func (p *EchoMultiInt64Response) SetListResp(val []int64) {
	p.ListResp = val
}
func (p *EchoMultiInt64Response) SetMapResp(val map[int64]int64) {
	p.MapResp = val
}

func (p *EchoMultiInt64Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoMultiInt64Response(%+v)", *p)
}

type EchoMultiFloatResponse struct {
	BaseResp float64             `thrift:"baseResp,1,required" frugal:"1,required,double" json:"baseResp"`
	ListResp []float64           `thrift:"listResp,2,required" frugal:"2,required,list<double>" json:"listResp"`
	MapResp  map[float64]float64 `thrift:"mapResp,3,required" frugal:"3,required,map<double:double>" json:"mapResp"`
}

func NewEchoMultiFloatResponse() *EchoMultiFloatResponse {
	return &EchoMultiFloatResponse{}
}

func (p *EchoMultiFloatResponse) InitDefault() {
	*p = EchoMultiFloatResponse{}
}

func (p *EchoMultiFloatResponse) GetBaseResp() (v float64) {
	return p.BaseResp
}

func (p *EchoMultiFloatResponse) GetListResp() (v []float64) {
	return p.ListResp
}

func (p *EchoMultiFloatResponse) GetMapResp() (v map[float64]float64) {
	return p.MapResp
}
func (p *EchoMultiFloatResponse) SetBaseResp(val float64) {
	p.BaseResp = val
}
func (p *EchoMultiFloatResponse) SetListResp(val []float64) {
	p.ListResp = val
}
func (p *EchoMultiFloatResponse) SetMapResp(val map[float64]float64) {
	p.MapResp = val
}

func (p *EchoMultiFloatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoMultiFloatResponse(%+v)", *p)
}

type EchoMultiDoubleResponse struct {
	BaseResp float64             `thrift:"baseResp,1,required" frugal:"1,required,double" json:"baseResp"`
	ListResp []float64           `thrift:"listResp,2,required" frugal:"2,required,list<double>" json:"listResp"`
	MapResp  map[float64]float64 `thrift:"mapResp,3,required" frugal:"3,required,map<double:double>" json:"mapResp"`
}

func NewEchoMultiDoubleResponse() *EchoMultiDoubleResponse {
	return &EchoMultiDoubleResponse{}
}

func (p *EchoMultiDoubleResponse) InitDefault() {
	*p = EchoMultiDoubleResponse{}
}

func (p *EchoMultiDoubleResponse) GetBaseResp() (v float64) {
	return p.BaseResp
}

func (p *EchoMultiDoubleResponse) GetListResp() (v []float64) {
	return p.ListResp
}

func (p *EchoMultiDoubleResponse) GetMapResp() (v map[float64]float64) {
	return p.MapResp
}
func (p *EchoMultiDoubleResponse) SetBaseResp(val float64) {
	p.BaseResp = val
}
func (p *EchoMultiDoubleResponse) SetListResp(val []float64) {
	p.ListResp = val
}
func (p *EchoMultiDoubleResponse) SetMapResp(val map[float64]float64) {
	p.MapResp = val
}

func (p *EchoMultiDoubleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoMultiDoubleResponse(%+v)", *p)
}

type EchoMultiStringResponse struct {
	BaseResp string            `thrift:"baseResp,1,required" frugal:"1,required,string" json:"baseResp"`
	ListResp []string          `thrift:"listResp,2,required" frugal:"2,required,list<string>" json:"listResp"`
	MapResp  map[string]string `thrift:"mapResp,3,required" frugal:"3,required,map<string:string>" json:"mapResp"`
}

func NewEchoMultiStringResponse() *EchoMultiStringResponse {
	return &EchoMultiStringResponse{}
}

func (p *EchoMultiStringResponse) InitDefault() {
	*p = EchoMultiStringResponse{}
}

func (p *EchoMultiStringResponse) GetBaseResp() (v string) {
	return p.BaseResp
}

func (p *EchoMultiStringResponse) GetListResp() (v []string) {
	return p.ListResp
}

func (p *EchoMultiStringResponse) GetMapResp() (v map[string]string) {
	return p.MapResp
}
func (p *EchoMultiStringResponse) SetBaseResp(val string) {
	p.BaseResp = val
}
func (p *EchoMultiStringResponse) SetListResp(val []string) {
	p.ListResp = val
}
func (p *EchoMultiStringResponse) SetMapResp(val map[string]string) {
	p.MapResp = val
}

func (p *EchoMultiStringResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoMultiStringResponse(%+v)", *p)
}

type EchoOptionalStructRequest struct {
	Req *bool `thrift:"req,1,optional" frugal:"1,optional,bool" json:"req,omitempty"`
}

func NewEchoOptionalStructRequest() *EchoOptionalStructRequest {
	return &EchoOptionalStructRequest{}
}

func (p *EchoOptionalStructRequest) InitDefault() {
	*p = EchoOptionalStructRequest{}
}

var EchoOptionalStructRequest_Req_DEFAULT bool

func (p *EchoOptionalStructRequest) GetReq() (v bool) {
	if !p.IsSetReq() {
		return EchoOptionalStructRequest_Req_DEFAULT
	}
	return *p.Req
}
func (p *EchoOptionalStructRequest) SetReq(val *bool) {
	p.Req = val
}

func (p *EchoOptionalStructRequest) IsSetReq() bool {
	return p.Req != nil
}

func (p *EchoOptionalStructRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoOptionalStructRequest(%+v)", *p)
}

type EchoOptionalStructResponse struct {
	Resp *bool `thrift:"resp,1,optional" frugal:"1,optional,bool" json:"resp,omitempty"`
}

func NewEchoOptionalStructResponse() *EchoOptionalStructResponse {
	return &EchoOptionalStructResponse{}
}

func (p *EchoOptionalStructResponse) InitDefault() {
	*p = EchoOptionalStructResponse{}
}

var EchoOptionalStructResponse_Resp_DEFAULT bool

func (p *EchoOptionalStructResponse) GetResp() (v bool) {
	if !p.IsSetResp() {
		return EchoOptionalStructResponse_Resp_DEFAULT
	}
	return *p.Resp
}
func (p *EchoOptionalStructResponse) SetResp(val *bool) {
	p.Resp = val
}

func (p *EchoOptionalStructResponse) IsSetResp() bool {
	return p.Resp != nil
}

func (p *EchoOptionalStructResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoOptionalStructResponse(%+v)", *p)
}

type EchoOptionalMultiBoolRequest struct {
	BasicReq *bool         `thrift:"basicReq,1,optional" frugal:"1,optional,bool" json:"basicReq,omitempty"`
	PackReq  *bool         `thrift:"packReq,2,optional" frugal:"2,optional,bool" json:"packReq,omitempty"`
	ListReq  []bool        `thrift:"listReq,3,optional" frugal:"3,optional,list<bool>" json:"listReq,omitempty"`
	MapReq   map[bool]bool `thrift:"mapReq,4,optional" frugal:"4,optional,map<bool:bool>" json:"mapReq,omitempty"`
}

func NewEchoOptionalMultiBoolRequest() *EchoOptionalMultiBoolRequest {
	return &EchoOptionalMultiBoolRequest{}
}

func (p *EchoOptionalMultiBoolRequest) InitDefault() {
	*p = EchoOptionalMultiBoolRequest{}
}

var EchoOptionalMultiBoolRequest_BasicReq_DEFAULT bool

func (p *EchoOptionalMultiBoolRequest) GetBasicReq() (v bool) {
	if !p.IsSetBasicReq() {
		return EchoOptionalMultiBoolRequest_BasicReq_DEFAULT
	}
	return *p.BasicReq
}

var EchoOptionalMultiBoolRequest_PackReq_DEFAULT bool

func (p *EchoOptionalMultiBoolRequest) GetPackReq() (v bool) {
	if !p.IsSetPackReq() {
		return EchoOptionalMultiBoolRequest_PackReq_DEFAULT
	}
	return *p.PackReq
}

var EchoOptionalMultiBoolRequest_ListReq_DEFAULT []bool

func (p *EchoOptionalMultiBoolRequest) GetListReq() (v []bool) {
	if !p.IsSetListReq() {
		return EchoOptionalMultiBoolRequest_ListReq_DEFAULT
	}
	return p.ListReq
}

var EchoOptionalMultiBoolRequest_MapReq_DEFAULT map[bool]bool

func (p *EchoOptionalMultiBoolRequest) GetMapReq() (v map[bool]bool) {
	if !p.IsSetMapReq() {
		return EchoOptionalMultiBoolRequest_MapReq_DEFAULT
	}
	return p.MapReq
}
func (p *EchoOptionalMultiBoolRequest) SetBasicReq(val *bool) {
	p.BasicReq = val
}
func (p *EchoOptionalMultiBoolRequest) SetPackReq(val *bool) {
	p.PackReq = val
}
func (p *EchoOptionalMultiBoolRequest) SetListReq(val []bool) {
	p.ListReq = val
}
func (p *EchoOptionalMultiBoolRequest) SetMapReq(val map[bool]bool) {
	p.MapReq = val
}

func (p *EchoOptionalMultiBoolRequest) IsSetBasicReq() bool {
	return p.BasicReq != nil
}

func (p *EchoOptionalMultiBoolRequest) IsSetPackReq() bool {
	return p.PackReq != nil
}

func (p *EchoOptionalMultiBoolRequest) IsSetListReq() bool {
	return p.ListReq != nil
}

func (p *EchoOptionalMultiBoolRequest) IsSetMapReq() bool {
	return p.MapReq != nil
}

func (p *EchoOptionalMultiBoolRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoOptionalMultiBoolRequest(%+v)", *p)
}

type EchoOptionalMultiInt32Request struct {
	BasicReq *int32         `thrift:"basicReq,1,optional" frugal:"1,optional,i32" json:"basicReq,omitempty"`
	PackReq  *int32         `thrift:"packReq,2,optional" frugal:"2,optional,i32" json:"packReq,omitempty"`
	ListReq  []int32        `thrift:"listReq,3,optional" frugal:"3,optional,list<i32>" json:"listReq,omitempty"`
	MapReq   map[bool]int32 `thrift:"mapReq,4,optional" frugal:"4,optional,map<bool:i32>" json:"mapReq,omitempty"`
}

func NewEchoOptionalMultiInt32Request() *EchoOptionalMultiInt32Request {
	return &EchoOptionalMultiInt32Request{}
}

func (p *EchoOptionalMultiInt32Request) InitDefault() {
	*p = EchoOptionalMultiInt32Request{}
}

var EchoOptionalMultiInt32Request_BasicReq_DEFAULT int32

func (p *EchoOptionalMultiInt32Request) GetBasicReq() (v int32) {
	if !p.IsSetBasicReq() {
		return EchoOptionalMultiInt32Request_BasicReq_DEFAULT
	}
	return *p.BasicReq
}

var EchoOptionalMultiInt32Request_PackReq_DEFAULT int32

func (p *EchoOptionalMultiInt32Request) GetPackReq() (v int32) {
	if !p.IsSetPackReq() {
		return EchoOptionalMultiInt32Request_PackReq_DEFAULT
	}
	return *p.PackReq
}

var EchoOptionalMultiInt32Request_ListReq_DEFAULT []int32

func (p *EchoOptionalMultiInt32Request) GetListReq() (v []int32) {
	if !p.IsSetListReq() {
		return EchoOptionalMultiInt32Request_ListReq_DEFAULT
	}
	return p.ListReq
}

var EchoOptionalMultiInt32Request_MapReq_DEFAULT map[bool]int32

func (p *EchoOptionalMultiInt32Request) GetMapReq() (v map[bool]int32) {
	if !p.IsSetMapReq() {
		return EchoOptionalMultiInt32Request_MapReq_DEFAULT
	}
	return p.MapReq
}
func (p *EchoOptionalMultiInt32Request) SetBasicReq(val *int32) {
	p.BasicReq = val
}
func (p *EchoOptionalMultiInt32Request) SetPackReq(val *int32) {
	p.PackReq = val
}
func (p *EchoOptionalMultiInt32Request) SetListReq(val []int32) {
	p.ListReq = val
}
func (p *EchoOptionalMultiInt32Request) SetMapReq(val map[bool]int32) {
	p.MapReq = val
}

func (p *EchoOptionalMultiInt32Request) IsSetBasicReq() bool {
	return p.BasicReq != nil
}

func (p *EchoOptionalMultiInt32Request) IsSetPackReq() bool {
	return p.PackReq != nil
}

func (p *EchoOptionalMultiInt32Request) IsSetListReq() bool {
	return p.ListReq != nil
}

func (p *EchoOptionalMultiInt32Request) IsSetMapReq() bool {
	return p.MapReq != nil
}

func (p *EchoOptionalMultiInt32Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoOptionalMultiInt32Request(%+v)", *p)
}

type EchoOptionalMultiStringRequest struct {
	BaseReq *string         `thrift:"baseReq,1,optional" frugal:"1,optional,string" json:"baseReq,omitempty"`
	ListReq []string        `thrift:"listReq,2,optional" frugal:"2,optional,list<string>" json:"listReq,omitempty"`
	MapReq  map[bool]string `thrift:"mapReq,3,optional" frugal:"3,optional,map<bool:string>" json:"mapReq,omitempty"`
}

func NewEchoOptionalMultiStringRequest() *EchoOptionalMultiStringRequest {
	return &EchoOptionalMultiStringRequest{}
}

func (p *EchoOptionalMultiStringRequest) InitDefault() {
	*p = EchoOptionalMultiStringRequest{}
}

var EchoOptionalMultiStringRequest_BaseReq_DEFAULT string

func (p *EchoOptionalMultiStringRequest) GetBaseReq() (v string) {
	if !p.IsSetBaseReq() {
		return EchoOptionalMultiStringRequest_BaseReq_DEFAULT
	}
	return *p.BaseReq
}

var EchoOptionalMultiStringRequest_ListReq_DEFAULT []string

func (p *EchoOptionalMultiStringRequest) GetListReq() (v []string) {
	if !p.IsSetListReq() {
		return EchoOptionalMultiStringRequest_ListReq_DEFAULT
	}
	return p.ListReq
}

var EchoOptionalMultiStringRequest_MapReq_DEFAULT map[bool]string

func (p *EchoOptionalMultiStringRequest) GetMapReq() (v map[bool]string) {
	if !p.IsSetMapReq() {
		return EchoOptionalMultiStringRequest_MapReq_DEFAULT
	}
	return p.MapReq
}
func (p *EchoOptionalMultiStringRequest) SetBaseReq(val *string) {
	p.BaseReq = val
}
func (p *EchoOptionalMultiStringRequest) SetListReq(val []string) {
	p.ListReq = val
}
func (p *EchoOptionalMultiStringRequest) SetMapReq(val map[bool]string) {
	p.MapReq = val
}

func (p *EchoOptionalMultiStringRequest) IsSetBaseReq() bool {
	return p.BaseReq != nil
}

func (p *EchoOptionalMultiStringRequest) IsSetListReq() bool {
	return p.ListReq != nil
}

func (p *EchoOptionalMultiStringRequest) IsSetMapReq() bool {
	return p.MapReq != nil
}

func (p *EchoOptionalMultiStringRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoOptionalMultiStringRequest(%+v)", *p)
}

type EchoOptionalMultiBoolResponse struct {
	BasicResp *bool         `thrift:"basicResp,1,optional" frugal:"1,optional,bool" json:"basicResp,omitempty"`
	PackResp  *bool         `thrift:"packResp,2,optional" frugal:"2,optional,bool" json:"packResp,omitempty"`
	ListResp  []bool        `thrift:"listResp,3,optional" frugal:"3,optional,list<bool>" json:"listResp,omitempty"`
	MapResp   map[bool]bool `thrift:"mapResp,4,optional" frugal:"4,optional,map<bool:bool>" json:"mapResp,omitempty"`
}

func NewEchoOptionalMultiBoolResponse() *EchoOptionalMultiBoolResponse {
	return &EchoOptionalMultiBoolResponse{}
}

func (p *EchoOptionalMultiBoolResponse) InitDefault() {
	*p = EchoOptionalMultiBoolResponse{}
}

var EchoOptionalMultiBoolResponse_BasicResp_DEFAULT bool

func (p *EchoOptionalMultiBoolResponse) GetBasicResp() (v bool) {
	if !p.IsSetBasicResp() {
		return EchoOptionalMultiBoolResponse_BasicResp_DEFAULT
	}
	return *p.BasicResp
}

var EchoOptionalMultiBoolResponse_PackResp_DEFAULT bool

func (p *EchoOptionalMultiBoolResponse) GetPackResp() (v bool) {
	if !p.IsSetPackResp() {
		return EchoOptionalMultiBoolResponse_PackResp_DEFAULT
	}
	return *p.PackResp
}

var EchoOptionalMultiBoolResponse_ListResp_DEFAULT []bool

func (p *EchoOptionalMultiBoolResponse) GetListResp() (v []bool) {
	if !p.IsSetListResp() {
		return EchoOptionalMultiBoolResponse_ListResp_DEFAULT
	}
	return p.ListResp
}

var EchoOptionalMultiBoolResponse_MapResp_DEFAULT map[bool]bool

func (p *EchoOptionalMultiBoolResponse) GetMapResp() (v map[bool]bool) {
	if !p.IsSetMapResp() {
		return EchoOptionalMultiBoolResponse_MapResp_DEFAULT
	}
	return p.MapResp
}
func (p *EchoOptionalMultiBoolResponse) SetBasicResp(val *bool) {
	p.BasicResp = val
}
func (p *EchoOptionalMultiBoolResponse) SetPackResp(val *bool) {
	p.PackResp = val
}
func (p *EchoOptionalMultiBoolResponse) SetListResp(val []bool) {
	p.ListResp = val
}
func (p *EchoOptionalMultiBoolResponse) SetMapResp(val map[bool]bool) {
	p.MapResp = val
}

func (p *EchoOptionalMultiBoolResponse) IsSetBasicResp() bool {
	return p.BasicResp != nil
}

func (p *EchoOptionalMultiBoolResponse) IsSetPackResp() bool {
	return p.PackResp != nil
}

func (p *EchoOptionalMultiBoolResponse) IsSetListResp() bool {
	return p.ListResp != nil
}

func (p *EchoOptionalMultiBoolResponse) IsSetMapResp() bool {
	return p.MapResp != nil
}

func (p *EchoOptionalMultiBoolResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoOptionalMultiBoolResponse(%+v)", *p)
}

type EchoOptionalMultiInt32Response struct {
	BasicResp *int32         `thrift:"basicResp,1,optional" frugal:"1,optional,i32" json:"basicResp,omitempty"`
	PackResp  *int32         `thrift:"packResp,2,optional" frugal:"2,optional,i32" json:"packResp,omitempty"`
	ListResp  []int32        `thrift:"listResp,3,optional" frugal:"3,optional,list<i32>" json:"listResp,omitempty"`
	MapResp   map[bool]int32 `thrift:"mapResp,4,optional" frugal:"4,optional,map<bool:i32>" json:"mapResp,omitempty"`
}

func NewEchoOptionalMultiInt32Response() *EchoOptionalMultiInt32Response {
	return &EchoOptionalMultiInt32Response{}
}

func (p *EchoOptionalMultiInt32Response) InitDefault() {
	*p = EchoOptionalMultiInt32Response{}
}

var EchoOptionalMultiInt32Response_BasicResp_DEFAULT int32

func (p *EchoOptionalMultiInt32Response) GetBasicResp() (v int32) {
	if !p.IsSetBasicResp() {
		return EchoOptionalMultiInt32Response_BasicResp_DEFAULT
	}
	return *p.BasicResp
}

var EchoOptionalMultiInt32Response_PackResp_DEFAULT int32

func (p *EchoOptionalMultiInt32Response) GetPackResp() (v int32) {
	if !p.IsSetPackResp() {
		return EchoOptionalMultiInt32Response_PackResp_DEFAULT
	}
	return *p.PackResp
}

var EchoOptionalMultiInt32Response_ListResp_DEFAULT []int32

func (p *EchoOptionalMultiInt32Response) GetListResp() (v []int32) {
	if !p.IsSetListResp() {
		return EchoOptionalMultiInt32Response_ListResp_DEFAULT
	}
	return p.ListResp
}

var EchoOptionalMultiInt32Response_MapResp_DEFAULT map[bool]int32

func (p *EchoOptionalMultiInt32Response) GetMapResp() (v map[bool]int32) {
	if !p.IsSetMapResp() {
		return EchoOptionalMultiInt32Response_MapResp_DEFAULT
	}
	return p.MapResp
}
func (p *EchoOptionalMultiInt32Response) SetBasicResp(val *int32) {
	p.BasicResp = val
}
func (p *EchoOptionalMultiInt32Response) SetPackResp(val *int32) {
	p.PackResp = val
}
func (p *EchoOptionalMultiInt32Response) SetListResp(val []int32) {
	p.ListResp = val
}
func (p *EchoOptionalMultiInt32Response) SetMapResp(val map[bool]int32) {
	p.MapResp = val
}

func (p *EchoOptionalMultiInt32Response) IsSetBasicResp() bool {
	return p.BasicResp != nil
}

func (p *EchoOptionalMultiInt32Response) IsSetPackResp() bool {
	return p.PackResp != nil
}

func (p *EchoOptionalMultiInt32Response) IsSetListResp() bool {
	return p.ListResp != nil
}

func (p *EchoOptionalMultiInt32Response) IsSetMapResp() bool {
	return p.MapResp != nil
}

func (p *EchoOptionalMultiInt32Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoOptionalMultiInt32Response(%+v)", *p)
}

type EchoOptionalMultiStringResponse struct {
	BaseResp *string         `thrift:"baseResp,1,optional" frugal:"1,optional,string" json:"baseResp,omitempty"`
	ListResp []string        `thrift:"listResp,2,optional" frugal:"2,optional,list<string>" json:"listResp,omitempty"`
	MapResp  map[bool]string `thrift:"mapResp,3,optional" frugal:"3,optional,map<bool:string>" json:"mapResp,omitempty"`
}

func NewEchoOptionalMultiStringResponse() *EchoOptionalMultiStringResponse {
	return &EchoOptionalMultiStringResponse{}
}

func (p *EchoOptionalMultiStringResponse) InitDefault() {
	*p = EchoOptionalMultiStringResponse{}
}

var EchoOptionalMultiStringResponse_BaseResp_DEFAULT string

func (p *EchoOptionalMultiStringResponse) GetBaseResp() (v string) {
	if !p.IsSetBaseResp() {
		return EchoOptionalMultiStringResponse_BaseResp_DEFAULT
	}
	return *p.BaseResp
}

var EchoOptionalMultiStringResponse_ListResp_DEFAULT []string

func (p *EchoOptionalMultiStringResponse) GetListResp() (v []string) {
	if !p.IsSetListResp() {
		return EchoOptionalMultiStringResponse_ListResp_DEFAULT
	}
	return p.ListResp
}

var EchoOptionalMultiStringResponse_MapResp_DEFAULT map[bool]string

func (p *EchoOptionalMultiStringResponse) GetMapResp() (v map[bool]string) {
	if !p.IsSetMapResp() {
		return EchoOptionalMultiStringResponse_MapResp_DEFAULT
	}
	return p.MapResp
}
func (p *EchoOptionalMultiStringResponse) SetBaseResp(val *string) {
	p.BaseResp = val
}
func (p *EchoOptionalMultiStringResponse) SetListResp(val []string) {
	p.ListResp = val
}
func (p *EchoOptionalMultiStringResponse) SetMapResp(val map[bool]string) {
	p.MapResp = val
}

func (p *EchoOptionalMultiStringResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *EchoOptionalMultiStringResponse) IsSetListResp() bool {
	return p.ListResp != nil
}

func (p *EchoOptionalMultiStringResponse) IsSetMapResp() bool {
	return p.MapResp != nil
}

func (p *EchoOptionalMultiStringResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoOptionalMultiStringResponse(%+v)", *p)
}

type EchoCustomizedException struct {
	java.Exception `thrift:"exceptionNested,1,required" frugal:"1,required,java.Exception" json:"exceptionNested"`

	CustomizedMessage string `thrift:"customizedMessage,2,required" frugal:"2,required,string" json:"customizedMessage"`
}

func NewEchoCustomizedException() *EchoCustomizedException {
	return &EchoCustomizedException{}
}

func (p *EchoCustomizedException) InitDefault() {
	*p = EchoCustomizedException{}
}

var EchoCustomizedException_Exception_DEFAULT java.Exception

func (p *EchoCustomizedException) GetException() (v java.Exception) {
	if !p.IsSetException() {
		return EchoCustomizedException_Exception_DEFAULT
	}
	return p.Exception
}

func (p *EchoCustomizedException) GetCustomizedMessage() (v string) {
	return p.CustomizedMessage
}
func (p *EchoCustomizedException) SetException(val java.Exception) {
	p.Exception = val
}
func (p *EchoCustomizedException) SetCustomizedMessage(val string) {
	p.CustomizedMessage = val
}

func (p *EchoCustomizedException) IsSetException() bool {
	return true
}

func (p *EchoCustomizedException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoCustomizedException(%+v)", *p)
}
func (p *EchoCustomizedException) Error() string {
	return p.String()
}

type TestService interface {
	EchoInt(ctx context.Context, req int32) (r int32, err error)

	EchoBool(ctx context.Context, req bool) (r bool, err error)

	EchoByte(ctx context.Context, req int8) (r int8, err error)

	EchoInt16(ctx context.Context, req int16) (r int16, err error)

	EchoInt32(ctx context.Context, req int32) (r int32, err error)

	EchoInt64(ctx context.Context, req int64) (r int64, err error)

	EchoFloat(ctx context.Context, req float64) (r float64, err error)

	EchoDouble(ctx context.Context, req float64) (r float64, err error)

	EchoString(ctx context.Context, req string) (r string, err error)

	EchoBinary(ctx context.Context, req []byte) (r []byte, err error)

	Echo(ctx context.Context, req *EchoRequest) (r *EchoResponse, err error)

	EchoBoolList(ctx context.Context, req []bool) (r []bool, err error)

	EchoByteList(ctx context.Context, req []int8) (r []int8, err error)

	EchoInt16List(ctx context.Context, req []int16) (r []int16, err error)

	EchoInt32List(ctx context.Context, req []int32) (r []int32, err error)

	EchoInt64List(ctx context.Context, req []int64) (r []int64, err error)

	EchoFloatList(ctx context.Context, req []float64) (r []float64, err error)

	EchoDoubleList(ctx context.Context, req []float64) (r []float64, err error)

	EchoStringList(ctx context.Context, req []string) (r []string, err error)

	EchoBinaryList(ctx context.Context, req [][]byte) (r [][]byte, err error)

	EchoBool2BoolMap(ctx context.Context, req map[bool]bool) (r map[bool]bool, err error)

	EchoBool2ByteMap(ctx context.Context, req map[bool]int8) (r map[bool]int8, err error)

	EchoBool2Int16Map(ctx context.Context, req map[bool]int16) (r map[bool]int16, err error)

	EchoBool2Int32Map(ctx context.Context, req map[bool]int32) (r map[bool]int32, err error)

	EchoBool2Int64Map(ctx context.Context, req map[bool]int64) (r map[bool]int64, err error)

	EchoBool2FloatMap(ctx context.Context, req map[bool]float64) (r map[bool]float64, err error)

	EchoBool2DoubleMap(ctx context.Context, req map[bool]float64) (r map[bool]float64, err error)

	EchoBool2StringMap(ctx context.Context, req map[bool]string) (r map[bool]string, err error)

	EchoBool2BinaryMap(ctx context.Context, req map[bool][]byte) (r map[bool][]byte, err error)

	EchoBool2BoolListMap(ctx context.Context, req map[bool][]bool) (r map[bool][]bool, err error)

	EchoBool2ByteListMap(ctx context.Context, req map[bool][]int8) (r map[bool][]int8, err error)

	EchoBool2Int16ListMap(ctx context.Context, req map[bool][]int16) (r map[bool][]int16, err error)

	EchoBool2Int32ListMap(ctx context.Context, req map[bool][]int32) (r map[bool][]int32, err error)

	EchoBool2Int64ListMap(ctx context.Context, req map[bool][]int64) (r map[bool][]int64, err error)

	EchoBool2FloatListMap(ctx context.Context, req map[bool][]float64) (r map[bool][]float64, err error)

	EchoBool2DoubleListMap(ctx context.Context, req map[bool][]float64) (r map[bool][]float64, err error)

	EchoBool2StringListMap(ctx context.Context, req map[bool][]string) (r map[bool][]string, err error)

	EchoBool2BinaryListMap(ctx context.Context, req map[bool][][]byte) (r map[bool][][]byte, err error)

	EchoMultiBool(ctx context.Context, baseReq bool, listReq []bool, mapReq map[bool]bool) (r *EchoMultiBoolResponse, err error)

	EchoMultiByte(ctx context.Context, baseReq int8, listReq []int8, mapReq map[int8]int8) (r *EchoMultiByteResponse, err error)

	EchoMultiInt16(ctx context.Context, baseReq int16, listReq []int16, mapReq map[int16]int16) (r *EchoMultiInt16Response, err error)

	EchoMultiInt32(ctx context.Context, baseReq int32, listReq []int32, mapReq map[int32]int32) (r *EchoMultiInt32Response, err error)

	EchoMultiInt64(ctx context.Context, baseReq int64, listReq []int64, mapReq map[int64]int64) (r *EchoMultiInt64Response, err error)

	EchoMultiFloat(ctx context.Context, baseReq float64, listReq []float64, mapReq map[float64]float64) (r *EchoMultiFloatResponse, err error)

	EchoMultiDouble(ctx context.Context, baseReq float64, listReq []float64, mapReq map[float64]float64) (r *EchoMultiDoubleResponse, err error)

	EchoMultiString(ctx context.Context, baseReq string, listReq []string, mapReq map[string]string) (r *EchoMultiStringResponse, err error)

	EchoBaseBool(ctx context.Context, req bool) (r bool, err error)

	EchoBaseByte(ctx context.Context, req int8) (r int8, err error)

	EchoBaseInt16(ctx context.Context, req int16) (r int16, err error)

	EchoBaseInt32(ctx context.Context, req int32) (r int32, err error)

	EchoBaseInt64(ctx context.Context, req int64) (r int64, err error)

	EchoBaseFloat(ctx context.Context, req float64) (r float64, err error)

	EchoBaseDouble(ctx context.Context, req float64) (r float64, err error)

	EchoBaseBoolList(ctx context.Context, req []bool) (r []bool, err error)

	EchoBaseByteList(ctx context.Context, req []int8) (r []int8, err error)

	EchoBaseInt16List(ctx context.Context, req []int16) (r []int16, err error)

	EchoBaseInt32List(ctx context.Context, req []int32) (r []int32, err error)

	EchoBaseInt64List(ctx context.Context, req []int64) (r []int64, err error)

	EchoBaseFloatList(ctx context.Context, req []float64) (r []float64, err error)

	EchoBaseDoubleList(ctx context.Context, req []float64) (r []float64, err error)

	EchoBool2BoolBaseMap(ctx context.Context, req map[bool]bool) (r map[bool]bool, err error)

	EchoBool2ByteBaseMap(ctx context.Context, req map[bool]int8) (r map[bool]int8, err error)

	EchoBool2Int16BaseMap(ctx context.Context, req map[bool]int16) (r map[bool]int16, err error)

	EchoBool2Int32BaseMap(ctx context.Context, req map[bool]int32) (r map[bool]int32, err error)

	EchoBool2Int64BaseMap(ctx context.Context, req map[bool]int64) (r map[bool]int64, err error)

	EchoBool2FloatBaseMap(ctx context.Context, req map[bool]float64) (r map[bool]float64, err error)

	EchoBool2DoubleBaseMap(ctx context.Context, req map[bool]float64) (r map[bool]float64, err error)

	EchoMultiBaseBool(ctx context.Context, baseReq bool, listReq []bool, mapReq map[bool]bool) (r *EchoMultiBoolResponse, err error)

	EchoMultiBaseByte(ctx context.Context, baseReq int8, listReq []int8, mapReq map[int8]int8) (r *EchoMultiByteResponse, err error)

	EchoMultiBaseInt16(ctx context.Context, baseReq int16, listReq []int16, mapReq map[int16]int16) (r *EchoMultiInt16Response, err error)

	EchoMultiBaseInt32(ctx context.Context, baseReq int32, listReq []int32, mapReq map[int32]int32) (r *EchoMultiInt32Response, err error)

	EchoMultiBaseInt64(ctx context.Context, baseReq int64, listReq []int64, mapReq map[int64]int64) (r *EchoMultiInt64Response, err error)

	EchoMultiBaseFloat(ctx context.Context, baseReq float64, listReq []float64, mapReq map[float64]float64) (r *EchoMultiFloatResponse, err error)

	EchoMultiBaseDouble(ctx context.Context, baseReq float64, listReq []float64, mapReq map[float64]float64) (r *EchoMultiDoubleResponse, err error)

	EchoMethodA(ctx context.Context, req bool) (r string, err error)

	EchoMethodB(ctx context.Context, req int32) (r string, err error)

	EchoMethodC(ctx context.Context, req int32) (r string, err error)

	EchoMethodD(ctx context.Context, req1 bool, req2 int32) (r string, err error)

	EchoOptionalBool(ctx context.Context, req bool) (r bool, err error)

	EchoOptionalInt32(ctx context.Context, req int32) (r int32, err error)

	EchoOptionalString(ctx context.Context, req string) (r string, err error)

	EchoOptionalBoolList(ctx context.Context, req []bool) (r []bool, err error)

	EchoOptionalInt32List(ctx context.Context, req []int32) (r []int32, err error)

	EchoOptionalStringList(ctx context.Context, req []string) (r []string, err error)

	EchoOptionalBool2BoolMap(ctx context.Context, req map[bool]bool) (r map[bool]bool, err error)

	EchoOptionalBool2Int32Map(ctx context.Context, req map[bool]int32) (r map[bool]int32, err error)

	EchoOptionalBool2StringMap(ctx context.Context, req map[bool]string) (r map[bool]string, err error)

	EchoOptionalStruct(ctx context.Context, req *EchoOptionalStructRequest) (r *EchoOptionalStructResponse, err error)

	EchoOptionalMultiBoolRequest(ctx context.Context, req *EchoOptionalMultiBoolRequest) (r bool, err error)

	EchoOptionalMultiInt32Request(ctx context.Context, req *EchoOptionalMultiInt32Request) (r int32, err error)

	EchoOptionalMultiStringRequest(ctx context.Context, req *EchoOptionalMultiStringRequest) (r string, err error)

	EchoOptionalMultiBoolResponse(ctx context.Context, req bool) (r *EchoOptionalMultiBoolResponse, err error)

	EchoOptionalMultiInt32Response(ctx context.Context, req int32) (r *EchoOptionalMultiInt32Response, err error)

	EchoOptionalMultiStringResponse(ctx context.Context, req string) (r *EchoOptionalMultiStringResponse, err error)

	EchoException(ctx context.Context, req bool) (r bool, err error)

	EchoCustomizedException(ctx context.Context, req bool) (r bool, err error)
}
