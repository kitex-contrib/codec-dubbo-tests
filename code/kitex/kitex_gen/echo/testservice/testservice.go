// Code generated by Kitex v0.9.1. DO NOT EDIT.

package testservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	echo "github.com/kitex-contrib/codec-dubbo-tests/code/kitex/kitex_gen/echo"
	extensions "github.com/kitex-contrib/codec-dubbo-tests/code/kitex/kitex_gen/extensions"
	java "github.com/kitex-contrib/codec-dubbo-tests/code/kitex/kitex_gen/java"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"EchoRetByte": kitex.NewMethodInfo(
		echoRetByteHandler,
		newTestServiceEchoRetByteArgs,
		newTestServiceEchoRetByteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoRetBool": kitex.NewMethodInfo(
		echoRetBoolHandler,
		newTestServiceEchoRetBoolArgs,
		newTestServiceEchoRetBoolResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoRetInt16": kitex.NewMethodInfo(
		echoRetInt16Handler,
		newTestServiceEchoRetInt16Args,
		newTestServiceEchoRetInt16Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoRetInt32": kitex.NewMethodInfo(
		echoRetInt32Handler,
		newTestServiceEchoRetInt32Args,
		newTestServiceEchoRetInt32Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoRetInt64": kitex.NewMethodInfo(
		echoRetInt64Handler,
		newTestServiceEchoRetInt64Args,
		newTestServiceEchoRetInt64Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoRetFloat": kitex.NewMethodInfo(
		echoRetFloatHandler,
		newTestServiceEchoRetFloatArgs,
		newTestServiceEchoRetFloatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoRetDouble": kitex.NewMethodInfo(
		echoRetDoubleHandler,
		newTestServiceEchoRetDoubleArgs,
		newTestServiceEchoRetDoubleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoRetString": kitex.NewMethodInfo(
		echoRetStringHandler,
		newTestServiceEchoRetStringArgs,
		newTestServiceEchoRetStringResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoInt": kitex.NewMethodInfo(
		echoIntHandler,
		newTestServiceEchoIntArgs,
		newTestServiceEchoIntResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool": kitex.NewMethodInfo(
		echoBoolHandler,
		newTestServiceEchoBoolArgs,
		newTestServiceEchoBoolResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoByte": kitex.NewMethodInfo(
		echoByteHandler,
		newTestServiceEchoByteArgs,
		newTestServiceEchoByteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoInt16": kitex.NewMethodInfo(
		echoInt16Handler,
		newTestServiceEchoInt16Args,
		newTestServiceEchoInt16Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoInt32": kitex.NewMethodInfo(
		echoInt32Handler,
		newTestServiceEchoInt32Args,
		newTestServiceEchoInt32Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoInt64": kitex.NewMethodInfo(
		echoInt64Handler,
		newTestServiceEchoInt64Args,
		newTestServiceEchoInt64Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoFloat": kitex.NewMethodInfo(
		echoFloatHandler,
		newTestServiceEchoFloatArgs,
		newTestServiceEchoFloatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoDouble": kitex.NewMethodInfo(
		echoDoubleHandler,
		newTestServiceEchoDoubleArgs,
		newTestServiceEchoDoubleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoString": kitex.NewMethodInfo(
		echoStringHandler,
		newTestServiceEchoStringArgs,
		newTestServiceEchoStringResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBinary": kitex.NewMethodInfo(
		echoBinaryHandler,
		newTestServiceEchoBinaryArgs,
		newTestServiceEchoBinaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Echo": kitex.NewMethodInfo(
		echoHandler,
		newTestServiceEchoArgs,
		newTestServiceEchoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBoolList": kitex.NewMethodInfo(
		echoBoolListHandler,
		newTestServiceEchoBoolListArgs,
		newTestServiceEchoBoolListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoByteList": kitex.NewMethodInfo(
		echoByteListHandler,
		newTestServiceEchoByteListArgs,
		newTestServiceEchoByteListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoInt16List": kitex.NewMethodInfo(
		echoInt16ListHandler,
		newTestServiceEchoInt16ListArgs,
		newTestServiceEchoInt16ListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoInt32List": kitex.NewMethodInfo(
		echoInt32ListHandler,
		newTestServiceEchoInt32ListArgs,
		newTestServiceEchoInt32ListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoInt64List": kitex.NewMethodInfo(
		echoInt64ListHandler,
		newTestServiceEchoInt64ListArgs,
		newTestServiceEchoInt64ListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoFloatList": kitex.NewMethodInfo(
		echoFloatListHandler,
		newTestServiceEchoFloatListArgs,
		newTestServiceEchoFloatListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoDoubleList": kitex.NewMethodInfo(
		echoDoubleListHandler,
		newTestServiceEchoDoubleListArgs,
		newTestServiceEchoDoubleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoStringList": kitex.NewMethodInfo(
		echoStringListHandler,
		newTestServiceEchoStringListArgs,
		newTestServiceEchoStringListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBinaryList": kitex.NewMethodInfo(
		echoBinaryListHandler,
		newTestServiceEchoBinaryListArgs,
		newTestServiceEchoBinaryListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2BoolMap": kitex.NewMethodInfo(
		echoBool2BoolMapHandler,
		newTestServiceEchoBool2BoolMapArgs,
		newTestServiceEchoBool2BoolMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2ByteMap": kitex.NewMethodInfo(
		echoBool2ByteMapHandler,
		newTestServiceEchoBool2ByteMapArgs,
		newTestServiceEchoBool2ByteMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2Int16Map": kitex.NewMethodInfo(
		echoBool2Int16MapHandler,
		newTestServiceEchoBool2Int16MapArgs,
		newTestServiceEchoBool2Int16MapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2Int32Map": kitex.NewMethodInfo(
		echoBool2Int32MapHandler,
		newTestServiceEchoBool2Int32MapArgs,
		newTestServiceEchoBool2Int32MapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2Int64Map": kitex.NewMethodInfo(
		echoBool2Int64MapHandler,
		newTestServiceEchoBool2Int64MapArgs,
		newTestServiceEchoBool2Int64MapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2FloatMap": kitex.NewMethodInfo(
		echoBool2FloatMapHandler,
		newTestServiceEchoBool2FloatMapArgs,
		newTestServiceEchoBool2FloatMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2DoubleMap": kitex.NewMethodInfo(
		echoBool2DoubleMapHandler,
		newTestServiceEchoBool2DoubleMapArgs,
		newTestServiceEchoBool2DoubleMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2StringMap": kitex.NewMethodInfo(
		echoBool2StringMapHandler,
		newTestServiceEchoBool2StringMapArgs,
		newTestServiceEchoBool2StringMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2BinaryMap": kitex.NewMethodInfo(
		echoBool2BinaryMapHandler,
		newTestServiceEchoBool2BinaryMapArgs,
		newTestServiceEchoBool2BinaryMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2BoolListMap": kitex.NewMethodInfo(
		echoBool2BoolListMapHandler,
		newTestServiceEchoBool2BoolListMapArgs,
		newTestServiceEchoBool2BoolListMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2ByteListMap": kitex.NewMethodInfo(
		echoBool2ByteListMapHandler,
		newTestServiceEchoBool2ByteListMapArgs,
		newTestServiceEchoBool2ByteListMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2Int16ListMap": kitex.NewMethodInfo(
		echoBool2Int16ListMapHandler,
		newTestServiceEchoBool2Int16ListMapArgs,
		newTestServiceEchoBool2Int16ListMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2Int32ListMap": kitex.NewMethodInfo(
		echoBool2Int32ListMapHandler,
		newTestServiceEchoBool2Int32ListMapArgs,
		newTestServiceEchoBool2Int32ListMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2Int64ListMap": kitex.NewMethodInfo(
		echoBool2Int64ListMapHandler,
		newTestServiceEchoBool2Int64ListMapArgs,
		newTestServiceEchoBool2Int64ListMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2FloatListMap": kitex.NewMethodInfo(
		echoBool2FloatListMapHandler,
		newTestServiceEchoBool2FloatListMapArgs,
		newTestServiceEchoBool2FloatListMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2DoubleListMap": kitex.NewMethodInfo(
		echoBool2DoubleListMapHandler,
		newTestServiceEchoBool2DoubleListMapArgs,
		newTestServiceEchoBool2DoubleListMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2StringListMap": kitex.NewMethodInfo(
		echoBool2StringListMapHandler,
		newTestServiceEchoBool2StringListMapArgs,
		newTestServiceEchoBool2StringListMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2BinaryListMap": kitex.NewMethodInfo(
		echoBool2BinaryListMapHandler,
		newTestServiceEchoBool2BinaryListMapArgs,
		newTestServiceEchoBool2BinaryListMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiBool": kitex.NewMethodInfo(
		echoMultiBoolHandler,
		newTestServiceEchoMultiBoolArgs,
		newTestServiceEchoMultiBoolResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiByte": kitex.NewMethodInfo(
		echoMultiByteHandler,
		newTestServiceEchoMultiByteArgs,
		newTestServiceEchoMultiByteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiInt16": kitex.NewMethodInfo(
		echoMultiInt16Handler,
		newTestServiceEchoMultiInt16Args,
		newTestServiceEchoMultiInt16Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiInt32": kitex.NewMethodInfo(
		echoMultiInt32Handler,
		newTestServiceEchoMultiInt32Args,
		newTestServiceEchoMultiInt32Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiInt64": kitex.NewMethodInfo(
		echoMultiInt64Handler,
		newTestServiceEchoMultiInt64Args,
		newTestServiceEchoMultiInt64Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiFloat": kitex.NewMethodInfo(
		echoMultiFloatHandler,
		newTestServiceEchoMultiFloatArgs,
		newTestServiceEchoMultiFloatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiDouble": kitex.NewMethodInfo(
		echoMultiDoubleHandler,
		newTestServiceEchoMultiDoubleArgs,
		newTestServiceEchoMultiDoubleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiString": kitex.NewMethodInfo(
		echoMultiStringHandler,
		newTestServiceEchoMultiStringArgs,
		newTestServiceEchoMultiStringResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseBool": kitex.NewMethodInfo(
		echoBaseBoolHandler,
		newTestServiceEchoBaseBoolArgs,
		newTestServiceEchoBaseBoolResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseByte": kitex.NewMethodInfo(
		echoBaseByteHandler,
		newTestServiceEchoBaseByteArgs,
		newTestServiceEchoBaseByteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseInt16": kitex.NewMethodInfo(
		echoBaseInt16Handler,
		newTestServiceEchoBaseInt16Args,
		newTestServiceEchoBaseInt16Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseInt32": kitex.NewMethodInfo(
		echoBaseInt32Handler,
		newTestServiceEchoBaseInt32Args,
		newTestServiceEchoBaseInt32Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseInt64": kitex.NewMethodInfo(
		echoBaseInt64Handler,
		newTestServiceEchoBaseInt64Args,
		newTestServiceEchoBaseInt64Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseFloat": kitex.NewMethodInfo(
		echoBaseFloatHandler,
		newTestServiceEchoBaseFloatArgs,
		newTestServiceEchoBaseFloatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseDouble": kitex.NewMethodInfo(
		echoBaseDoubleHandler,
		newTestServiceEchoBaseDoubleArgs,
		newTestServiceEchoBaseDoubleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseBoolList": kitex.NewMethodInfo(
		echoBaseBoolListHandler,
		newTestServiceEchoBaseBoolListArgs,
		newTestServiceEchoBaseBoolListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseByteList": kitex.NewMethodInfo(
		echoBaseByteListHandler,
		newTestServiceEchoBaseByteListArgs,
		newTestServiceEchoBaseByteListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseInt16List": kitex.NewMethodInfo(
		echoBaseInt16ListHandler,
		newTestServiceEchoBaseInt16ListArgs,
		newTestServiceEchoBaseInt16ListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseInt32List": kitex.NewMethodInfo(
		echoBaseInt32ListHandler,
		newTestServiceEchoBaseInt32ListArgs,
		newTestServiceEchoBaseInt32ListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseInt64List": kitex.NewMethodInfo(
		echoBaseInt64ListHandler,
		newTestServiceEchoBaseInt64ListArgs,
		newTestServiceEchoBaseInt64ListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseFloatList": kitex.NewMethodInfo(
		echoBaseFloatListHandler,
		newTestServiceEchoBaseFloatListArgs,
		newTestServiceEchoBaseFloatListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBaseDoubleList": kitex.NewMethodInfo(
		echoBaseDoubleListHandler,
		newTestServiceEchoBaseDoubleListArgs,
		newTestServiceEchoBaseDoubleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2BoolBaseMap": kitex.NewMethodInfo(
		echoBool2BoolBaseMapHandler,
		newTestServiceEchoBool2BoolBaseMapArgs,
		newTestServiceEchoBool2BoolBaseMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2ByteBaseMap": kitex.NewMethodInfo(
		echoBool2ByteBaseMapHandler,
		newTestServiceEchoBool2ByteBaseMapArgs,
		newTestServiceEchoBool2ByteBaseMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2Int16BaseMap": kitex.NewMethodInfo(
		echoBool2Int16BaseMapHandler,
		newTestServiceEchoBool2Int16BaseMapArgs,
		newTestServiceEchoBool2Int16BaseMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2Int32BaseMap": kitex.NewMethodInfo(
		echoBool2Int32BaseMapHandler,
		newTestServiceEchoBool2Int32BaseMapArgs,
		newTestServiceEchoBool2Int32BaseMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2Int64BaseMap": kitex.NewMethodInfo(
		echoBool2Int64BaseMapHandler,
		newTestServiceEchoBool2Int64BaseMapArgs,
		newTestServiceEchoBool2Int64BaseMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2FloatBaseMap": kitex.NewMethodInfo(
		echoBool2FloatBaseMapHandler,
		newTestServiceEchoBool2FloatBaseMapArgs,
		newTestServiceEchoBool2FloatBaseMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoBool2DoubleBaseMap": kitex.NewMethodInfo(
		echoBool2DoubleBaseMapHandler,
		newTestServiceEchoBool2DoubleBaseMapArgs,
		newTestServiceEchoBool2DoubleBaseMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiBaseBool": kitex.NewMethodInfo(
		echoMultiBaseBoolHandler,
		newTestServiceEchoMultiBaseBoolArgs,
		newTestServiceEchoMultiBaseBoolResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiBaseByte": kitex.NewMethodInfo(
		echoMultiBaseByteHandler,
		newTestServiceEchoMultiBaseByteArgs,
		newTestServiceEchoMultiBaseByteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiBaseInt16": kitex.NewMethodInfo(
		echoMultiBaseInt16Handler,
		newTestServiceEchoMultiBaseInt16Args,
		newTestServiceEchoMultiBaseInt16Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiBaseInt32": kitex.NewMethodInfo(
		echoMultiBaseInt32Handler,
		newTestServiceEchoMultiBaseInt32Args,
		newTestServiceEchoMultiBaseInt32Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiBaseInt64": kitex.NewMethodInfo(
		echoMultiBaseInt64Handler,
		newTestServiceEchoMultiBaseInt64Args,
		newTestServiceEchoMultiBaseInt64Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiBaseFloat": kitex.NewMethodInfo(
		echoMultiBaseFloatHandler,
		newTestServiceEchoMultiBaseFloatArgs,
		newTestServiceEchoMultiBaseFloatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMultiBaseDouble": kitex.NewMethodInfo(
		echoMultiBaseDoubleHandler,
		newTestServiceEchoMultiBaseDoubleArgs,
		newTestServiceEchoMultiBaseDoubleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMethodA": kitex.NewMethodInfo(
		echoMethodAHandler,
		newTestServiceEchoMethodAArgs,
		newTestServiceEchoMethodAResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMethodB": kitex.NewMethodInfo(
		echoMethodBHandler,
		newTestServiceEchoMethodBArgs,
		newTestServiceEchoMethodBResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMethodC": kitex.NewMethodInfo(
		echoMethodCHandler,
		newTestServiceEchoMethodCArgs,
		newTestServiceEchoMethodCResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoMethodD": kitex.NewMethodInfo(
		echoMethodDHandler,
		newTestServiceEchoMethodDArgs,
		newTestServiceEchoMethodDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalBool": kitex.NewMethodInfo(
		echoOptionalBoolHandler,
		newTestServiceEchoOptionalBoolArgs,
		newTestServiceEchoOptionalBoolResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalInt32": kitex.NewMethodInfo(
		echoOptionalInt32Handler,
		newTestServiceEchoOptionalInt32Args,
		newTestServiceEchoOptionalInt32Result,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalString": kitex.NewMethodInfo(
		echoOptionalStringHandler,
		newTestServiceEchoOptionalStringArgs,
		newTestServiceEchoOptionalStringResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalBoolList": kitex.NewMethodInfo(
		echoOptionalBoolListHandler,
		newTestServiceEchoOptionalBoolListArgs,
		newTestServiceEchoOptionalBoolListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalInt32List": kitex.NewMethodInfo(
		echoOptionalInt32ListHandler,
		newTestServiceEchoOptionalInt32ListArgs,
		newTestServiceEchoOptionalInt32ListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalStringList": kitex.NewMethodInfo(
		echoOptionalStringListHandler,
		newTestServiceEchoOptionalStringListArgs,
		newTestServiceEchoOptionalStringListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalBool2BoolMap": kitex.NewMethodInfo(
		echoOptionalBool2BoolMapHandler,
		newTestServiceEchoOptionalBool2BoolMapArgs,
		newTestServiceEchoOptionalBool2BoolMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalBool2Int32Map": kitex.NewMethodInfo(
		echoOptionalBool2Int32MapHandler,
		newTestServiceEchoOptionalBool2Int32MapArgs,
		newTestServiceEchoOptionalBool2Int32MapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalBool2StringMap": kitex.NewMethodInfo(
		echoOptionalBool2StringMapHandler,
		newTestServiceEchoOptionalBool2StringMapArgs,
		newTestServiceEchoOptionalBool2StringMapResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalStruct": kitex.NewMethodInfo(
		echoOptionalStructHandler,
		newTestServiceEchoOptionalStructArgs,
		newTestServiceEchoOptionalStructResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalMultiBoolRequest": kitex.NewMethodInfo(
		echoOptionalMultiBoolRequestHandler,
		newTestServiceEchoOptionalMultiBoolRequestArgs,
		newTestServiceEchoOptionalMultiBoolRequestResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalMultiInt32Request": kitex.NewMethodInfo(
		echoOptionalMultiInt32RequestHandler,
		newTestServiceEchoOptionalMultiInt32RequestArgs,
		newTestServiceEchoOptionalMultiInt32RequestResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalMultiStringRequest": kitex.NewMethodInfo(
		echoOptionalMultiStringRequestHandler,
		newTestServiceEchoOptionalMultiStringRequestArgs,
		newTestServiceEchoOptionalMultiStringRequestResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalMultiBoolResponse": kitex.NewMethodInfo(
		echoOptionalMultiBoolResponseHandler,
		newTestServiceEchoOptionalMultiBoolResponseArgs,
		newTestServiceEchoOptionalMultiBoolResponseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalMultiInt32Response": kitex.NewMethodInfo(
		echoOptionalMultiInt32ResponseHandler,
		newTestServiceEchoOptionalMultiInt32ResponseArgs,
		newTestServiceEchoOptionalMultiInt32ResponseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOptionalMultiStringResponse": kitex.NewMethodInfo(
		echoOptionalMultiStringResponseHandler,
		newTestServiceEchoOptionalMultiStringResponseArgs,
		newTestServiceEchoOptionalMultiStringResponseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoException": kitex.NewMethodInfo(
		echoExceptionHandler,
		newTestServiceEchoExceptionArgs,
		newTestServiceEchoExceptionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoCustomizedException": kitex.NewMethodInfo(
		echoCustomizedExceptionHandler,
		newTestServiceEchoCustomizedExceptionArgs,
		newTestServiceEchoCustomizedExceptionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoJavaEnum": kitex.NewMethodInfo(
		echoJavaEnumHandler,
		newTestServiceEchoJavaEnumArgs,
		newTestServiceEchoJavaEnumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoGeneric": kitex.NewMethodInfo(
		echoGenericHandler,
		newTestServiceEchoGenericArgs,
		newTestServiceEchoGenericResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoJavaDate": kitex.NewMethodInfo(
		echoJavaDateHandler,
		newTestServiceEchoJavaDateArgs,
		newTestServiceEchoJavaDateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoJavaDateList": kitex.NewMethodInfo(
		echoJavaDateListHandler,
		newTestServiceEchoJavaDateListArgs,
		newTestServiceEchoJavaDateListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoJavaBigDecimal": kitex.NewMethodInfo(
		echoJavaBigDecimalHandler,
		newTestServiceEchoJavaBigDecimalArgs,
		newTestServiceEchoJavaBigDecimalResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoJavaBigInteger": kitex.NewMethodInfo(
		echoJavaBigIntegerHandler,
		newTestServiceEchoJavaBigIntegerArgs,
		newTestServiceEchoJavaBigIntegerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	testServiceServiceInfo                = NewServiceInfo()
	testServiceServiceInfoForClient       = NewServiceInfoForClient()
	testServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return testServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return testServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return testServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "TestService"
	handlerType := (*echo.TestService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName":     "echo",
		"ServiceFilePath": `api.thrift`,
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func echoRetByteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*echo.TestServiceEchoRetByteArgs)
	realResult := result.(*echo.TestServiceEchoRetByteResult)
	success, err := handler.(echo.TestService).EchoRetByte(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoRetByteArgs() interface{} {
	return echo.NewTestServiceEchoRetByteArgs()
}

func newTestServiceEchoRetByteResult() interface{} {
	return echo.NewTestServiceEchoRetByteResult()
}

func echoRetBoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*echo.TestServiceEchoRetBoolArgs)
	realResult := result.(*echo.TestServiceEchoRetBoolResult)
	success, err := handler.(echo.TestService).EchoRetBool(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoRetBoolArgs() interface{} {
	return echo.NewTestServiceEchoRetBoolArgs()
}

func newTestServiceEchoRetBoolResult() interface{} {
	return echo.NewTestServiceEchoRetBoolResult()
}

func echoRetInt16Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*echo.TestServiceEchoRetInt16Args)
	realResult := result.(*echo.TestServiceEchoRetInt16Result)
	success, err := handler.(echo.TestService).EchoRetInt16(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoRetInt16Args() interface{} {
	return echo.NewTestServiceEchoRetInt16Args()
}

func newTestServiceEchoRetInt16Result() interface{} {
	return echo.NewTestServiceEchoRetInt16Result()
}

func echoRetInt32Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*echo.TestServiceEchoRetInt32Args)
	realResult := result.(*echo.TestServiceEchoRetInt32Result)
	success, err := handler.(echo.TestService).EchoRetInt32(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoRetInt32Args() interface{} {
	return echo.NewTestServiceEchoRetInt32Args()
}

func newTestServiceEchoRetInt32Result() interface{} {
	return echo.NewTestServiceEchoRetInt32Result()
}

func echoRetInt64Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*echo.TestServiceEchoRetInt64Args)
	realResult := result.(*echo.TestServiceEchoRetInt64Result)
	success, err := handler.(echo.TestService).EchoRetInt64(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoRetInt64Args() interface{} {
	return echo.NewTestServiceEchoRetInt64Args()
}

func newTestServiceEchoRetInt64Result() interface{} {
	return echo.NewTestServiceEchoRetInt64Result()
}

func echoRetFloatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*echo.TestServiceEchoRetFloatArgs)
	realResult := result.(*echo.TestServiceEchoRetFloatResult)
	success, err := handler.(echo.TestService).EchoRetFloat(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoRetFloatArgs() interface{} {
	return echo.NewTestServiceEchoRetFloatArgs()
}

func newTestServiceEchoRetFloatResult() interface{} {
	return echo.NewTestServiceEchoRetFloatResult()
}

func echoRetDoubleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*echo.TestServiceEchoRetDoubleArgs)
	realResult := result.(*echo.TestServiceEchoRetDoubleResult)
	success, err := handler.(echo.TestService).EchoRetDouble(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoRetDoubleArgs() interface{} {
	return echo.NewTestServiceEchoRetDoubleArgs()
}

func newTestServiceEchoRetDoubleResult() interface{} {
	return echo.NewTestServiceEchoRetDoubleResult()
}

func echoRetStringHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*echo.TestServiceEchoRetStringArgs)
	realResult := result.(*echo.TestServiceEchoRetStringResult)
	success, err := handler.(echo.TestService).EchoRetString(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoRetStringArgs() interface{} {
	return echo.NewTestServiceEchoRetStringArgs()
}

func newTestServiceEchoRetStringResult() interface{} {
	return echo.NewTestServiceEchoRetStringResult()
}

func echoIntHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoIntArgs)
	realResult := result.(*echo.TestServiceEchoIntResult)
	success, err := handler.(echo.TestService).EchoInt(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoIntArgs() interface{} {
	return echo.NewTestServiceEchoIntArgs()
}

func newTestServiceEchoIntResult() interface{} {
	return echo.NewTestServiceEchoIntResult()
}

func echoBoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBoolArgs)
	realResult := result.(*echo.TestServiceEchoBoolResult)
	success, err := handler.(echo.TestService).EchoBool(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoBoolArgs() interface{} {
	return echo.NewTestServiceEchoBoolArgs()
}

func newTestServiceEchoBoolResult() interface{} {
	return echo.NewTestServiceEchoBoolResult()
}

func echoByteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoByteArgs)
	realResult := result.(*echo.TestServiceEchoByteResult)
	success, err := handler.(echo.TestService).EchoByte(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoByteArgs() interface{} {
	return echo.NewTestServiceEchoByteArgs()
}

func newTestServiceEchoByteResult() interface{} {
	return echo.NewTestServiceEchoByteResult()
}

func echoInt16Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoInt16Args)
	realResult := result.(*echo.TestServiceEchoInt16Result)
	success, err := handler.(echo.TestService).EchoInt16(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoInt16Args() interface{} {
	return echo.NewTestServiceEchoInt16Args()
}

func newTestServiceEchoInt16Result() interface{} {
	return echo.NewTestServiceEchoInt16Result()
}

func echoInt32Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoInt32Args)
	realResult := result.(*echo.TestServiceEchoInt32Result)
	success, err := handler.(echo.TestService).EchoInt32(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoInt32Args() interface{} {
	return echo.NewTestServiceEchoInt32Args()
}

func newTestServiceEchoInt32Result() interface{} {
	return echo.NewTestServiceEchoInt32Result()
}

func echoInt64Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoInt64Args)
	realResult := result.(*echo.TestServiceEchoInt64Result)
	success, err := handler.(echo.TestService).EchoInt64(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoInt64Args() interface{} {
	return echo.NewTestServiceEchoInt64Args()
}

func newTestServiceEchoInt64Result() interface{} {
	return echo.NewTestServiceEchoInt64Result()
}

func echoFloatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoFloatArgs)
	realResult := result.(*echo.TestServiceEchoFloatResult)
	success, err := handler.(echo.TestService).EchoFloat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoFloatArgs() interface{} {
	return echo.NewTestServiceEchoFloatArgs()
}

func newTestServiceEchoFloatResult() interface{} {
	return echo.NewTestServiceEchoFloatResult()
}

func echoDoubleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoDoubleArgs)
	realResult := result.(*echo.TestServiceEchoDoubleResult)
	success, err := handler.(echo.TestService).EchoDouble(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoDoubleArgs() interface{} {
	return echo.NewTestServiceEchoDoubleArgs()
}

func newTestServiceEchoDoubleResult() interface{} {
	return echo.NewTestServiceEchoDoubleResult()
}

func echoStringHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoStringArgs)
	realResult := result.(*echo.TestServiceEchoStringResult)
	success, err := handler.(echo.TestService).EchoString(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoStringArgs() interface{} {
	return echo.NewTestServiceEchoStringArgs()
}

func newTestServiceEchoStringResult() interface{} {
	return echo.NewTestServiceEchoStringResult()
}

func echoBinaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBinaryArgs)
	realResult := result.(*echo.TestServiceEchoBinaryResult)
	success, err := handler.(echo.TestService).EchoBinary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBinaryArgs() interface{} {
	return echo.NewTestServiceEchoBinaryArgs()
}

func newTestServiceEchoBinaryResult() interface{} {
	return echo.NewTestServiceEchoBinaryResult()
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoArgs)
	realResult := result.(*echo.TestServiceEchoResult)
	success, err := handler.(echo.TestService).Echo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoArgs() interface{} {
	return echo.NewTestServiceEchoArgs()
}

func newTestServiceEchoResult() interface{} {
	return echo.NewTestServiceEchoResult()
}

func echoBoolListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBoolListArgs)
	realResult := result.(*echo.TestServiceEchoBoolListResult)
	success, err := handler.(echo.TestService).EchoBoolList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBoolListArgs() interface{} {
	return echo.NewTestServiceEchoBoolListArgs()
}

func newTestServiceEchoBoolListResult() interface{} {
	return echo.NewTestServiceEchoBoolListResult()
}

func echoByteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoByteListArgs)
	realResult := result.(*echo.TestServiceEchoByteListResult)
	success, err := handler.(echo.TestService).EchoByteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoByteListArgs() interface{} {
	return echo.NewTestServiceEchoByteListArgs()
}

func newTestServiceEchoByteListResult() interface{} {
	return echo.NewTestServiceEchoByteListResult()
}

func echoInt16ListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoInt16ListArgs)
	realResult := result.(*echo.TestServiceEchoInt16ListResult)
	success, err := handler.(echo.TestService).EchoInt16List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoInt16ListArgs() interface{} {
	return echo.NewTestServiceEchoInt16ListArgs()
}

func newTestServiceEchoInt16ListResult() interface{} {
	return echo.NewTestServiceEchoInt16ListResult()
}

func echoInt32ListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoInt32ListArgs)
	realResult := result.(*echo.TestServiceEchoInt32ListResult)
	success, err := handler.(echo.TestService).EchoInt32List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoInt32ListArgs() interface{} {
	return echo.NewTestServiceEchoInt32ListArgs()
}

func newTestServiceEchoInt32ListResult() interface{} {
	return echo.NewTestServiceEchoInt32ListResult()
}

func echoInt64ListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoInt64ListArgs)
	realResult := result.(*echo.TestServiceEchoInt64ListResult)
	success, err := handler.(echo.TestService).EchoInt64List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoInt64ListArgs() interface{} {
	return echo.NewTestServiceEchoInt64ListArgs()
}

func newTestServiceEchoInt64ListResult() interface{} {
	return echo.NewTestServiceEchoInt64ListResult()
}

func echoFloatListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoFloatListArgs)
	realResult := result.(*echo.TestServiceEchoFloatListResult)
	success, err := handler.(echo.TestService).EchoFloatList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoFloatListArgs() interface{} {
	return echo.NewTestServiceEchoFloatListArgs()
}

func newTestServiceEchoFloatListResult() interface{} {
	return echo.NewTestServiceEchoFloatListResult()
}

func echoDoubleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoDoubleListArgs)
	realResult := result.(*echo.TestServiceEchoDoubleListResult)
	success, err := handler.(echo.TestService).EchoDoubleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoDoubleListArgs() interface{} {
	return echo.NewTestServiceEchoDoubleListArgs()
}

func newTestServiceEchoDoubleListResult() interface{} {
	return echo.NewTestServiceEchoDoubleListResult()
}

func echoStringListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoStringListArgs)
	realResult := result.(*echo.TestServiceEchoStringListResult)
	success, err := handler.(echo.TestService).EchoStringList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoStringListArgs() interface{} {
	return echo.NewTestServiceEchoStringListArgs()
}

func newTestServiceEchoStringListResult() interface{} {
	return echo.NewTestServiceEchoStringListResult()
}

func echoBinaryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBinaryListArgs)
	realResult := result.(*echo.TestServiceEchoBinaryListResult)
	success, err := handler.(echo.TestService).EchoBinaryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBinaryListArgs() interface{} {
	return echo.NewTestServiceEchoBinaryListArgs()
}

func newTestServiceEchoBinaryListResult() interface{} {
	return echo.NewTestServiceEchoBinaryListResult()
}

func echoBool2BoolMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2BoolMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2BoolMapResult)
	success, err := handler.(echo.TestService).EchoBool2BoolMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2BoolMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2BoolMapArgs()
}

func newTestServiceEchoBool2BoolMapResult() interface{} {
	return echo.NewTestServiceEchoBool2BoolMapResult()
}

func echoBool2ByteMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2ByteMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2ByteMapResult)
	success, err := handler.(echo.TestService).EchoBool2ByteMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2ByteMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2ByteMapArgs()
}

func newTestServiceEchoBool2ByteMapResult() interface{} {
	return echo.NewTestServiceEchoBool2ByteMapResult()
}

func echoBool2Int16MapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2Int16MapArgs)
	realResult := result.(*echo.TestServiceEchoBool2Int16MapResult)
	success, err := handler.(echo.TestService).EchoBool2Int16Map(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2Int16MapArgs() interface{} {
	return echo.NewTestServiceEchoBool2Int16MapArgs()
}

func newTestServiceEchoBool2Int16MapResult() interface{} {
	return echo.NewTestServiceEchoBool2Int16MapResult()
}

func echoBool2Int32MapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2Int32MapArgs)
	realResult := result.(*echo.TestServiceEchoBool2Int32MapResult)
	success, err := handler.(echo.TestService).EchoBool2Int32Map(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2Int32MapArgs() interface{} {
	return echo.NewTestServiceEchoBool2Int32MapArgs()
}

func newTestServiceEchoBool2Int32MapResult() interface{} {
	return echo.NewTestServiceEchoBool2Int32MapResult()
}

func echoBool2Int64MapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2Int64MapArgs)
	realResult := result.(*echo.TestServiceEchoBool2Int64MapResult)
	success, err := handler.(echo.TestService).EchoBool2Int64Map(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2Int64MapArgs() interface{} {
	return echo.NewTestServiceEchoBool2Int64MapArgs()
}

func newTestServiceEchoBool2Int64MapResult() interface{} {
	return echo.NewTestServiceEchoBool2Int64MapResult()
}

func echoBool2FloatMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2FloatMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2FloatMapResult)
	success, err := handler.(echo.TestService).EchoBool2FloatMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2FloatMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2FloatMapArgs()
}

func newTestServiceEchoBool2FloatMapResult() interface{} {
	return echo.NewTestServiceEchoBool2FloatMapResult()
}

func echoBool2DoubleMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2DoubleMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2DoubleMapResult)
	success, err := handler.(echo.TestService).EchoBool2DoubleMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2DoubleMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2DoubleMapArgs()
}

func newTestServiceEchoBool2DoubleMapResult() interface{} {
	return echo.NewTestServiceEchoBool2DoubleMapResult()
}

func echoBool2StringMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2StringMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2StringMapResult)
	success, err := handler.(echo.TestService).EchoBool2StringMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2StringMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2StringMapArgs()
}

func newTestServiceEchoBool2StringMapResult() interface{} {
	return echo.NewTestServiceEchoBool2StringMapResult()
}

func echoBool2BinaryMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2BinaryMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2BinaryMapResult)
	success, err := handler.(echo.TestService).EchoBool2BinaryMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2BinaryMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2BinaryMapArgs()
}

func newTestServiceEchoBool2BinaryMapResult() interface{} {
	return echo.NewTestServiceEchoBool2BinaryMapResult()
}

func echoBool2BoolListMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2BoolListMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2BoolListMapResult)
	success, err := handler.(echo.TestService).EchoBool2BoolListMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2BoolListMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2BoolListMapArgs()
}

func newTestServiceEchoBool2BoolListMapResult() interface{} {
	return echo.NewTestServiceEchoBool2BoolListMapResult()
}

func echoBool2ByteListMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2ByteListMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2ByteListMapResult)
	success, err := handler.(echo.TestService).EchoBool2ByteListMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2ByteListMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2ByteListMapArgs()
}

func newTestServiceEchoBool2ByteListMapResult() interface{} {
	return echo.NewTestServiceEchoBool2ByteListMapResult()
}

func echoBool2Int16ListMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2Int16ListMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2Int16ListMapResult)
	success, err := handler.(echo.TestService).EchoBool2Int16ListMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2Int16ListMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2Int16ListMapArgs()
}

func newTestServiceEchoBool2Int16ListMapResult() interface{} {
	return echo.NewTestServiceEchoBool2Int16ListMapResult()
}

func echoBool2Int32ListMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2Int32ListMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2Int32ListMapResult)
	success, err := handler.(echo.TestService).EchoBool2Int32ListMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2Int32ListMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2Int32ListMapArgs()
}

func newTestServiceEchoBool2Int32ListMapResult() interface{} {
	return echo.NewTestServiceEchoBool2Int32ListMapResult()
}

func echoBool2Int64ListMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2Int64ListMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2Int64ListMapResult)
	success, err := handler.(echo.TestService).EchoBool2Int64ListMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2Int64ListMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2Int64ListMapArgs()
}

func newTestServiceEchoBool2Int64ListMapResult() interface{} {
	return echo.NewTestServiceEchoBool2Int64ListMapResult()
}

func echoBool2FloatListMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2FloatListMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2FloatListMapResult)
	success, err := handler.(echo.TestService).EchoBool2FloatListMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2FloatListMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2FloatListMapArgs()
}

func newTestServiceEchoBool2FloatListMapResult() interface{} {
	return echo.NewTestServiceEchoBool2FloatListMapResult()
}

func echoBool2DoubleListMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2DoubleListMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2DoubleListMapResult)
	success, err := handler.(echo.TestService).EchoBool2DoubleListMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2DoubleListMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2DoubleListMapArgs()
}

func newTestServiceEchoBool2DoubleListMapResult() interface{} {
	return echo.NewTestServiceEchoBool2DoubleListMapResult()
}

func echoBool2StringListMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2StringListMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2StringListMapResult)
	success, err := handler.(echo.TestService).EchoBool2StringListMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2StringListMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2StringListMapArgs()
}

func newTestServiceEchoBool2StringListMapResult() interface{} {
	return echo.NewTestServiceEchoBool2StringListMapResult()
}

func echoBool2BinaryListMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2BinaryListMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2BinaryListMapResult)
	success, err := handler.(echo.TestService).EchoBool2BinaryListMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2BinaryListMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2BinaryListMapArgs()
}

func newTestServiceEchoBool2BinaryListMapResult() interface{} {
	return echo.NewTestServiceEchoBool2BinaryListMapResult()
}

func echoMultiBoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiBoolArgs)
	realResult := result.(*echo.TestServiceEchoMultiBoolResult)
	success, err := handler.(echo.TestService).EchoMultiBool(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiBoolArgs() interface{} {
	return echo.NewTestServiceEchoMultiBoolArgs()
}

func newTestServiceEchoMultiBoolResult() interface{} {
	return echo.NewTestServiceEchoMultiBoolResult()
}

func echoMultiByteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiByteArgs)
	realResult := result.(*echo.TestServiceEchoMultiByteResult)
	success, err := handler.(echo.TestService).EchoMultiByte(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiByteArgs() interface{} {
	return echo.NewTestServiceEchoMultiByteArgs()
}

func newTestServiceEchoMultiByteResult() interface{} {
	return echo.NewTestServiceEchoMultiByteResult()
}

func echoMultiInt16Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiInt16Args)
	realResult := result.(*echo.TestServiceEchoMultiInt16Result)
	success, err := handler.(echo.TestService).EchoMultiInt16(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiInt16Args() interface{} {
	return echo.NewTestServiceEchoMultiInt16Args()
}

func newTestServiceEchoMultiInt16Result() interface{} {
	return echo.NewTestServiceEchoMultiInt16Result()
}

func echoMultiInt32Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiInt32Args)
	realResult := result.(*echo.TestServiceEchoMultiInt32Result)
	success, err := handler.(echo.TestService).EchoMultiInt32(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiInt32Args() interface{} {
	return echo.NewTestServiceEchoMultiInt32Args()
}

func newTestServiceEchoMultiInt32Result() interface{} {
	return echo.NewTestServiceEchoMultiInt32Result()
}

func echoMultiInt64Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiInt64Args)
	realResult := result.(*echo.TestServiceEchoMultiInt64Result)
	success, err := handler.(echo.TestService).EchoMultiInt64(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiInt64Args() interface{} {
	return echo.NewTestServiceEchoMultiInt64Args()
}

func newTestServiceEchoMultiInt64Result() interface{} {
	return echo.NewTestServiceEchoMultiInt64Result()
}

func echoMultiFloatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiFloatArgs)
	realResult := result.(*echo.TestServiceEchoMultiFloatResult)
	success, err := handler.(echo.TestService).EchoMultiFloat(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiFloatArgs() interface{} {
	return echo.NewTestServiceEchoMultiFloatArgs()
}

func newTestServiceEchoMultiFloatResult() interface{} {
	return echo.NewTestServiceEchoMultiFloatResult()
}

func echoMultiDoubleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiDoubleArgs)
	realResult := result.(*echo.TestServiceEchoMultiDoubleResult)
	success, err := handler.(echo.TestService).EchoMultiDouble(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiDoubleArgs() interface{} {
	return echo.NewTestServiceEchoMultiDoubleArgs()
}

func newTestServiceEchoMultiDoubleResult() interface{} {
	return echo.NewTestServiceEchoMultiDoubleResult()
}

func echoMultiStringHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiStringArgs)
	realResult := result.(*echo.TestServiceEchoMultiStringResult)
	success, err := handler.(echo.TestService).EchoMultiString(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiStringArgs() interface{} {
	return echo.NewTestServiceEchoMultiStringArgs()
}

func newTestServiceEchoMultiStringResult() interface{} {
	return echo.NewTestServiceEchoMultiStringResult()
}

func echoBaseBoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseBoolArgs)
	realResult := result.(*echo.TestServiceEchoBaseBoolResult)
	success, err := handler.(echo.TestService).EchoBaseBool(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoBaseBoolArgs() interface{} {
	return echo.NewTestServiceEchoBaseBoolArgs()
}

func newTestServiceEchoBaseBoolResult() interface{} {
	return echo.NewTestServiceEchoBaseBoolResult()
}

func echoBaseByteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseByteArgs)
	realResult := result.(*echo.TestServiceEchoBaseByteResult)
	success, err := handler.(echo.TestService).EchoBaseByte(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoBaseByteArgs() interface{} {
	return echo.NewTestServiceEchoBaseByteArgs()
}

func newTestServiceEchoBaseByteResult() interface{} {
	return echo.NewTestServiceEchoBaseByteResult()
}

func echoBaseInt16Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseInt16Args)
	realResult := result.(*echo.TestServiceEchoBaseInt16Result)
	success, err := handler.(echo.TestService).EchoBaseInt16(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoBaseInt16Args() interface{} {
	return echo.NewTestServiceEchoBaseInt16Args()
}

func newTestServiceEchoBaseInt16Result() interface{} {
	return echo.NewTestServiceEchoBaseInt16Result()
}

func echoBaseInt32Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseInt32Args)
	realResult := result.(*echo.TestServiceEchoBaseInt32Result)
	success, err := handler.(echo.TestService).EchoBaseInt32(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoBaseInt32Args() interface{} {
	return echo.NewTestServiceEchoBaseInt32Args()
}

func newTestServiceEchoBaseInt32Result() interface{} {
	return echo.NewTestServiceEchoBaseInt32Result()
}

func echoBaseInt64Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseInt64Args)
	realResult := result.(*echo.TestServiceEchoBaseInt64Result)
	success, err := handler.(echo.TestService).EchoBaseInt64(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoBaseInt64Args() interface{} {
	return echo.NewTestServiceEchoBaseInt64Args()
}

func newTestServiceEchoBaseInt64Result() interface{} {
	return echo.NewTestServiceEchoBaseInt64Result()
}

func echoBaseFloatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseFloatArgs)
	realResult := result.(*echo.TestServiceEchoBaseFloatResult)
	success, err := handler.(echo.TestService).EchoBaseFloat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoBaseFloatArgs() interface{} {
	return echo.NewTestServiceEchoBaseFloatArgs()
}

func newTestServiceEchoBaseFloatResult() interface{} {
	return echo.NewTestServiceEchoBaseFloatResult()
}

func echoBaseDoubleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseDoubleArgs)
	realResult := result.(*echo.TestServiceEchoBaseDoubleResult)
	success, err := handler.(echo.TestService).EchoBaseDouble(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoBaseDoubleArgs() interface{} {
	return echo.NewTestServiceEchoBaseDoubleArgs()
}

func newTestServiceEchoBaseDoubleResult() interface{} {
	return echo.NewTestServiceEchoBaseDoubleResult()
}

func echoBaseBoolListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseBoolListArgs)
	realResult := result.(*echo.TestServiceEchoBaseBoolListResult)
	success, err := handler.(echo.TestService).EchoBaseBoolList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBaseBoolListArgs() interface{} {
	return echo.NewTestServiceEchoBaseBoolListArgs()
}

func newTestServiceEchoBaseBoolListResult() interface{} {
	return echo.NewTestServiceEchoBaseBoolListResult()
}

func echoBaseByteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseByteListArgs)
	realResult := result.(*echo.TestServiceEchoBaseByteListResult)
	success, err := handler.(echo.TestService).EchoBaseByteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBaseByteListArgs() interface{} {
	return echo.NewTestServiceEchoBaseByteListArgs()
}

func newTestServiceEchoBaseByteListResult() interface{} {
	return echo.NewTestServiceEchoBaseByteListResult()
}

func echoBaseInt16ListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseInt16ListArgs)
	realResult := result.(*echo.TestServiceEchoBaseInt16ListResult)
	success, err := handler.(echo.TestService).EchoBaseInt16List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBaseInt16ListArgs() interface{} {
	return echo.NewTestServiceEchoBaseInt16ListArgs()
}

func newTestServiceEchoBaseInt16ListResult() interface{} {
	return echo.NewTestServiceEchoBaseInt16ListResult()
}

func echoBaseInt32ListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseInt32ListArgs)
	realResult := result.(*echo.TestServiceEchoBaseInt32ListResult)
	success, err := handler.(echo.TestService).EchoBaseInt32List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBaseInt32ListArgs() interface{} {
	return echo.NewTestServiceEchoBaseInt32ListArgs()
}

func newTestServiceEchoBaseInt32ListResult() interface{} {
	return echo.NewTestServiceEchoBaseInt32ListResult()
}

func echoBaseInt64ListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseInt64ListArgs)
	realResult := result.(*echo.TestServiceEchoBaseInt64ListResult)
	success, err := handler.(echo.TestService).EchoBaseInt64List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBaseInt64ListArgs() interface{} {
	return echo.NewTestServiceEchoBaseInt64ListArgs()
}

func newTestServiceEchoBaseInt64ListResult() interface{} {
	return echo.NewTestServiceEchoBaseInt64ListResult()
}

func echoBaseFloatListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseFloatListArgs)
	realResult := result.(*echo.TestServiceEchoBaseFloatListResult)
	success, err := handler.(echo.TestService).EchoBaseFloatList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBaseFloatListArgs() interface{} {
	return echo.NewTestServiceEchoBaseFloatListArgs()
}

func newTestServiceEchoBaseFloatListResult() interface{} {
	return echo.NewTestServiceEchoBaseFloatListResult()
}

func echoBaseDoubleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBaseDoubleListArgs)
	realResult := result.(*echo.TestServiceEchoBaseDoubleListResult)
	success, err := handler.(echo.TestService).EchoBaseDoubleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBaseDoubleListArgs() interface{} {
	return echo.NewTestServiceEchoBaseDoubleListArgs()
}

func newTestServiceEchoBaseDoubleListResult() interface{} {
	return echo.NewTestServiceEchoBaseDoubleListResult()
}

func echoBool2BoolBaseMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2BoolBaseMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2BoolBaseMapResult)
	success, err := handler.(echo.TestService).EchoBool2BoolBaseMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2BoolBaseMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2BoolBaseMapArgs()
}

func newTestServiceEchoBool2BoolBaseMapResult() interface{} {
	return echo.NewTestServiceEchoBool2BoolBaseMapResult()
}

func echoBool2ByteBaseMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2ByteBaseMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2ByteBaseMapResult)
	success, err := handler.(echo.TestService).EchoBool2ByteBaseMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2ByteBaseMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2ByteBaseMapArgs()
}

func newTestServiceEchoBool2ByteBaseMapResult() interface{} {
	return echo.NewTestServiceEchoBool2ByteBaseMapResult()
}

func echoBool2Int16BaseMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2Int16BaseMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2Int16BaseMapResult)
	success, err := handler.(echo.TestService).EchoBool2Int16BaseMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2Int16BaseMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2Int16BaseMapArgs()
}

func newTestServiceEchoBool2Int16BaseMapResult() interface{} {
	return echo.NewTestServiceEchoBool2Int16BaseMapResult()
}

func echoBool2Int32BaseMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2Int32BaseMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2Int32BaseMapResult)
	success, err := handler.(echo.TestService).EchoBool2Int32BaseMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2Int32BaseMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2Int32BaseMapArgs()
}

func newTestServiceEchoBool2Int32BaseMapResult() interface{} {
	return echo.NewTestServiceEchoBool2Int32BaseMapResult()
}

func echoBool2Int64BaseMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2Int64BaseMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2Int64BaseMapResult)
	success, err := handler.(echo.TestService).EchoBool2Int64BaseMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2Int64BaseMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2Int64BaseMapArgs()
}

func newTestServiceEchoBool2Int64BaseMapResult() interface{} {
	return echo.NewTestServiceEchoBool2Int64BaseMapResult()
}

func echoBool2FloatBaseMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2FloatBaseMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2FloatBaseMapResult)
	success, err := handler.(echo.TestService).EchoBool2FloatBaseMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2FloatBaseMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2FloatBaseMapArgs()
}

func newTestServiceEchoBool2FloatBaseMapResult() interface{} {
	return echo.NewTestServiceEchoBool2FloatBaseMapResult()
}

func echoBool2DoubleBaseMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoBool2DoubleBaseMapArgs)
	realResult := result.(*echo.TestServiceEchoBool2DoubleBaseMapResult)
	success, err := handler.(echo.TestService).EchoBool2DoubleBaseMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoBool2DoubleBaseMapArgs() interface{} {
	return echo.NewTestServiceEchoBool2DoubleBaseMapArgs()
}

func newTestServiceEchoBool2DoubleBaseMapResult() interface{} {
	return echo.NewTestServiceEchoBool2DoubleBaseMapResult()
}

func echoMultiBaseBoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiBaseBoolArgs)
	realResult := result.(*echo.TestServiceEchoMultiBaseBoolResult)
	success, err := handler.(echo.TestService).EchoMultiBaseBool(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiBaseBoolArgs() interface{} {
	return echo.NewTestServiceEchoMultiBaseBoolArgs()
}

func newTestServiceEchoMultiBaseBoolResult() interface{} {
	return echo.NewTestServiceEchoMultiBaseBoolResult()
}

func echoMultiBaseByteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiBaseByteArgs)
	realResult := result.(*echo.TestServiceEchoMultiBaseByteResult)
	success, err := handler.(echo.TestService).EchoMultiBaseByte(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiBaseByteArgs() interface{} {
	return echo.NewTestServiceEchoMultiBaseByteArgs()
}

func newTestServiceEchoMultiBaseByteResult() interface{} {
	return echo.NewTestServiceEchoMultiBaseByteResult()
}

func echoMultiBaseInt16Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiBaseInt16Args)
	realResult := result.(*echo.TestServiceEchoMultiBaseInt16Result)
	success, err := handler.(echo.TestService).EchoMultiBaseInt16(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiBaseInt16Args() interface{} {
	return echo.NewTestServiceEchoMultiBaseInt16Args()
}

func newTestServiceEchoMultiBaseInt16Result() interface{} {
	return echo.NewTestServiceEchoMultiBaseInt16Result()
}

func echoMultiBaseInt32Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiBaseInt32Args)
	realResult := result.(*echo.TestServiceEchoMultiBaseInt32Result)
	success, err := handler.(echo.TestService).EchoMultiBaseInt32(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiBaseInt32Args() interface{} {
	return echo.NewTestServiceEchoMultiBaseInt32Args()
}

func newTestServiceEchoMultiBaseInt32Result() interface{} {
	return echo.NewTestServiceEchoMultiBaseInt32Result()
}

func echoMultiBaseInt64Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiBaseInt64Args)
	realResult := result.(*echo.TestServiceEchoMultiBaseInt64Result)
	success, err := handler.(echo.TestService).EchoMultiBaseInt64(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiBaseInt64Args() interface{} {
	return echo.NewTestServiceEchoMultiBaseInt64Args()
}

func newTestServiceEchoMultiBaseInt64Result() interface{} {
	return echo.NewTestServiceEchoMultiBaseInt64Result()
}

func echoMultiBaseFloatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiBaseFloatArgs)
	realResult := result.(*echo.TestServiceEchoMultiBaseFloatResult)
	success, err := handler.(echo.TestService).EchoMultiBaseFloat(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiBaseFloatArgs() interface{} {
	return echo.NewTestServiceEchoMultiBaseFloatArgs()
}

func newTestServiceEchoMultiBaseFloatResult() interface{} {
	return echo.NewTestServiceEchoMultiBaseFloatResult()
}

func echoMultiBaseDoubleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMultiBaseDoubleArgs)
	realResult := result.(*echo.TestServiceEchoMultiBaseDoubleResult)
	success, err := handler.(echo.TestService).EchoMultiBaseDouble(ctx, realArg.BaseReq, realArg.ListReq, realArg.MapReq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoMultiBaseDoubleArgs() interface{} {
	return echo.NewTestServiceEchoMultiBaseDoubleArgs()
}

func newTestServiceEchoMultiBaseDoubleResult() interface{} {
	return echo.NewTestServiceEchoMultiBaseDoubleResult()
}

func echoMethodAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMethodAArgs)
	realResult := result.(*echo.TestServiceEchoMethodAResult)
	success, err := handler.(echo.TestService).EchoMethodA(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoMethodAArgs() interface{} {
	return echo.NewTestServiceEchoMethodAArgs()
}

func newTestServiceEchoMethodAResult() interface{} {
	return echo.NewTestServiceEchoMethodAResult()
}

func echoMethodBHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMethodBArgs)
	realResult := result.(*echo.TestServiceEchoMethodBResult)
	success, err := handler.(echo.TestService).EchoMethodB(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoMethodBArgs() interface{} {
	return echo.NewTestServiceEchoMethodBArgs()
}

func newTestServiceEchoMethodBResult() interface{} {
	return echo.NewTestServiceEchoMethodBResult()
}

func echoMethodCHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMethodCArgs)
	realResult := result.(*echo.TestServiceEchoMethodCResult)
	success, err := handler.(echo.TestService).EchoMethodC(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoMethodCArgs() interface{} {
	return echo.NewTestServiceEchoMethodCArgs()
}

func newTestServiceEchoMethodCResult() interface{} {
	return echo.NewTestServiceEchoMethodCResult()
}

func echoMethodDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoMethodDArgs)
	realResult := result.(*echo.TestServiceEchoMethodDResult)
	success, err := handler.(echo.TestService).EchoMethodD(ctx, realArg.Req1, realArg.Req2)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoMethodDArgs() interface{} {
	return echo.NewTestServiceEchoMethodDArgs()
}

func newTestServiceEchoMethodDResult() interface{} {
	return echo.NewTestServiceEchoMethodDResult()
}

func echoOptionalBoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalBoolArgs)
	realResult := result.(*echo.TestServiceEchoOptionalBoolResult)
	success, err := handler.(echo.TestService).EchoOptionalBool(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoOptionalBoolArgs() interface{} {
	return echo.NewTestServiceEchoOptionalBoolArgs()
}

func newTestServiceEchoOptionalBoolResult() interface{} {
	return echo.NewTestServiceEchoOptionalBoolResult()
}

func echoOptionalInt32Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalInt32Args)
	realResult := result.(*echo.TestServiceEchoOptionalInt32Result)
	success, err := handler.(echo.TestService).EchoOptionalInt32(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoOptionalInt32Args() interface{} {
	return echo.NewTestServiceEchoOptionalInt32Args()
}

func newTestServiceEchoOptionalInt32Result() interface{} {
	return echo.NewTestServiceEchoOptionalInt32Result()
}

func echoOptionalStringHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalStringArgs)
	realResult := result.(*echo.TestServiceEchoOptionalStringResult)
	success, err := handler.(echo.TestService).EchoOptionalString(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoOptionalStringArgs() interface{} {
	return echo.NewTestServiceEchoOptionalStringArgs()
}

func newTestServiceEchoOptionalStringResult() interface{} {
	return echo.NewTestServiceEchoOptionalStringResult()
}

func echoOptionalBoolListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalBoolListArgs)
	realResult := result.(*echo.TestServiceEchoOptionalBoolListResult)
	success, err := handler.(echo.TestService).EchoOptionalBoolList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalBoolListArgs() interface{} {
	return echo.NewTestServiceEchoOptionalBoolListArgs()
}

func newTestServiceEchoOptionalBoolListResult() interface{} {
	return echo.NewTestServiceEchoOptionalBoolListResult()
}

func echoOptionalInt32ListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalInt32ListArgs)
	realResult := result.(*echo.TestServiceEchoOptionalInt32ListResult)
	success, err := handler.(echo.TestService).EchoOptionalInt32List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalInt32ListArgs() interface{} {
	return echo.NewTestServiceEchoOptionalInt32ListArgs()
}

func newTestServiceEchoOptionalInt32ListResult() interface{} {
	return echo.NewTestServiceEchoOptionalInt32ListResult()
}

func echoOptionalStringListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalStringListArgs)
	realResult := result.(*echo.TestServiceEchoOptionalStringListResult)
	success, err := handler.(echo.TestService).EchoOptionalStringList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalStringListArgs() interface{} {
	return echo.NewTestServiceEchoOptionalStringListArgs()
}

func newTestServiceEchoOptionalStringListResult() interface{} {
	return echo.NewTestServiceEchoOptionalStringListResult()
}

func echoOptionalBool2BoolMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalBool2BoolMapArgs)
	realResult := result.(*echo.TestServiceEchoOptionalBool2BoolMapResult)
	success, err := handler.(echo.TestService).EchoOptionalBool2BoolMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalBool2BoolMapArgs() interface{} {
	return echo.NewTestServiceEchoOptionalBool2BoolMapArgs()
}

func newTestServiceEchoOptionalBool2BoolMapResult() interface{} {
	return echo.NewTestServiceEchoOptionalBool2BoolMapResult()
}

func echoOptionalBool2Int32MapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalBool2Int32MapArgs)
	realResult := result.(*echo.TestServiceEchoOptionalBool2Int32MapResult)
	success, err := handler.(echo.TestService).EchoOptionalBool2Int32Map(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalBool2Int32MapArgs() interface{} {
	return echo.NewTestServiceEchoOptionalBool2Int32MapArgs()
}

func newTestServiceEchoOptionalBool2Int32MapResult() interface{} {
	return echo.NewTestServiceEchoOptionalBool2Int32MapResult()
}

func echoOptionalBool2StringMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalBool2StringMapArgs)
	realResult := result.(*echo.TestServiceEchoOptionalBool2StringMapResult)
	success, err := handler.(echo.TestService).EchoOptionalBool2StringMap(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalBool2StringMapArgs() interface{} {
	return echo.NewTestServiceEchoOptionalBool2StringMapArgs()
}

func newTestServiceEchoOptionalBool2StringMapResult() interface{} {
	return echo.NewTestServiceEchoOptionalBool2StringMapResult()
}

func echoOptionalStructHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalStructArgs)
	realResult := result.(*echo.TestServiceEchoOptionalStructResult)
	success, err := handler.(echo.TestService).EchoOptionalStruct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalStructArgs() interface{} {
	return echo.NewTestServiceEchoOptionalStructArgs()
}

func newTestServiceEchoOptionalStructResult() interface{} {
	return echo.NewTestServiceEchoOptionalStructResult()
}

func echoOptionalMultiBoolRequestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalMultiBoolRequestArgs)
	realResult := result.(*echo.TestServiceEchoOptionalMultiBoolRequestResult)
	success, err := handler.(echo.TestService).EchoOptionalMultiBoolRequest(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoOptionalMultiBoolRequestArgs() interface{} {
	return echo.NewTestServiceEchoOptionalMultiBoolRequestArgs()
}

func newTestServiceEchoOptionalMultiBoolRequestResult() interface{} {
	return echo.NewTestServiceEchoOptionalMultiBoolRequestResult()
}

func echoOptionalMultiInt32RequestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalMultiInt32RequestArgs)
	realResult := result.(*echo.TestServiceEchoOptionalMultiInt32RequestResult)
	success, err := handler.(echo.TestService).EchoOptionalMultiInt32Request(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoOptionalMultiInt32RequestArgs() interface{} {
	return echo.NewTestServiceEchoOptionalMultiInt32RequestArgs()
}

func newTestServiceEchoOptionalMultiInt32RequestResult() interface{} {
	return echo.NewTestServiceEchoOptionalMultiInt32RequestResult()
}

func echoOptionalMultiStringRequestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalMultiStringRequestArgs)
	realResult := result.(*echo.TestServiceEchoOptionalMultiStringRequestResult)
	success, err := handler.(echo.TestService).EchoOptionalMultiStringRequest(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoOptionalMultiStringRequestArgs() interface{} {
	return echo.NewTestServiceEchoOptionalMultiStringRequestArgs()
}

func newTestServiceEchoOptionalMultiStringRequestResult() interface{} {
	return echo.NewTestServiceEchoOptionalMultiStringRequestResult()
}

func echoOptionalMultiBoolResponseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalMultiBoolResponseArgs)
	realResult := result.(*echo.TestServiceEchoOptionalMultiBoolResponseResult)
	success, err := handler.(echo.TestService).EchoOptionalMultiBoolResponse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalMultiBoolResponseArgs() interface{} {
	return echo.NewTestServiceEchoOptionalMultiBoolResponseArgs()
}

func newTestServiceEchoOptionalMultiBoolResponseResult() interface{} {
	return echo.NewTestServiceEchoOptionalMultiBoolResponseResult()
}

func echoOptionalMultiInt32ResponseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalMultiInt32ResponseArgs)
	realResult := result.(*echo.TestServiceEchoOptionalMultiInt32ResponseResult)
	success, err := handler.(echo.TestService).EchoOptionalMultiInt32Response(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalMultiInt32ResponseArgs() interface{} {
	return echo.NewTestServiceEchoOptionalMultiInt32ResponseArgs()
}

func newTestServiceEchoOptionalMultiInt32ResponseResult() interface{} {
	return echo.NewTestServiceEchoOptionalMultiInt32ResponseResult()
}

func echoOptionalMultiStringResponseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoOptionalMultiStringResponseArgs)
	realResult := result.(*echo.TestServiceEchoOptionalMultiStringResponseResult)
	success, err := handler.(echo.TestService).EchoOptionalMultiStringResponse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoOptionalMultiStringResponseArgs() interface{} {
	return echo.NewTestServiceEchoOptionalMultiStringResponseArgs()
}

func newTestServiceEchoOptionalMultiStringResponseResult() interface{} {
	return echo.NewTestServiceEchoOptionalMultiStringResponseResult()
}

func echoExceptionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoExceptionArgs)
	realResult := result.(*echo.TestServiceEchoExceptionResult)
	success, err := handler.(echo.TestService).EchoException(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoExceptionArgs() interface{} {
	return echo.NewTestServiceEchoExceptionArgs()
}

func newTestServiceEchoExceptionResult() interface{} {
	return echo.NewTestServiceEchoExceptionResult()
}

func echoCustomizedExceptionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoCustomizedExceptionArgs)
	realResult := result.(*echo.TestServiceEchoCustomizedExceptionResult)
	success, err := handler.(echo.TestService).EchoCustomizedException(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoCustomizedExceptionArgs() interface{} {
	return echo.NewTestServiceEchoCustomizedExceptionArgs()
}

func newTestServiceEchoCustomizedExceptionResult() interface{} {
	return echo.NewTestServiceEchoCustomizedExceptionResult()
}

func echoJavaEnumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoJavaEnumArgs)
	realResult := result.(*echo.TestServiceEchoJavaEnumResult)
	success, err := handler.(echo.TestService).EchoJavaEnum(ctx, realArg.KitexEnum)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestServiceEchoJavaEnumArgs() interface{} {
	return echo.NewTestServiceEchoJavaEnumArgs()
}

func newTestServiceEchoJavaEnumResult() interface{} {
	return echo.NewTestServiceEchoJavaEnumResult()
}

func echoGenericHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoGenericArgs)
	realResult := result.(*echo.TestServiceEchoGenericResult)
	success, err := handler.(echo.TestService).EchoGeneric(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoGenericArgs() interface{} {
	return echo.NewTestServiceEchoGenericArgs()
}

func newTestServiceEchoGenericResult() interface{} {
	return echo.NewTestServiceEchoGenericResult()
}

func echoJavaDateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoJavaDateArgs)
	realResult := result.(*echo.TestServiceEchoJavaDateResult)
	success, err := handler.(echo.TestService).EchoJavaDate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoJavaDateArgs() interface{} {
	return echo.NewTestServiceEchoJavaDateArgs()
}

func newTestServiceEchoJavaDateResult() interface{} {
	return echo.NewTestServiceEchoJavaDateResult()
}

func echoJavaDateListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoJavaDateListArgs)
	realResult := result.(*echo.TestServiceEchoJavaDateListResult)
	success, err := handler.(echo.TestService).EchoJavaDateList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoJavaDateListArgs() interface{} {
	return echo.NewTestServiceEchoJavaDateListArgs()
}

func newTestServiceEchoJavaDateListResult() interface{} {
	return echo.NewTestServiceEchoJavaDateListResult()
}

func echoJavaBigDecimalHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoJavaBigDecimalArgs)
	realResult := result.(*echo.TestServiceEchoJavaBigDecimalResult)
	success, err := handler.(echo.TestService).EchoJavaBigDecimal(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoJavaBigDecimalArgs() interface{} {
	return echo.NewTestServiceEchoJavaBigDecimalArgs()
}

func newTestServiceEchoJavaBigDecimalResult() interface{} {
	return echo.NewTestServiceEchoJavaBigDecimalResult()
}

func echoJavaBigIntegerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceEchoJavaBigIntegerArgs)
	realResult := result.(*echo.TestServiceEchoJavaBigIntegerResult)
	success, err := handler.(echo.TestService).EchoJavaBigInteger(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoJavaBigIntegerArgs() interface{} {
	return echo.NewTestServiceEchoJavaBigIntegerArgs()
}

func newTestServiceEchoJavaBigIntegerResult() interface{} {
	return echo.NewTestServiceEchoJavaBigIntegerResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) EchoRetByte(ctx context.Context) (r int8, err error) {
	var _args echo.TestServiceEchoRetByteArgs
	var _result echo.TestServiceEchoRetByteResult
	if err = p.c.Call(ctx, "EchoRetByte", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoRetBool(ctx context.Context) (r bool, err error) {
	var _args echo.TestServiceEchoRetBoolArgs
	var _result echo.TestServiceEchoRetBoolResult
	if err = p.c.Call(ctx, "EchoRetBool", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoRetInt16(ctx context.Context) (r int16, err error) {
	var _args echo.TestServiceEchoRetInt16Args
	var _result echo.TestServiceEchoRetInt16Result
	if err = p.c.Call(ctx, "EchoRetInt16", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoRetInt32(ctx context.Context) (r int32, err error) {
	var _args echo.TestServiceEchoRetInt32Args
	var _result echo.TestServiceEchoRetInt32Result
	if err = p.c.Call(ctx, "EchoRetInt32", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoRetInt64(ctx context.Context) (r int64, err error) {
	var _args echo.TestServiceEchoRetInt64Args
	var _result echo.TestServiceEchoRetInt64Result
	if err = p.c.Call(ctx, "EchoRetInt64", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoRetFloat(ctx context.Context) (r float64, err error) {
	var _args echo.TestServiceEchoRetFloatArgs
	var _result echo.TestServiceEchoRetFloatResult
	if err = p.c.Call(ctx, "EchoRetFloat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoRetDouble(ctx context.Context) (r float64, err error) {
	var _args echo.TestServiceEchoRetDoubleArgs
	var _result echo.TestServiceEchoRetDoubleResult
	if err = p.c.Call(ctx, "EchoRetDouble", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoRetString(ctx context.Context) (r string, err error) {
	var _args echo.TestServiceEchoRetStringArgs
	var _result echo.TestServiceEchoRetStringResult
	if err = p.c.Call(ctx, "EchoRetString", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoInt(ctx context.Context, req int32) (r int32, err error) {
	var _args echo.TestServiceEchoIntArgs
	_args.Req = req
	var _result echo.TestServiceEchoIntResult
	if err = p.c.Call(ctx, "EchoInt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool(ctx context.Context, req bool) (r bool, err error) {
	var _args echo.TestServiceEchoBoolArgs
	_args.Req = req
	var _result echo.TestServiceEchoBoolResult
	if err = p.c.Call(ctx, "EchoBool", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoByte(ctx context.Context, req int8) (r int8, err error) {
	var _args echo.TestServiceEchoByteArgs
	_args.Req = req
	var _result echo.TestServiceEchoByteResult
	if err = p.c.Call(ctx, "EchoByte", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoInt16(ctx context.Context, req int16) (r int16, err error) {
	var _args echo.TestServiceEchoInt16Args
	_args.Req = req
	var _result echo.TestServiceEchoInt16Result
	if err = p.c.Call(ctx, "EchoInt16", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoInt32(ctx context.Context, req int32) (r int32, err error) {
	var _args echo.TestServiceEchoInt32Args
	_args.Req = req
	var _result echo.TestServiceEchoInt32Result
	if err = p.c.Call(ctx, "EchoInt32", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoInt64(ctx context.Context, req int64) (r int64, err error) {
	var _args echo.TestServiceEchoInt64Args
	_args.Req = req
	var _result echo.TestServiceEchoInt64Result
	if err = p.c.Call(ctx, "EchoInt64", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoFloat(ctx context.Context, req float64) (r float64, err error) {
	var _args echo.TestServiceEchoFloatArgs
	_args.Req = req
	var _result echo.TestServiceEchoFloatResult
	if err = p.c.Call(ctx, "EchoFloat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoDouble(ctx context.Context, req float64) (r float64, err error) {
	var _args echo.TestServiceEchoDoubleArgs
	_args.Req = req
	var _result echo.TestServiceEchoDoubleResult
	if err = p.c.Call(ctx, "EchoDouble", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoString(ctx context.Context, req string) (r string, err error) {
	var _args echo.TestServiceEchoStringArgs
	_args.Req = req
	var _result echo.TestServiceEchoStringResult
	if err = p.c.Call(ctx, "EchoString", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBinary(ctx context.Context, req []byte) (r []byte, err error) {
	var _args echo.TestServiceEchoBinaryArgs
	_args.Req = req
	var _result echo.TestServiceEchoBinaryResult
	if err = p.c.Call(ctx, "EchoBinary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Echo(ctx context.Context, req *echo.EchoRequest) (r *echo.EchoResponse, err error) {
	var _args echo.TestServiceEchoArgs
	_args.Req = req
	var _result echo.TestServiceEchoResult
	if err = p.c.Call(ctx, "Echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBoolList(ctx context.Context, req []bool) (r []bool, err error) {
	var _args echo.TestServiceEchoBoolListArgs
	_args.Req = req
	var _result echo.TestServiceEchoBoolListResult
	if err = p.c.Call(ctx, "EchoBoolList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoByteList(ctx context.Context, req []int8) (r []int8, err error) {
	var _args echo.TestServiceEchoByteListArgs
	_args.Req = req
	var _result echo.TestServiceEchoByteListResult
	if err = p.c.Call(ctx, "EchoByteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoInt16List(ctx context.Context, req []int16) (r []int16, err error) {
	var _args echo.TestServiceEchoInt16ListArgs
	_args.Req = req
	var _result echo.TestServiceEchoInt16ListResult
	if err = p.c.Call(ctx, "EchoInt16List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoInt32List(ctx context.Context, req []int32) (r []int32, err error) {
	var _args echo.TestServiceEchoInt32ListArgs
	_args.Req = req
	var _result echo.TestServiceEchoInt32ListResult
	if err = p.c.Call(ctx, "EchoInt32List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoInt64List(ctx context.Context, req []int64) (r []int64, err error) {
	var _args echo.TestServiceEchoInt64ListArgs
	_args.Req = req
	var _result echo.TestServiceEchoInt64ListResult
	if err = p.c.Call(ctx, "EchoInt64List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoFloatList(ctx context.Context, req []float64) (r []float64, err error) {
	var _args echo.TestServiceEchoFloatListArgs
	_args.Req = req
	var _result echo.TestServiceEchoFloatListResult
	if err = p.c.Call(ctx, "EchoFloatList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoDoubleList(ctx context.Context, req []float64) (r []float64, err error) {
	var _args echo.TestServiceEchoDoubleListArgs
	_args.Req = req
	var _result echo.TestServiceEchoDoubleListResult
	if err = p.c.Call(ctx, "EchoDoubleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoStringList(ctx context.Context, req []string) (r []string, err error) {
	var _args echo.TestServiceEchoStringListArgs
	_args.Req = req
	var _result echo.TestServiceEchoStringListResult
	if err = p.c.Call(ctx, "EchoStringList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBinaryList(ctx context.Context, req [][]byte) (r [][]byte, err error) {
	var _args echo.TestServiceEchoBinaryListArgs
	_args.Req = req
	var _result echo.TestServiceEchoBinaryListResult
	if err = p.c.Call(ctx, "EchoBinaryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2BoolMap(ctx context.Context, req map[bool]bool) (r map[bool]bool, err error) {
	var _args echo.TestServiceEchoBool2BoolMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2BoolMapResult
	if err = p.c.Call(ctx, "EchoBool2BoolMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2ByteMap(ctx context.Context, req map[bool]int8) (r map[bool]int8, err error) {
	var _args echo.TestServiceEchoBool2ByteMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2ByteMapResult
	if err = p.c.Call(ctx, "EchoBool2ByteMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2Int16Map(ctx context.Context, req map[bool]int16) (r map[bool]int16, err error) {
	var _args echo.TestServiceEchoBool2Int16MapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2Int16MapResult
	if err = p.c.Call(ctx, "EchoBool2Int16Map", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2Int32Map(ctx context.Context, req map[bool]int32) (r map[bool]int32, err error) {
	var _args echo.TestServiceEchoBool2Int32MapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2Int32MapResult
	if err = p.c.Call(ctx, "EchoBool2Int32Map", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2Int64Map(ctx context.Context, req map[bool]int64) (r map[bool]int64, err error) {
	var _args echo.TestServiceEchoBool2Int64MapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2Int64MapResult
	if err = p.c.Call(ctx, "EchoBool2Int64Map", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2FloatMap(ctx context.Context, req map[bool]float64) (r map[bool]float64, err error) {
	var _args echo.TestServiceEchoBool2FloatMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2FloatMapResult
	if err = p.c.Call(ctx, "EchoBool2FloatMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2DoubleMap(ctx context.Context, req map[bool]float64) (r map[bool]float64, err error) {
	var _args echo.TestServiceEchoBool2DoubleMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2DoubleMapResult
	if err = p.c.Call(ctx, "EchoBool2DoubleMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2StringMap(ctx context.Context, req map[bool]string) (r map[bool]string, err error) {
	var _args echo.TestServiceEchoBool2StringMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2StringMapResult
	if err = p.c.Call(ctx, "EchoBool2StringMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2BinaryMap(ctx context.Context, req map[bool][]byte) (r map[bool][]byte, err error) {
	var _args echo.TestServiceEchoBool2BinaryMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2BinaryMapResult
	if err = p.c.Call(ctx, "EchoBool2BinaryMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2BoolListMap(ctx context.Context, req map[bool][]bool) (r map[bool][]bool, err error) {
	var _args echo.TestServiceEchoBool2BoolListMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2BoolListMapResult
	if err = p.c.Call(ctx, "EchoBool2BoolListMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2ByteListMap(ctx context.Context, req map[bool][]int8) (r map[bool][]int8, err error) {
	var _args echo.TestServiceEchoBool2ByteListMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2ByteListMapResult
	if err = p.c.Call(ctx, "EchoBool2ByteListMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2Int16ListMap(ctx context.Context, req map[bool][]int16) (r map[bool][]int16, err error) {
	var _args echo.TestServiceEchoBool2Int16ListMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2Int16ListMapResult
	if err = p.c.Call(ctx, "EchoBool2Int16ListMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2Int32ListMap(ctx context.Context, req map[bool][]int32) (r map[bool][]int32, err error) {
	var _args echo.TestServiceEchoBool2Int32ListMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2Int32ListMapResult
	if err = p.c.Call(ctx, "EchoBool2Int32ListMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2Int64ListMap(ctx context.Context, req map[bool][]int64) (r map[bool][]int64, err error) {
	var _args echo.TestServiceEchoBool2Int64ListMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2Int64ListMapResult
	if err = p.c.Call(ctx, "EchoBool2Int64ListMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2FloatListMap(ctx context.Context, req map[bool][]float64) (r map[bool][]float64, err error) {
	var _args echo.TestServiceEchoBool2FloatListMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2FloatListMapResult
	if err = p.c.Call(ctx, "EchoBool2FloatListMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2DoubleListMap(ctx context.Context, req map[bool][]float64) (r map[bool][]float64, err error) {
	var _args echo.TestServiceEchoBool2DoubleListMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2DoubleListMapResult
	if err = p.c.Call(ctx, "EchoBool2DoubleListMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2StringListMap(ctx context.Context, req map[bool][]string) (r map[bool][]string, err error) {
	var _args echo.TestServiceEchoBool2StringListMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2StringListMapResult
	if err = p.c.Call(ctx, "EchoBool2StringListMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2BinaryListMap(ctx context.Context, req map[bool][][]byte) (r map[bool][][]byte, err error) {
	var _args echo.TestServiceEchoBool2BinaryListMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2BinaryListMapResult
	if err = p.c.Call(ctx, "EchoBool2BinaryListMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiBool(ctx context.Context, baseReq bool, listReq []bool, mapReq map[bool]bool) (r *echo.EchoMultiBoolResponse, err error) {
	var _args echo.TestServiceEchoMultiBoolArgs
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiBoolResult
	if err = p.c.Call(ctx, "EchoMultiBool", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiByte(ctx context.Context, baseReq int8, listReq []int8, mapReq map[int8]int8) (r *echo.EchoMultiByteResponse, err error) {
	var _args echo.TestServiceEchoMultiByteArgs
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiByteResult
	if err = p.c.Call(ctx, "EchoMultiByte", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiInt16(ctx context.Context, baseReq int16, listReq []int16, mapReq map[int16]int16) (r *echo.EchoMultiInt16Response, err error) {
	var _args echo.TestServiceEchoMultiInt16Args
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiInt16Result
	if err = p.c.Call(ctx, "EchoMultiInt16", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiInt32(ctx context.Context, baseReq int32, listReq []int32, mapReq map[int32]int32) (r *echo.EchoMultiInt32Response, err error) {
	var _args echo.TestServiceEchoMultiInt32Args
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiInt32Result
	if err = p.c.Call(ctx, "EchoMultiInt32", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiInt64(ctx context.Context, baseReq int64, listReq []int64, mapReq map[int64]int64) (r *echo.EchoMultiInt64Response, err error) {
	var _args echo.TestServiceEchoMultiInt64Args
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiInt64Result
	if err = p.c.Call(ctx, "EchoMultiInt64", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiFloat(ctx context.Context, baseReq float64, listReq []float64, mapReq map[float64]float64) (r *echo.EchoMultiFloatResponse, err error) {
	var _args echo.TestServiceEchoMultiFloatArgs
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiFloatResult
	if err = p.c.Call(ctx, "EchoMultiFloat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiDouble(ctx context.Context, baseReq float64, listReq []float64, mapReq map[float64]float64) (r *echo.EchoMultiDoubleResponse, err error) {
	var _args echo.TestServiceEchoMultiDoubleArgs
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiDoubleResult
	if err = p.c.Call(ctx, "EchoMultiDouble", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiString(ctx context.Context, baseReq string, listReq []string, mapReq map[string]string) (r *echo.EchoMultiStringResponse, err error) {
	var _args echo.TestServiceEchoMultiStringArgs
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiStringResult
	if err = p.c.Call(ctx, "EchoMultiString", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseBool(ctx context.Context, req bool) (r bool, err error) {
	var _args echo.TestServiceEchoBaseBoolArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseBoolResult
	if err = p.c.Call(ctx, "EchoBaseBool", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseByte(ctx context.Context, req int8) (r int8, err error) {
	var _args echo.TestServiceEchoBaseByteArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseByteResult
	if err = p.c.Call(ctx, "EchoBaseByte", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseInt16(ctx context.Context, req int16) (r int16, err error) {
	var _args echo.TestServiceEchoBaseInt16Args
	_args.Req = req
	var _result echo.TestServiceEchoBaseInt16Result
	if err = p.c.Call(ctx, "EchoBaseInt16", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseInt32(ctx context.Context, req int32) (r int32, err error) {
	var _args echo.TestServiceEchoBaseInt32Args
	_args.Req = req
	var _result echo.TestServiceEchoBaseInt32Result
	if err = p.c.Call(ctx, "EchoBaseInt32", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseInt64(ctx context.Context, req int64) (r int64, err error) {
	var _args echo.TestServiceEchoBaseInt64Args
	_args.Req = req
	var _result echo.TestServiceEchoBaseInt64Result
	if err = p.c.Call(ctx, "EchoBaseInt64", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseFloat(ctx context.Context, req float64) (r float64, err error) {
	var _args echo.TestServiceEchoBaseFloatArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseFloatResult
	if err = p.c.Call(ctx, "EchoBaseFloat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseDouble(ctx context.Context, req float64) (r float64, err error) {
	var _args echo.TestServiceEchoBaseDoubleArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseDoubleResult
	if err = p.c.Call(ctx, "EchoBaseDouble", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseBoolList(ctx context.Context, req []bool) (r []bool, err error) {
	var _args echo.TestServiceEchoBaseBoolListArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseBoolListResult
	if err = p.c.Call(ctx, "EchoBaseBoolList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseByteList(ctx context.Context, req []int8) (r []int8, err error) {
	var _args echo.TestServiceEchoBaseByteListArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseByteListResult
	if err = p.c.Call(ctx, "EchoBaseByteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseInt16List(ctx context.Context, req []int16) (r []int16, err error) {
	var _args echo.TestServiceEchoBaseInt16ListArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseInt16ListResult
	if err = p.c.Call(ctx, "EchoBaseInt16List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseInt32List(ctx context.Context, req []int32) (r []int32, err error) {
	var _args echo.TestServiceEchoBaseInt32ListArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseInt32ListResult
	if err = p.c.Call(ctx, "EchoBaseInt32List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseInt64List(ctx context.Context, req []int64) (r []int64, err error) {
	var _args echo.TestServiceEchoBaseInt64ListArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseInt64ListResult
	if err = p.c.Call(ctx, "EchoBaseInt64List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseFloatList(ctx context.Context, req []float64) (r []float64, err error) {
	var _args echo.TestServiceEchoBaseFloatListArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseFloatListResult
	if err = p.c.Call(ctx, "EchoBaseFloatList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBaseDoubleList(ctx context.Context, req []float64) (r []float64, err error) {
	var _args echo.TestServiceEchoBaseDoubleListArgs
	_args.Req = req
	var _result echo.TestServiceEchoBaseDoubleListResult
	if err = p.c.Call(ctx, "EchoBaseDoubleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2BoolBaseMap(ctx context.Context, req map[bool]bool) (r map[bool]bool, err error) {
	var _args echo.TestServiceEchoBool2BoolBaseMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2BoolBaseMapResult
	if err = p.c.Call(ctx, "EchoBool2BoolBaseMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2ByteBaseMap(ctx context.Context, req map[bool]int8) (r map[bool]int8, err error) {
	var _args echo.TestServiceEchoBool2ByteBaseMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2ByteBaseMapResult
	if err = p.c.Call(ctx, "EchoBool2ByteBaseMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2Int16BaseMap(ctx context.Context, req map[bool]int16) (r map[bool]int16, err error) {
	var _args echo.TestServiceEchoBool2Int16BaseMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2Int16BaseMapResult
	if err = p.c.Call(ctx, "EchoBool2Int16BaseMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2Int32BaseMap(ctx context.Context, req map[bool]int32) (r map[bool]int32, err error) {
	var _args echo.TestServiceEchoBool2Int32BaseMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2Int32BaseMapResult
	if err = p.c.Call(ctx, "EchoBool2Int32BaseMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2Int64BaseMap(ctx context.Context, req map[bool]int64) (r map[bool]int64, err error) {
	var _args echo.TestServiceEchoBool2Int64BaseMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2Int64BaseMapResult
	if err = p.c.Call(ctx, "EchoBool2Int64BaseMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2FloatBaseMap(ctx context.Context, req map[bool]float64) (r map[bool]float64, err error) {
	var _args echo.TestServiceEchoBool2FloatBaseMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2FloatBaseMapResult
	if err = p.c.Call(ctx, "EchoBool2FloatBaseMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBool2DoubleBaseMap(ctx context.Context, req map[bool]float64) (r map[bool]float64, err error) {
	var _args echo.TestServiceEchoBool2DoubleBaseMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoBool2DoubleBaseMapResult
	if err = p.c.Call(ctx, "EchoBool2DoubleBaseMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiBaseBool(ctx context.Context, baseReq bool, listReq []bool, mapReq map[bool]bool) (r *echo.EchoMultiBoolResponse, err error) {
	var _args echo.TestServiceEchoMultiBaseBoolArgs
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiBaseBoolResult
	if err = p.c.Call(ctx, "EchoMultiBaseBool", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiBaseByte(ctx context.Context, baseReq int8, listReq []int8, mapReq map[int8]int8) (r *echo.EchoMultiByteResponse, err error) {
	var _args echo.TestServiceEchoMultiBaseByteArgs
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiBaseByteResult
	if err = p.c.Call(ctx, "EchoMultiBaseByte", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiBaseInt16(ctx context.Context, baseReq int16, listReq []int16, mapReq map[int16]int16) (r *echo.EchoMultiInt16Response, err error) {
	var _args echo.TestServiceEchoMultiBaseInt16Args
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiBaseInt16Result
	if err = p.c.Call(ctx, "EchoMultiBaseInt16", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiBaseInt32(ctx context.Context, baseReq int32, listReq []int32, mapReq map[int32]int32) (r *echo.EchoMultiInt32Response, err error) {
	var _args echo.TestServiceEchoMultiBaseInt32Args
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiBaseInt32Result
	if err = p.c.Call(ctx, "EchoMultiBaseInt32", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiBaseInt64(ctx context.Context, baseReq int64, listReq []int64, mapReq map[int64]int64) (r *echo.EchoMultiInt64Response, err error) {
	var _args echo.TestServiceEchoMultiBaseInt64Args
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiBaseInt64Result
	if err = p.c.Call(ctx, "EchoMultiBaseInt64", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiBaseFloat(ctx context.Context, baseReq float64, listReq []float64, mapReq map[float64]float64) (r *echo.EchoMultiFloatResponse, err error) {
	var _args echo.TestServiceEchoMultiBaseFloatArgs
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiBaseFloatResult
	if err = p.c.Call(ctx, "EchoMultiBaseFloat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMultiBaseDouble(ctx context.Context, baseReq float64, listReq []float64, mapReq map[float64]float64) (r *echo.EchoMultiDoubleResponse, err error) {
	var _args echo.TestServiceEchoMultiBaseDoubleArgs
	_args.BaseReq = baseReq
	_args.ListReq = listReq
	_args.MapReq = mapReq
	var _result echo.TestServiceEchoMultiBaseDoubleResult
	if err = p.c.Call(ctx, "EchoMultiBaseDouble", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMethodA(ctx context.Context, req bool) (r string, err error) {
	var _args echo.TestServiceEchoMethodAArgs
	_args.Req = req
	var _result echo.TestServiceEchoMethodAResult
	if err = p.c.Call(ctx, "EchoMethodA", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMethodB(ctx context.Context, req int32) (r string, err error) {
	var _args echo.TestServiceEchoMethodBArgs
	_args.Req = req
	var _result echo.TestServiceEchoMethodBResult
	if err = p.c.Call(ctx, "EchoMethodB", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMethodC(ctx context.Context, req int32) (r string, err error) {
	var _args echo.TestServiceEchoMethodCArgs
	_args.Req = req
	var _result echo.TestServiceEchoMethodCResult
	if err = p.c.Call(ctx, "EchoMethodC", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoMethodD(ctx context.Context, req1 bool, req2 int32) (r string, err error) {
	var _args echo.TestServiceEchoMethodDArgs
	_args.Req1 = req1
	_args.Req2 = req2
	var _result echo.TestServiceEchoMethodDResult
	if err = p.c.Call(ctx, "EchoMethodD", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalBool(ctx context.Context, req bool) (r bool, err error) {
	var _args echo.TestServiceEchoOptionalBoolArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalBoolResult
	if err = p.c.Call(ctx, "EchoOptionalBool", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalInt32(ctx context.Context, req int32) (r int32, err error) {
	var _args echo.TestServiceEchoOptionalInt32Args
	_args.Req = req
	var _result echo.TestServiceEchoOptionalInt32Result
	if err = p.c.Call(ctx, "EchoOptionalInt32", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalString(ctx context.Context, req string) (r string, err error) {
	var _args echo.TestServiceEchoOptionalStringArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalStringResult
	if err = p.c.Call(ctx, "EchoOptionalString", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalBoolList(ctx context.Context, req []bool) (r []bool, err error) {
	var _args echo.TestServiceEchoOptionalBoolListArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalBoolListResult
	if err = p.c.Call(ctx, "EchoOptionalBoolList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalInt32List(ctx context.Context, req []int32) (r []int32, err error) {
	var _args echo.TestServiceEchoOptionalInt32ListArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalInt32ListResult
	if err = p.c.Call(ctx, "EchoOptionalInt32List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalStringList(ctx context.Context, req []string) (r []string, err error) {
	var _args echo.TestServiceEchoOptionalStringListArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalStringListResult
	if err = p.c.Call(ctx, "EchoOptionalStringList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalBool2BoolMap(ctx context.Context, req map[bool]bool) (r map[bool]bool, err error) {
	var _args echo.TestServiceEchoOptionalBool2BoolMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalBool2BoolMapResult
	if err = p.c.Call(ctx, "EchoOptionalBool2BoolMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalBool2Int32Map(ctx context.Context, req map[bool]int32) (r map[bool]int32, err error) {
	var _args echo.TestServiceEchoOptionalBool2Int32MapArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalBool2Int32MapResult
	if err = p.c.Call(ctx, "EchoOptionalBool2Int32Map", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalBool2StringMap(ctx context.Context, req map[bool]string) (r map[bool]string, err error) {
	var _args echo.TestServiceEchoOptionalBool2StringMapArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalBool2StringMapResult
	if err = p.c.Call(ctx, "EchoOptionalBool2StringMap", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalStruct(ctx context.Context, req *echo.EchoOptionalStructRequest) (r *echo.EchoOptionalStructResponse, err error) {
	var _args echo.TestServiceEchoOptionalStructArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalStructResult
	if err = p.c.Call(ctx, "EchoOptionalStruct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalMultiBoolRequest(ctx context.Context, req *echo.EchoOptionalMultiBoolRequest) (r bool, err error) {
	var _args echo.TestServiceEchoOptionalMultiBoolRequestArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalMultiBoolRequestResult
	if err = p.c.Call(ctx, "EchoOptionalMultiBoolRequest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalMultiInt32Request(ctx context.Context, req *echo.EchoOptionalMultiInt32Request) (r int32, err error) {
	var _args echo.TestServiceEchoOptionalMultiInt32RequestArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalMultiInt32RequestResult
	if err = p.c.Call(ctx, "EchoOptionalMultiInt32Request", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalMultiStringRequest(ctx context.Context, req *echo.EchoOptionalMultiStringRequest) (r string, err error) {
	var _args echo.TestServiceEchoOptionalMultiStringRequestArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalMultiStringRequestResult
	if err = p.c.Call(ctx, "EchoOptionalMultiStringRequest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalMultiBoolResponse(ctx context.Context, req bool) (r *echo.EchoOptionalMultiBoolResponse, err error) {
	var _args echo.TestServiceEchoOptionalMultiBoolResponseArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalMultiBoolResponseResult
	if err = p.c.Call(ctx, "EchoOptionalMultiBoolResponse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalMultiInt32Response(ctx context.Context, req int32) (r *echo.EchoOptionalMultiInt32Response, err error) {
	var _args echo.TestServiceEchoOptionalMultiInt32ResponseArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalMultiInt32ResponseResult
	if err = p.c.Call(ctx, "EchoOptionalMultiInt32Response", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOptionalMultiStringResponse(ctx context.Context, req string) (r *echo.EchoOptionalMultiStringResponse, err error) {
	var _args echo.TestServiceEchoOptionalMultiStringResponseArgs
	_args.Req = req
	var _result echo.TestServiceEchoOptionalMultiStringResponseResult
	if err = p.c.Call(ctx, "EchoOptionalMultiStringResponse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoException(ctx context.Context, req bool) (r bool, err error) {
	var _args echo.TestServiceEchoExceptionArgs
	_args.Req = req
	var _result echo.TestServiceEchoExceptionResult
	if err = p.c.Call(ctx, "EchoException", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoCustomizedException(ctx context.Context, req bool) (r bool, err error) {
	var _args echo.TestServiceEchoCustomizedExceptionArgs
	_args.Req = req
	var _result echo.TestServiceEchoCustomizedExceptionResult
	if err = p.c.Call(ctx, "EchoCustomizedException", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoJavaEnum(ctx context.Context, kitexEnum echo.KitexEnum) (r string, err error) {
	var _args echo.TestServiceEchoJavaEnumArgs
	_args.KitexEnum = kitexEnum
	var _result echo.TestServiceEchoJavaEnumResult
	if err = p.c.Call(ctx, "EchoJavaEnum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoGeneric(ctx context.Context, req *echo.EchoGenericRequest) (r *echo.EchoGenericResponse, err error) {
	var _args echo.TestServiceEchoGenericArgs
	_args.Req = req
	var _result echo.TestServiceEchoGenericResult
	if err = p.c.Call(ctx, "EchoGeneric", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoJavaDate(ctx context.Context, req *java.Date) (r *java.Date, err error) {
	var _args echo.TestServiceEchoJavaDateArgs
	_args.Req = req
	var _result echo.TestServiceEchoJavaDateResult
	if err = p.c.Call(ctx, "EchoJavaDate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoJavaDateList(ctx context.Context, req []*java.Date) (r []*java.Date, err error) {
	var _args echo.TestServiceEchoJavaDateListArgs
	_args.Req = req
	var _result echo.TestServiceEchoJavaDateListResult
	if err = p.c.Call(ctx, "EchoJavaDateList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoJavaBigDecimal(ctx context.Context, req *extensions.BigDecimal) (r *extensions.BigDecimal, err error) {
	var _args echo.TestServiceEchoJavaBigDecimalArgs
	_args.Req = req
	var _result echo.TestServiceEchoJavaBigDecimalResult
	if err = p.c.Call(ctx, "EchoJavaBigDecimal", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoJavaBigInteger(ctx context.Context, req *extensions.BigInteger) (r *extensions.BigInteger, err error) {
	var _args echo.TestServiceEchoJavaBigIntegerArgs
	_args.Req = req
	var _result echo.TestServiceEchoJavaBigIntegerResult
	if err = p.c.Call(ctx, "EchoJavaBigInteger", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
